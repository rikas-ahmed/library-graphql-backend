{"version":3,"file":"PgBackwardRelationPlugin.js","names":["_debug","_interopRequireDefault","require","obj","__esModule","default","debug","debugFactory","OMIT","DEPRECATED","ONLY","PgBackwardRelationPlugin","builder","pgLegacyRelations","pgSimpleCollections","subscriptions","legacyRelationMode","only","deprecated","hook","fields","build","context","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","graphql","GraphQLNonNull","GraphQLList","inflection","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","sqlCommentByAddingTags","describePgEntity","scope","isPgRowType","pgIntrospection","foreignTable","fieldWithHooks","Self","kind","foreignKeyConstraints","foreignConstraints","filter","con","type","foreignTableTypeName","tableType","gqlForeignTableType","id","reduce","memo","constraint","table","classById","classId","Error","name","isSelectable","tableTypeName","gqlTableType","schema","namespace","keys","keyAttributes","foreignKeys","foreignKeyAttributes","every","_","some","key","isUnique","constraints","find","c","keyAttributeNums","length","n","i","num","isDeprecated","singleRelationFieldName","singleRelationByKeysBackwards","primaryKeyConstraint","primaryKeys","shouldAddSingleRelation","shouldAddManyRelation","getDataFromParsedResolveInfoFragment","addDataGenerator","sqlFrom","identifier","parsedResolveInfoFragment","pgQuery","queryBuilder","select","resolveData","tableAlias","Symbol","foreignTableAlias","getTableAlias","query","useAsterisk","asJson","addNullCase","withPagination","innerQueryBuilder","parentQueryBuilder","selectIdentifiers","makeLiveCollection","addLiveCondition","data","record","fragment","forEach","where","rootValue","alias","description","tags","backwardDescription","wrapDescription","args","resolve","_args","resolveContext","resolveInfo","safeAlias","liveRecord","liveCollection","liveConditions","__live","__id","rest","condition","checker","__identifiers","pgFieldIntrospection","isPgBackwardSingleRelationField","foreignSingleFieldName","makeFields","isConnection","manyRelationFieldName","manyRelationByKeys","manyRelationByKeysSimple","queryOptions","canUseAsterisk","withPaginationAsFields","asJsonAggregate","ConnectionType","TableType","beforeLock","isOrderUnique","cursorPrefix","orderBy","setOrderIsUnique","connection","records","r","deprecationReason","isPgFieldConnection","isPgFieldSimpleCollection","isPgBackwardRelationField","simpleCollections","hasConnections","hasSimpleCollections","exports"],"sources":["../../src/plugins/PgBackwardRelationPlugin.js"],"sourcesContent":["// @flow\nimport debugFactory from \"debug\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nconst OMIT = 0;\nconst DEPRECATED = 1;\nconst ONLY = 2;\n\nexport default (function PgBackwardRelationPlugin(\n  builder,\n  { pgLegacyRelations, pgSimpleCollections, subscriptions }\n) {\n  const legacyRelationMode =\n    {\n      only: ONLY,\n      deprecated: DEPRECATED,\n    }[pgLegacyRelations] || OMIT;\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        getSafeAliasFromResolveInfo,\n        getSafeAliasFromAlias,\n        graphql: { GraphQLNonNull, GraphQLList },\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit: omit,\n        sqlCommentByAddingTags,\n        describePgEntity,\n      } = build;\n      const {\n        scope: { isPgRowType, pgIntrospection: foreignTable },\n        fieldWithHooks,\n        Self,\n      } = context;\n      if (!isPgRowType || !foreignTable || foreignTable.kind !== \"class\") {\n        return fields;\n      }\n      // This is a relation in which WE are foreign\n      const foreignKeyConstraints = foreignTable.foreignConstraints.filter(\n        con => con.type === \"f\"\n      );\n      const foreignTableTypeName = inflection.tableType(foreignTable);\n      const gqlForeignTableType = pgGetGqlTypeByTypeIdAndModifier(\n        foreignTable.type.id,\n        null\n      );\n      if (!gqlForeignTableType) {\n        debug(\n          `Could not determine type for foreign table with id ${foreignTable.type.id}`\n        );\n        return fields;\n      }\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          if (omit(constraint, \"read\")) {\n            return memo;\n          }\n          const table =\n            introspectionResultsByKind.classById[constraint.classId];\n          if (!table) {\n            throw new Error(\n              `Could not find the table that referenced us (constraint: ${constraint.name})`\n            );\n          }\n          if (!table.isSelectable) {\n            // Could be a composite type\n            return memo;\n          }\n          const tableTypeName = inflection.tableType(table);\n          const gqlTableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const schema = table.namespace;\n\n          const keys = constraint.keyAttributes;\n          const foreignKeys = constraint.foreignKeyAttributes;\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n          if (keys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n          if (foreignKeys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n          const isUnique = !!table.constraints.find(\n            c =>\n              (c.type === \"p\" || c.type === \"u\") &&\n              c.keyAttributeNums.length === keys.length &&\n              c.keyAttributeNums.every((n, i) => keys[i].num === n)\n          );\n\n          const isDeprecated = isUnique && legacyRelationMode === DEPRECATED;\n\n          const singleRelationFieldName = isUnique\n            ? inflection.singleRelationByKeysBackwards(\n                keys,\n                table,\n                foreignTable,\n                constraint\n              )\n            : null;\n\n          const primaryKeyConstraint = table.primaryKeyConstraint;\n          const primaryKeys =\n            primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n\n          const shouldAddSingleRelation =\n            isUnique && legacyRelationMode !== ONLY;\n\n          const shouldAddManyRelation =\n            !isUnique ||\n            legacyRelationMode === DEPRECATED ||\n            legacyRelationMode === ONLY;\n\n          if (\n            shouldAddSingleRelation &&\n            !omit(table, \"read\") &&\n            singleRelationFieldName\n          ) {\n            memo = extend(\n              memo,\n              {\n                [singleRelationFieldName]: fieldWithHooks(\n                  singleRelationFieldName,\n                  ({\n                    getDataFromParsedResolveInfoFragment,\n                    addDataGenerator,\n                  }) => {\n                    const sqlFrom = sql.identifier(schema.name, table.name);\n                    addDataGenerator(parsedResolveInfoFragment => {\n                      return {\n                        pgQuery: queryBuilder => {\n                          queryBuilder.select(() => {\n                            const resolveData =\n                              getDataFromParsedResolveInfoFragment(\n                                parsedResolveInfoFragment,\n                                gqlTableType\n                              );\n                            const tableAlias = sql.identifier(Symbol());\n                            const foreignTableAlias =\n                              queryBuilder.getTableAlias();\n                            const query = queryFromResolveData(\n                              sqlFrom,\n                              tableAlias,\n                              resolveData,\n                              {\n                                useAsterisk: false, // Because it's only a single relation, no need\n                                asJson: true,\n                                addNullCase: true,\n                                withPagination: false,\n                              },\n                              innerQueryBuilder => {\n                                innerQueryBuilder.parentQueryBuilder =\n                                  queryBuilder;\n                                if (\n                                  subscriptions &&\n                                  table.primaryKeyConstraint\n                                ) {\n                                  innerQueryBuilder.selectIdentifiers(table);\n                                  innerQueryBuilder.makeLiveCollection(table);\n                                  innerQueryBuilder.addLiveCondition(\n                                    data => record => {\n                                      return keys.every(\n                                        key =>\n                                          record[key.name] === data[key.name]\n                                      );\n                                    },\n                                    keys.reduce((memo, key, i) => {\n                                      memo[\n                                        key.name\n                                      ] = sql.fragment`${foreignTableAlias}.${sql.identifier(\n                                        foreignKeys[i].name\n                                      )}`;\n                                      return memo;\n                                    }, {})\n                                  );\n                                }\n                                keys.forEach((key, i) => {\n                                  innerQueryBuilder.where(\n                                    sql.fragment`${tableAlias}.${sql.identifier(\n                                      key.name\n                                    )} = ${foreignTableAlias}.${sql.identifier(\n                                      foreignKeys[i].name\n                                    )}`\n                                  );\n                                });\n                              },\n                              queryBuilder.context,\n                              queryBuilder.rootValue\n                            );\n                            return sql.fragment`(${query})`;\n                          }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                        },\n                      };\n                    });\n                    return {\n                      description:\n                        constraint.tags.backwardDescription ||\n                        build.wrapDescription(\n                          `Reads a single \\`${tableTypeName}\\` that is related to this \\`${foreignTableTypeName}\\`.`,\n                          \"field\"\n                        ),\n                      type: gqlTableType,\n                      args: {},\n                      resolve: (data, _args, resolveContext, resolveInfo) => {\n                        const safeAlias =\n                          getSafeAliasFromResolveInfo(resolveInfo);\n                        const record = data[safeAlias];\n                        const liveRecord =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveRecord;\n                        const liveCollection =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveCollection;\n                        const liveConditions =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveConditions;\n                        if (\n                          subscriptions &&\n                          liveCollection &&\n                          liveConditions &&\n                          data.__live\n                        ) {\n                          const { __id, ...rest } = data.__live;\n                          const condition = liveConditions[__id];\n                          const checker = condition(rest);\n\n                          liveCollection(\"pg\", table, checker);\n                        }\n                        if (record && liveRecord) {\n                          liveRecord(\"pg\", table, record.__identifiers);\n                        }\n                        return record;\n                      },\n                    };\n                  },\n                  {\n                    pgFieldIntrospection: table,\n                    isPgBackwardSingleRelationField: true,\n                  }\n                ),\n              },\n              `Backward relation (single) for ${describePgEntity(\n                constraint\n              )}. To rename this relation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                constraint,\n                {\n                  foreignSingleFieldName: \"newNameHere\",\n                }\n              )}`\n            );\n          }\n          function makeFields(isConnection) {\n            const manyRelationFieldName = isConnection\n              ? inflection.manyRelationByKeys(\n                  keys,\n                  table,\n                  foreignTable,\n                  constraint\n                )\n              : inflection.manyRelationByKeysSimple(\n                  keys,\n                  table,\n                  foreignTable,\n                  constraint\n                );\n\n            memo = extend(\n              memo,\n              {\n                [manyRelationFieldName]: fieldWithHooks(\n                  manyRelationFieldName,\n                  ({\n                    getDataFromParsedResolveInfoFragment,\n                    addDataGenerator,\n                  }) => {\n                    const sqlFrom = sql.identifier(schema.name, table.name);\n                    const queryOptions = {\n                      useAsterisk: table.canUseAsterisk,\n                      withPagination: isConnection,\n                      withPaginationAsFields: false,\n                      asJsonAggregate: !isConnection,\n                    };\n                    addDataGenerator(parsedResolveInfoFragment => {\n                      return {\n                        pgQuery: queryBuilder => {\n                          queryBuilder.select(() => {\n                            const resolveData =\n                              getDataFromParsedResolveInfoFragment(\n                                parsedResolveInfoFragment,\n                                isConnection ? ConnectionType : TableType\n                              );\n                            const tableAlias = sql.identifier(Symbol());\n                            const foreignTableAlias =\n                              queryBuilder.getTableAlias();\n                            const query = queryFromResolveData(\n                              sqlFrom,\n                              tableAlias,\n                              resolveData,\n                              queryOptions,\n                              innerQueryBuilder => {\n                                innerQueryBuilder.parentQueryBuilder =\n                                  queryBuilder;\n                                if (subscriptions) {\n                                  innerQueryBuilder.makeLiveCollection(table);\n                                  innerQueryBuilder.addLiveCondition(\n                                    data => record => {\n                                      return keys.every(\n                                        key =>\n                                          record[key.name] === data[key.name]\n                                      );\n                                    },\n                                    keys.reduce((memo, key, i) => {\n                                      memo[\n                                        key.name\n                                      ] = sql.fragment`${foreignTableAlias}.${sql.identifier(\n                                        foreignKeys[i].name\n                                      )}`;\n                                      return memo;\n                                    }, {})\n                                  );\n                                }\n                                if (primaryKeys) {\n                                  if (\n                                    subscriptions &&\n                                    !isConnection &&\n                                    table.primaryKeyConstraint\n                                  ) {\n                                    innerQueryBuilder.selectIdentifiers(table);\n                                  }\n                                  innerQueryBuilder.beforeLock(\n                                    \"orderBy\",\n                                    () => {\n                                      // append order by primary key to the list of orders\n                                      if (\n                                        !innerQueryBuilder.isOrderUnique(false)\n                                      ) {\n                                        innerQueryBuilder.data.cursorPrefix = [\n                                          \"primary_key_asc\",\n                                        ];\n                                        primaryKeys.forEach(key => {\n                                          innerQueryBuilder.orderBy(\n                                            sql.fragment`${innerQueryBuilder.getTableAlias()}.${sql.identifier(\n                                              key.name\n                                            )}`,\n                                            true\n                                          );\n                                        });\n                                        innerQueryBuilder.setOrderIsUnique();\n                                      }\n                                    }\n                                  );\n                                }\n\n                                keys.forEach((key, i) => {\n                                  innerQueryBuilder.where(\n                                    sql.fragment`${tableAlias}.${sql.identifier(\n                                      key.name\n                                    )} = ${foreignTableAlias}.${sql.identifier(\n                                      foreignKeys[i].name\n                                    )}`\n                                  );\n                                });\n                              },\n                              queryBuilder.context,\n                              queryBuilder.rootValue\n                            );\n                            return sql.fragment`(${query})`;\n                          }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                        },\n                      };\n                    });\n                    const ConnectionType = getTypeByName(\n                      inflection.connection(gqlTableType.name)\n                    );\n                    const TableType = pgGetGqlTypeByTypeIdAndModifier(\n                      table.type.id,\n                      null\n                    );\n                    return {\n                      description:\n                        constraint.tags.backwardDescription ||\n                        build.wrapDescription(\n                          `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                          \"field\"\n                        ),\n                      type: isConnection\n                        ? new GraphQLNonNull(ConnectionType)\n                        : new GraphQLNonNull(\n                            new GraphQLList(new GraphQLNonNull(TableType))\n                          ),\n                      args: {},\n                      resolve: (data, _args, resolveContext, resolveInfo) => {\n                        const safeAlias =\n                          getSafeAliasFromResolveInfo(resolveInfo);\n                        const liveCollection =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveCollection;\n                        const liveConditions =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveConditions;\n                        if (\n                          subscriptions &&\n                          liveCollection &&\n                          liveConditions &&\n                          data.__live\n                        ) {\n                          const { __id, ...rest } = data.__live;\n                          const condition = liveConditions[__id];\n                          const checker = condition(rest);\n\n                          liveCollection(\"pg\", table, checker);\n                        }\n                        if (isConnection) {\n                          return addStartEndCursor(data[safeAlias]);\n                        } else {\n                          const records = data[safeAlias];\n                          const liveRecord =\n                            resolveInfo.rootValue &&\n                            resolveInfo.rootValue.liveRecord;\n                          if (primaryKeys && subscriptions && liveRecord) {\n                            records.forEach(\n                              r =>\n                                r &&\n                                r.__identifiers &&\n                                liveRecord(\"pg\", table, r.__identifiers)\n                            );\n                          }\n                          return records;\n                        }\n                      },\n                      ...(isDeprecated\n                        ? {\n                            deprecationReason: singleRelationFieldName\n                              ? `Please use ${singleRelationFieldName} instead`\n                              : `Please use singular instead`, // This should never happen\n                          }\n                        : null),\n                    };\n                  },\n                  {\n                    isPgFieldConnection: isConnection,\n                    isPgFieldSimpleCollection: !isConnection,\n                    isPgBackwardRelationField: true,\n                    pgFieldIntrospection: table,\n                  }\n                ),\n              },\n\n              `Backward relation (${\n                isConnection ? \"connection\" : \"simple collection\"\n              }) for ${describePgEntity(\n                constraint\n              )}. To rename this relation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                constraint,\n                {\n                  [isConnection\n                    ? \"foreignFieldName\"\n                    : \"foreignSimpleFieldName\"]: \"newNameHere\",\n                }\n              )}`\n            );\n          }\n          if (\n            shouldAddManyRelation &&\n            !omit(table, \"many\") &&\n            !omit(constraint, \"many\")\n          ) {\n            const simpleCollections =\n              constraint.tags.simpleCollections ||\n              table.tags.simpleCollections ||\n              pgSimpleCollections;\n            const hasConnections = simpleCollections !== \"only\";\n            const hasSimpleCollections =\n              simpleCollections === \"only\" || simpleCollections === \"both\";\n            if (hasConnections) {\n              makeFields(true);\n            }\n            if (\n              hasSimpleCollections &&\n              !isUnique // if unique, use the singular instead\n            ) {\n              makeFields(false);\n            }\n          }\n          return memo;\n        }, {}),\n        `Adding backward relations for ${Self.name}`\n      );\n    },\n    [\"PgBackwardRelation\"]\n  );\n}: Plugin);\n"],"mappings":"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"}