{"version":3,"file":"PgConnectionArgFirstLastBeforeAfter.js","names":["base64Decode","str","Buffer","from","String","toString","PgConnectionArgs","builder","hook","args","build","context","extend","getTypeByName","graphql","GraphQLInt","scope","fieldName","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","source","addArgDataGenerator","Self","kind","Cursor","connectionFirstLastBeforeAfter","first","offset","last","after","before","pgQuery","queryBuilder","addCursorConstraint","Error","cursor","isAfter","cursorValues","JSON","parse","addCursorCondition","e","description","wrapDescription","type","name","exports","default"],"sources":["../../src/plugins/PgConnectionArgFirstLastBeforeAfter.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64Decode = str => Buffer.from(String(str), \"base64\").toString(\"utf8\");\n\nexport default (function PgConnectionArgs(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        graphql: { GraphQLInt },\n      } = build;\n      const {\n        scope: {\n          fieldName,\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: source,\n        },\n        addArgDataGenerator,\n        Self,\n      } = context;\n\n      if (\n        !(isPgFieldConnection || isPgFieldSimpleCollection) ||\n        !source ||\n        (source.kind !== \"class\" && source.kind !== \"procedure\")\n      ) {\n        return args;\n      }\n      const Cursor = getTypeByName(\"Cursor\");\n\n      addArgDataGenerator(function connectionFirstLastBeforeAfter({\n        first,\n        offset,\n        last,\n        after,\n        before,\n      }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (first != null) {\n              queryBuilder.first(first);\n            }\n            if (offset != null) {\n              queryBuilder.offset(offset);\n            }\n            if (isPgFieldConnection) {\n              if (after != null) {\n                addCursorConstraint(after, true);\n              }\n              if (before != null) {\n                addCursorConstraint(before, false);\n              }\n              if (last != null) {\n                if (first != null) {\n                  throw new Error(\n                    \"We don't support setting both first and last\"\n                  );\n                }\n                if (offset != null) {\n                  throw new Error(\n                    \"We don't support setting both offset and last\"\n                  );\n                }\n                queryBuilder.last(last);\n              }\n            }\n\n            function addCursorConstraint(cursor, isAfter) {\n              try {\n                const cursorValues = JSON.parse(base64Decode(cursor));\n                return queryBuilder.addCursorCondition(cursorValues, isAfter);\n              } catch (e) {\n                throw new Error(\n                  \"Invalid cursor, please enter a cursor from a previous request, or null.\"\n                );\n              }\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          first: {\n            description: build.wrapDescription(\n              \"Only read the first `n` values of the set.\",\n              \"arg\"\n            ),\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                last: {\n                  description: build.wrapDescription(\n                    \"Only read the last `n` values of the set.\",\n                    \"arg\"\n                  ),\n                  type: GraphQLInt,\n                },\n              }\n            : null),\n          offset: {\n            description: build.wrapDescription(\n              isPgFieldConnection\n                ? \"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.\"\n                : \"Skip the first `n` values.\",\n              \"arg\"\n            ),\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                before: {\n                  description: build.wrapDescription(\n                    \"Read all values in the set before (above) this cursor.\",\n                    \"arg\"\n                  ),\n                  type: Cursor,\n                },\n                after: {\n                  description: build.wrapDescription(\n                    \"Read all values in the set after (below) this cursor.\",\n                    \"arg\"\n                  ),\n                  type: Cursor,\n                },\n              }\n            : null),\n        },\n        isPgFieldConnection\n          ? `Adding connection pagination args to field '${fieldName}' of '${Self.name}'`\n          : `Adding simple collection args to field '${fieldName}' of '${Self.name}'`\n      );\n    },\n    [\"PgConnectionArgFirstLastBeforeAfter\"]\n  );\n}: Plugin);\n"],"mappings":"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"}