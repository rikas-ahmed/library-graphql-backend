{"version":3,"file":"PgConnectionTotalCount.js","names":["PgConnectionTotalCount","builder","hook","fields","build","context","extend","inflection","graphql","GraphQLInt","GraphQLNonNull","pgSql","sql","scope","isPgRowConnectionType","pgIntrospection","table","nodeType","fieldWithHooks","Self","nodeTypeName","name","kind","tableType","totalCount","addDataGenerator","pgAggregateQuery","aggregateQueryBuilder","select","fragment","description","wrapDescription","type","resolve","parent","aggregates","isPgConnectionTotalCountField","exports","default"],"sources":["../../src/plugins/PgConnectionTotalCount.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionTotalCount(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        inflection,\n        graphql: { GraphQLInt, GraphQLNonNull },\n        pgSql: sql,\n      } = build;\n      const {\n        scope: { isPgRowConnectionType, pgIntrospection: table, nodeType },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      if (!isPgRowConnectionType) {\n        return fields;\n      }\n\n      const nodeTypeName =\n        nodeType && nodeType.name\n          ? nodeType.name\n          : table && table.kind === \"class\"\n          ? inflection.tableType(table)\n          : null;\n      if (!nodeTypeName) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        {\n          totalCount: fieldWithHooks(\n            \"totalCount\",\n            ({ addDataGenerator }) => {\n              addDataGenerator(() => {\n                return {\n                  pgAggregateQuery: aggregateQueryBuilder => {\n                    aggregateQueryBuilder.select(\n                      sql.fragment`count(1)`,\n                      \"totalCount\"\n                    );\n                  },\n                };\n              });\n              return {\n                description: build.wrapDescription(\n                  `The count of *all* \\`${nodeTypeName}\\` you could get from the connection.`,\n                  \"field\"\n                ),\n                type: new GraphQLNonNull(GraphQLInt),\n                resolve(parent) {\n                  return (\n                    (parent.aggregates && parent.aggregates.totalCount) || 0\n                  );\n                },\n              };\n            },\n            {\n              isPgConnectionTotalCountField: true,\n            }\n          ),\n        },\n        `Adding totalCount to connection '${Self.name}'`\n      );\n    },\n    [\"PgConnectionTotalCount\"]\n  );\n}: Plugin);\n"],"mappings":";;;;;;IAGyBA,sBAAsB,GAA/B,SAASA,sBAAsBA,CAACC,OAAO,EAAE;EACvDA,OAAO,CAACC,IAAI,CACV,0BAA0B,EAC1B,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,KAAK;IAC1B,MAAM;MACJC,MAAM;MACNC,UAAU;MACVC,OAAO,EAAE;QAAEC,UAAU;QAAEC;MAAe,CAAC;MACvCC,KAAK,EAAEC;IACT,CAAC,GAAGR,KAAK;IACT,MAAM;MACJS,KAAK,EAAE;QAAEC,qBAAqB;QAAEC,eAAe,EAAEC,KAAK;QAAEC;MAAS,CAAC;MAClEC,cAAc;MACdC;IACF,CAAC,GAAGd,OAAO;IAEX,IAAI,CAACS,qBAAqB,EAAE;MAC1B,OAAOX,MAAM;IACf;IAEA,MAAMiB,YAAY,GAChBH,QAAQ,IAAIA,QAAQ,CAACI,IAAI,GACrBJ,QAAQ,CAACI,IAAI,GACbL,KAAK,IAAIA,KAAK,CAACM,IAAI,KAAK,OAAO,GAC/Bf,UAAU,CAACgB,SAAS,CAACP,KAAK,CAAC,GAC3B,IAAI;IACV,IAAI,CAACI,YAAY,EAAE;MACjB,OAAOjB,MAAM;IACf;IAEA,OAAOG,MAAM,CACXH,MAAM,EACN;MACEqB,UAAU,EAAEN,cAAc,CACxB,YAAY,EACZ,CAAC;QAAEO;MAAiB,CAAC,KAAK;QACxBA,gBAAgB,CAAC,MAAM;UACrB,OAAO;YACLC,gBAAgB,EAAEC,qBAAqB,IAAI;cACzCA,qBAAqB,CAACC,MAAM,CAC1BhB,GAAG,CAACiB,QAAS,UAAS,EACtB,YACF,CAAC;YACH;UACF,CAAC;QACH,CAAC,CAAC;QACF,OAAO;UACLC,WAAW,EAAE1B,KAAK,CAAC2B,eAAe,CAC/B,wBAAuBX,YAAa,uCAAsC,EAC3E,OACF,CAAC;UACDY,IAAI,EAAE,IAAItB,cAAc,CAACD,UAAU,CAAC;UACpCwB,OAAOA,CAACC,MAAM,EAAE;YACd,OACGA,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAACX,UAAU,IAAK,CAAC;UAE5D;QACF,CAAC;MACH,CAAC,EACD;QACEY,6BAA6B,EAAE;MACjC,CACF;IACF,CAAC,EACA,oCAAmCjB,IAAI,CAACE,IAAK,GAChD,CAAC;EACH,CAAC,EACD,CAAC,wBAAwB,CAC3B,CAAC;AACH,CAAC;AAAAgB,OAAA,CAAAC,OAAA,GAAAtC,sBAAA"}