{"version":3,"file":"PgConnectionArgCondition.js","names":["PgConnectionArgCondition","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlInputTypeByTypeIdAndModifier","graphql","GraphQLInputObjectType","GraphQLString","pgColumnFilter","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","class","forEach","table","isSelectable","namespace","tableTypeName","tableType","description","wrapDescription","name","conditionType","fields","context","fieldWithHooks","attributes","reduce","memo","attr","fieldName","column","extend","type","typeId","typeModifier","isPgConnectionConditionInputField","__origin","pgIntrospection","isPgCondition","args","pgSql","sql","gql2pg","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","pgFieldIntrospectionTable","addArgDataGenerator","Self","shouldAddCondition","proc","kind","tags","filterable","TableType","id","TableConditionType","relevantAttributes","filter","connectionCondition","condition","pgQuery","queryBuilder","val","addLiveCondition","record","where","fragment","getTableAlias","identifier","exports","default"],"sources":["../../src/plugins/PgConnectionArgCondition.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgCondition(builder) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        graphql: { GraphQLInputObjectType, GraphQLString },\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n      } = build;\n      introspectionResultsByKind.class.forEach(table => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!table.isSelectable || omit(table, \"filter\")) return;\n        if (!table.namespace) return;\n\n        const tableTypeName = inflection.tableType(table);\n        /* const TableConditionType = */\n        newWithHooks(\n          GraphQLInputObjectType,\n          {\n            description: build.wrapDescription(\n              `A condition to be used against \\`${tableTypeName}\\` object types. All fields are tested for equality and combined with a logical ‘and.’`,\n              \"type\"\n            ),\n            name: inflection.conditionType(inflection.tableType(table)),\n            fields: context => {\n              const { fieldWithHooks } = context;\n              return table.attributes.reduce((memo, attr) => {\n                // PERFORMANCE: These used to be .filter(...) calls\n                if (!pgColumnFilter(attr, build, context)) return memo;\n                if (omit(attr, \"filter\")) return memo;\n\n                const fieldName = inflection.column(attr);\n                memo = build.extend(\n                  memo,\n                  {\n                    [fieldName]: fieldWithHooks(\n                      fieldName,\n                      {\n                        description: build.wrapDescription(\n                          `Checks for equality with the object’s \\`${fieldName}\\` field.`,\n                          \"field\"\n                        ),\n                        type:\n                          pgGetGqlInputTypeByTypeIdAndModifier(\n                            attr.typeId,\n                            attr.typeModifier\n                          ) || GraphQLString,\n                      },\n                      {\n                        isPgConnectionConditionInputField: true,\n                      }\n                    ),\n                  },\n                  `Adding condition argument for ${describePgEntity(attr)}`\n                );\n                return memo;\n              }, {});\n            },\n          },\n          {\n            __origin: `Adding condition type for ${describePgEntity(\n              table\n            )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            pgIntrospection: table,\n            isPgCondition: true,\n          },\n          true // Conditions might all be filtered\n        );\n      });\n      return _;\n    },\n    [\"PgConnectionArgCondition\"],\n    [],\n    [\"PgTypes\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        pgSql: sql,\n        gql2pg,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n      } = build;\n      const {\n        scope: {\n          fieldName,\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection,\n          pgFieldIntrospectionTable,\n        },\n        addArgDataGenerator,\n        Self,\n      } = context;\n\n      const shouldAddCondition =\n        isPgFieldConnection || isPgFieldSimpleCollection;\n      if (!shouldAddCondition) return args;\n\n      const proc =\n        pgFieldIntrospection.kind === \"procedure\" ? pgFieldIntrospection : null;\n      const table =\n        pgFieldIntrospection.kind === \"class\"\n          ? pgFieldIntrospection\n          : proc\n          ? pgFieldIntrospectionTable\n          : null;\n      if (\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        omit(table, \"filter\")\n      ) {\n        return args;\n      }\n      if (proc) {\n        if (!proc.tags.filterable) {\n          return args;\n        }\n      }\n\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const TableConditionType = getTypeByName(\n        inflection.conditionType(TableType.name)\n      );\n      if (!TableConditionType) {\n        return args;\n      }\n\n      const relevantAttributes = table.attributes.filter(\n        attr => pgColumnFilter(attr, build, context) && !omit(attr, \"filter\")\n      );\n\n      addArgDataGenerator(function connectionCondition({ condition }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (condition != null) {\n              relevantAttributes.forEach(attr => {\n                const fieldName = inflection.column(attr);\n                const val = condition[fieldName];\n                if (val != null) {\n                  queryBuilder.addLiveCondition(\n                    () => record => record[attr.name] === val\n                  );\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} = ${gql2pg(val, attr.type, attr.typeModifier)}`\n                  );\n                } else if (val === null) {\n                  queryBuilder.addLiveCondition(\n                    () => record => record[attr.name] == null\n                  );\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} IS NULL`\n                  );\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          condition: {\n            description: build.wrapDescription(\n              \"A condition to be used in determining which values should be returned by the collection.\",\n              \"arg\"\n            ),\n            type: TableConditionType,\n          },\n        },\n        `Adding condition to connection field '${fieldName}' of '${Self.name}'`\n      );\n    },\n    [\"PgConnectionArgCondition\"]\n  );\n}: Plugin);\n"],"mappings":"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"}