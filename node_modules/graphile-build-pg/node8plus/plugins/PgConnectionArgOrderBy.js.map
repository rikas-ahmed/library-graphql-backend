{"version":3,"file":"PgConnectionArgOrderBy.js","names":["_isString","_interopRequireDefault","require","obj","__esModule","default","PgConnectionArgOrderBy","builder","orderByNullsLast","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","graphql","GraphQLEnumType","inflection","pgOmit","omit","sqlCommentByAddingTags","describePgEntity","class","forEach","table","isSelectable","namespace","tableTypeName","tableType","name","orderByType","description","wrapDescription","values","builtin","value","alias","specs","__origin","pgIntrospection","isPgRowSortEnum","args","context","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","GraphQLList","GraphQLNonNull","scope","fieldName","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","pgFieldIntrospectionTable","addArgDataGenerator","Self","proc","kind","tags","sortable","TableType","type","id","TableOrderByType","cursorPrefixFromOrderBy","orderBy","cursorPrefixes","itemIndex","itemCount","length","item","push","literal","connectionOrderBy","rawOrderBy","Array","isArray","pgCursorPrefix","pgQuery","queryBuilder","unique","orders","col","ascending","specNullsFirst","expr","isString","fragment","getTableAlias","identifier","nullsFirst","undefined","setOrderIsUnique","exports"],"sources":["../../src/plugins/PgConnectionArgOrderBy.js"],"sourcesContent":["// @flow\nimport isString from \"lodash/isString\";\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgOrderBy(builder, { orderByNullsLast }) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        graphql: { GraphQLEnumType },\n        inflection,\n        pgOmit: omit,\n        sqlCommentByAddingTags,\n        describePgEntity,\n      } = build;\n      introspectionResultsByKind.class.forEach(table => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!table.isSelectable || omit(table, \"order\")) return;\n        if (!table.namespace) return;\n\n        const tableTypeName = inflection.tableType(table);\n        /* const TableOrderByType = */\n        newWithHooks(\n          GraphQLEnumType,\n          {\n            name: inflection.orderByType(tableTypeName),\n            description: build.wrapDescription(\n              `Methods to use when ordering \\`${tableTypeName}\\`.`,\n              \"type\"\n            ),\n            values: {\n              [inflection.builtin(\"NATURAL\")]: {\n                value: {\n                  alias: null,\n                  specs: [],\n                },\n              },\n            },\n          },\n          {\n            __origin: `Adding connection \"orderBy\" argument for ${describePgEntity(\n              table\n            )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            pgIntrospection: table,\n            isPgRowSortEnum: true,\n          }\n        );\n      });\n      return _;\n    },\n    [\"PgConnectionArgOrderBy\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n        inflection,\n        pgOmit: omit,\n      } = build;\n      const {\n        scope: {\n          fieldName,\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection,\n          pgFieldIntrospectionTable,\n        },\n        addArgDataGenerator,\n        Self,\n      } = context;\n\n      if (!isPgFieldConnection && !isPgFieldSimpleCollection) {\n        return args;\n      }\n\n      const proc =\n        pgFieldIntrospection.kind === \"procedure\" ? pgFieldIntrospection : null;\n      const table =\n        pgFieldIntrospection.kind === \"class\"\n          ? pgFieldIntrospection\n          : proc\n          ? pgFieldIntrospectionTable\n          : null;\n      if (\n        !table ||\n        !table.namespace ||\n        !table.isSelectable ||\n        omit(table, \"order\")\n      ) {\n        return args;\n      }\n      if (proc) {\n        if (!proc.tags.sortable) {\n          return args;\n        }\n      }\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n      const cursorPrefixFromOrderBy = orderBy => {\n        if (orderBy) {\n          const cursorPrefixes = [];\n          for (\n            let itemIndex = 0, itemCount = orderBy.length;\n            itemIndex < itemCount;\n            itemIndex++\n          ) {\n            const item = orderBy[itemIndex];\n            if (item.alias) {\n              cursorPrefixes.push(sql.literal(item.alias));\n            }\n          }\n          if (cursorPrefixes.length > 0) {\n            return cursorPrefixes;\n          }\n        }\n        return null;\n      };\n\n      addArgDataGenerator(function connectionOrderBy({ orderBy: rawOrderBy }) {\n        const orderBy = rawOrderBy\n          ? Array.isArray(rawOrderBy)\n            ? rawOrderBy\n            : [rawOrderBy]\n          : null;\n        return {\n          pgCursorPrefix: cursorPrefixFromOrderBy(orderBy),\n          pgQuery: queryBuilder => {\n            if (orderBy != null) {\n              orderBy.forEach(item => {\n                const { specs, unique } = item;\n                const orders =\n                  Array.isArray(specs[0]) || specs.length === 0\n                    ? specs\n                    : [specs];\n                orders.forEach(([col, ascending, specNullsFirst]) => {\n                  const expr = isString(col)\n                    ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                        col\n                      )}`\n                    : col;\n                  // If the enum specifies null ordering, use that\n                  // Otherwise, use the orderByNullsLast option if present\n                  const nullsFirst =\n                    specNullsFirst != null\n                      ? specNullsFirst\n                      : orderByNullsLast != null\n                      ? !orderByNullsLast\n                      : undefined;\n                  queryBuilder.orderBy(expr, ascending, nullsFirst);\n                });\n                if (unique) {\n                  queryBuilder.setOrderIsUnique();\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          orderBy: {\n            description: build.wrapDescription(\n              `The method to use when ordering \\`${tableTypeName}\\`.`,\n              \"arg\"\n            ),\n            type: new GraphQLList(new GraphQLNonNull(TableOrderByType)),\n          },\n        },\n        `Adding 'orderBy' argument to field '${fieldName}' of '${Self.name}'`\n      );\n    },\n    [\"PgConnectionArgOrderBy\"]\n  );\n}: Plugin);\n"],"mappings":"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"}