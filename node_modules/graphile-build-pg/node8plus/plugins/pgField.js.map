{"version":3,"file":"pgField.js","names":["pgField","build","fieldWithHooks","fieldName","fieldSpecGenerator","fieldScope","whereFrom","options","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","getSafeAliasFromAlias","getSafeAliasFromResolveInfo","pgTweakFragmentForTypeAndModifier","fieldContext","fieldSpec","type","FieldType","nullableType","graphql","getNullableType","namedType","getNamedType","isListType","constructor","GraphQLList","isLeafType","pgType","Error","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","resolveData","hoistCursor","usesCursor","length","pgQuery","queryBuilder","select","tableAlias","getTableAlias","identifier","Symbol","query","pgTypeModifier","onlyJsonField","asJson","innerQueryBuilder","parentQueryBuilder","withQueryBuilder","context","rootValue","fragment","resolve","data","_args","_context","resolveInfo","map","d"],"sources":["../../src/plugins/pgField.js"],"sourcesContent":["export default function pgField(\n  build,\n  fieldWithHooks,\n  fieldName,\n  fieldSpecGenerator,\n  fieldScope = {},\n  whereFrom = false,\n  options = {}\n) {\n  const {\n    pgSql: sql,\n    pgQueryFromResolveData: queryFromResolveData,\n    getSafeAliasFromAlias,\n    getSafeAliasFromResolveInfo,\n    pgTweakFragmentForTypeAndModifier,\n  } = build;\n  return fieldWithHooks(\n    fieldName,\n    fieldContext => {\n      const fieldSpec =\n        typeof fieldSpecGenerator === \"function\"\n          ? fieldSpecGenerator(fieldContext)\n          : fieldSpecGenerator;\n      const { type: FieldType } = fieldSpec;\n      const nullableType = build.graphql.getNullableType(FieldType);\n      const namedType = build.graphql.getNamedType(FieldType);\n      const isListType =\n        nullableType !== namedType &&\n        nullableType.constructor === build.graphql.GraphQLList;\n      const isLeafType = build.graphql.isLeafType(FieldType);\n      if (isLeafType && !options.pgType) {\n        // eslint-disable-next-line no-console\n        throw new Error(\n          \"pgField call omits options.pgType for a leaf type; certain tweaks may not be applied!\"\n        );\n      }\n      const { getDataFromParsedResolveInfoFragment, addDataGenerator } =\n        fieldContext;\n      addDataGenerator(parsedResolveInfoFragment => {\n        const safeAlias = getSafeAliasFromAlias(\n          parsedResolveInfoFragment.alias\n        );\n        const resolveData = getDataFromParsedResolveInfoFragment(\n          parsedResolveInfoFragment,\n          FieldType\n        );\n        return {\n          ...(options.hoistCursor &&\n          resolveData.usesCursor &&\n          resolveData.usesCursor.length\n            ? { usesCursor: [true] }\n            : null),\n          pgQuery: queryBuilder => {\n            queryBuilder.select(() => {\n              const tableAlias =\n                whereFrom === false\n                  ? queryBuilder.getTableAlias()\n                  : sql.identifier(Symbol());\n              const query = queryFromResolveData(\n                whereFrom ? whereFrom(queryBuilder) : sql.identifier(Symbol()),\n                isLeafType && options.pgType\n                  ? pgTweakFragmentForTypeAndModifier(\n                      tableAlias,\n                      options.pgType,\n                      options.pgTypeModifier,\n                      {}\n                    )\n                  : tableAlias,\n                resolveData,\n                whereFrom === false\n                  ? { onlyJsonField: true }\n                  : { asJson: true },\n                innerQueryBuilder => {\n                  innerQueryBuilder.parentQueryBuilder = queryBuilder;\n                  if (typeof options.withQueryBuilder === \"function\") {\n                    options.withQueryBuilder(innerQueryBuilder, {\n                      parsedResolveInfoFragment,\n                    });\n                  }\n                },\n                queryBuilder.context,\n                queryBuilder.rootValue\n              );\n              return sql.fragment`(${query})`;\n            }, safeAlias);\n          },\n        };\n      });\n\n      return {\n        resolve(data, _args, _context, resolveInfo) {\n          const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n          if (data.data == null) return null;\n          if (isListType) {\n            return data.data.map(d => (d != null ? d[safeAlias] : null));\n          } else {\n            return data.data[safeAlias];\n          }\n        },\n        ...fieldSpec,\n      };\n    },\n    fieldScope\n  );\n}\n"],"mappings":"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"}