{"version":3,"file":"PgRowNode.js","names":["_debugSql","_interopRequireDefault","require","obj","__esModule","default","PgRowNode","builder","subscriptions","hook","object","build","context","addNodeFetcherForTypeName","pgSql","sql","gql2pg","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgPrepareAndRun","scope","isPgRowType","pgIntrospection","table","namespace","sqlFullTableName","identifier","name","primaryKeyConstraint","primaryKeys","keyAttributes","data","identifiers","resolveContext","parsedResolveInfoFragment","ReturnType","resolveData","resolveInfo","pgClient","liveRecord","rootValue","length","Error","query","undefined","useAsterisk","queryBuilder","selectIdentifiers","forEach","key","idx","where","fragment","getTableAlias","type","typeModifier","text","values","compile","debugSql","enabled","rows","row","__identifiers","fields","nodeIdFieldName","getTypeAndIdentifiersFromNodeId","extend","parseResolveInfo","pgGetGqlTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","graphql","GraphQLNonNull","GraphQLID","inflection","describePgEntity","sqlCommentByAddingTags","isRootQuery","fieldWithHooks","class","reduce","memo","TableType","id","fieldName","tableNode","getDataFromParsedResolveInfoFragment","description","wrapDescription","args","resolve","parent","nodeId","Type","e","isPgNodeQuery","pgFieldIntrospection","exports"],"sources":["../../src/plugins/PgRowNode.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugSql from \"./debugSql\";\n\nexport default (async function PgRowNode(builder, { subscriptions }) {\n  builder.hook(\n    \"GraphQLObjectType\",\n    (object, build, context) => {\n      const {\n        addNodeFetcherForTypeName,\n        pgSql: sql,\n        gql2pg,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        pgPrepareAndRun,\n      } = build;\n      const {\n        scope: { isPgRowType, pgIntrospection: table },\n      } = context;\n\n      if (!addNodeFetcherForTypeName) {\n        // Node plugin must be disabled.\n        return object;\n      }\n      if (!isPgRowType || !table.namespace || omit(table, \"read\")) {\n        return object;\n      }\n      const sqlFullTableName = sql.identifier(table.namespace.name, table.name);\n      const primaryKeyConstraint = table.primaryKeyConstraint;\n      if (!primaryKeyConstraint) {\n        return object;\n      }\n      const primaryKeys =\n        primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n\n      addNodeFetcherForTypeName(\n        object.name,\n        async (\n          data,\n          identifiers,\n          resolveContext,\n          parsedResolveInfoFragment,\n          ReturnType,\n          resolveData,\n          resolveInfo\n        ) => {\n          const { pgClient } = resolveContext;\n          const liveRecord =\n            resolveInfo &&\n            resolveInfo.rootValue &&\n            resolveInfo.rootValue.liveRecord;\n          if (identifiers.length !== primaryKeys.length) {\n            throw new Error(\"Invalid ID\");\n          }\n          const query = queryFromResolveData(\n            sqlFullTableName,\n            undefined,\n            resolveData,\n            {\n              useAsterisk: false, // Because it's only a single relation, no need\n            },\n            queryBuilder => {\n              if (subscriptions && table.primaryKeyConstraint) {\n                queryBuilder.selectIdentifiers(table);\n              }\n              primaryKeys.forEach((key, idx) => {\n                queryBuilder.where(\n                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                    key.name\n                  )} = ${gql2pg(\n                    identifiers[idx],\n                    primaryKeys[idx].type,\n                    primaryKeys[idx].typeModifier\n                  )}`\n                );\n              });\n            },\n            resolveContext,\n            resolveInfo && resolveInfo.rootValue\n          );\n          const { text, values } = sql.compile(query);\n          if (debugSql.enabled) debugSql(text);\n          const {\n            rows: [row],\n          } = await pgPrepareAndRun(pgClient, text, values);\n          if (subscriptions && liveRecord && row) {\n            liveRecord(\"pg\", table, row.__identifiers);\n          }\n          return row;\n        }\n      );\n      return object;\n    },\n    [\"PgRowNode\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        nodeIdFieldName,\n        getTypeAndIdentifiersFromNodeId,\n        extend,\n        parseResolveInfo,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        gql2pg,\n        graphql: { GraphQLNonNull, GraphQLID },\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgPrepareAndRun,\n      } = build;\n      const {\n        scope: { isRootQuery },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootQuery || !nodeIdFieldName) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        introspectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.namespace) return memo;\n          if (omit(table, \"read\")) return memo;\n\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          const sqlFullTableName = sql.identifier(\n            table.namespace.name,\n            table.name\n          );\n          if (TableType) {\n            const primaryKeyConstraint = table.primaryKeyConstraint;\n            if (!primaryKeyConstraint) {\n              return memo;\n            }\n            const primaryKeys =\n              primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n            const fieldName = inflection.tableNode(table);\n            memo = extend(\n              memo,\n              {\n                [fieldName]: fieldWithHooks(\n                  fieldName,\n                  ({ getDataFromParsedResolveInfoFragment }) => {\n                    return {\n                      description: build.wrapDescription(\n                        `Reads a single \\`${TableType.name}\\` using its globally unique \\`ID\\`.`,\n                        \"field\"\n                      ),\n                      type: TableType,\n                      args: {\n                        [nodeIdFieldName]: {\n                          description: build.wrapDescription(\n                            `The globally unique \\`ID\\` to be used in selecting a single \\`${TableType.name}\\`.`,\n                            \"arg\"\n                          ),\n                          type: new GraphQLNonNull(GraphQLID),\n                        },\n                      },\n                      async resolve(parent, args, resolveContext, resolveInfo) {\n                        const { pgClient } = resolveContext;\n                        const liveRecord =\n                          resolveInfo.rootValue &&\n                          resolveInfo.rootValue.liveRecord;\n                        const nodeId = args[nodeIdFieldName];\n                        try {\n                          const { Type, identifiers } =\n                            getTypeAndIdentifiersFromNodeId(nodeId);\n                          if (Type !== TableType) {\n                            throw new Error(\"Mismatched type\");\n                          }\n                          if (identifiers.length !== primaryKeys.length) {\n                            throw new Error(\"Invalid ID\");\n                          }\n\n                          const parsedResolveInfoFragment =\n                            parseResolveInfo(resolveInfo);\n                          parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                          const resolveData =\n                            getDataFromParsedResolveInfoFragment(\n                              parsedResolveInfoFragment,\n                              TableType\n                            );\n                          const query = queryFromResolveData(\n                            sqlFullTableName,\n                            undefined,\n                            resolveData,\n                            {\n                              useAsterisk: false, // Because it's only a single relation, no need\n                            },\n                            queryBuilder => {\n                              if (subscriptions && table.primaryKeyConstraint) {\n                                queryBuilder.selectIdentifiers(table);\n                              }\n                              primaryKeys.forEach((key, idx) => {\n                                queryBuilder.where(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )} = ${gql2pg(\n                                    identifiers[idx],\n                                    primaryKeys[idx].type,\n                                    primaryKeys[idx].typeModifier\n                                  )}`\n                                );\n                              });\n                            },\n                            resolveContext,\n                            resolveInfo.rootValue\n                          );\n                          const { text, values } = sql.compile(query);\n                          if (debugSql.enabled) debugSql(text);\n                          const {\n                            rows: [row],\n                          } = await pgPrepareAndRun(pgClient, text, values);\n                          if (liveRecord && row) {\n                            liveRecord(\"pg\", table, row.__identifiers);\n                          }\n                          return row;\n                        } catch (e) {\n                          return null;\n                        }\n                      },\n                    };\n                  },\n                  {\n                    isPgNodeQuery: true,\n                    pgFieldIntrospection: table,\n                  }\n                ),\n              },\n              `Adding row by globally unique identifier field for ${describePgEntity(\n                table\n              )}. You can rename this table via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                { name: \"newNameHere\" }\n              )}`\n            );\n          }\n          return memo;\n        }, {}),\n        `Adding \"row by node ID\" fields to root Query type`\n      );\n    },\n    [\"PgRowNode\"]\n  );\n}: Plugin);\n"],"mappings":"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"}