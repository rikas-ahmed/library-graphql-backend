{"version":3,"file":"PgIntrospectionPlugin.js","names":["_withPgClient","_interopRequireWildcard","require","_utils","_fs","_debug","_interopRequireDefault","_chalk","_throttle","_flatMap","_introspectionQuery","pgSql","_package","_queryFromResolveDataFactory","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","debug","debugFactory","WATCH_FIXTURES_PATH","__dirname","fakeEnumIdentifier","namespaceName","name","identifierExtra","list","baseEnumIdentifier","readFile","filename","encoding","Promise","resolve","reject","rawReadFile","err","res","removeQuotes","str","trimmed","trim","length","Error","slice","toLowerCase","parseSqlColumnArray","parts","split","map","parseSqlColumnString","parseConstraintSpec","rawSpec","spec","tagComponents","parsed","parseTags","join","tags","description","text","smartCommentConstraints","introspectionResults","attributesByNames","tbl","cols","debugStr","attributes","attribute","filter","a","classId","id","sort","b","num","pk","constraint","find","c","type","keyAttributeNums","n","colName","attr","class","forEach","klass","namespace","namespaceId","addKey","isPrimary","tag","keySpec","columns","notNull","fakeConstraint","kind","isFake","isIndexed","Math","random","foreignClassId","comment","foreignKeyAttributeNums","push","primaryKey","unique","Array","isArray","getType","t","typeId","foreignKey","foreignKeys","fkSpecRaw","index","fkSpec","matches","match","rawColumns","rawSchemaOrTable","rawTableOnly","rawForeignColumns","rawSchema","rawTable","foreignSchema","foreignTable","foreignColumns","foreignKlass","k","foreignNamespace","isEnumConstraint","con","isEnumTable","isPrimaryKey","isUniqueConstraint","isExplicitEnumConstraint","enum","isPrimaryKeyOfEnumTableConstraint","hasExactlyOneColumn","enumTables","omit","isSelectable","isInsertable","isUpdatable","isDeletable","enumConstraints","enumTableColumns","descriptionColumn","enumDescription","allData","_internalEnumData","col","data","row","constraintIdent","enumTypeArray","category","domainIsNotNull","arrayItemTypeId","typeLength","isPgArray","domainBaseTypeId","domainTypeModifier","domainHasDefault","enumVariants","enumDescriptions","rangeSubTypeId","enumType","r","typeById","fkattr","deepClone","value","val","keys","reduce","memo","PgIntrospectionPlugin","builder","pgConfig","pgSchemas","schemas","pgEnableTags","persistentMemoizeWithKey","fn","pgThrowOnMissingSchema","pgIncludeExtensionResources","pgLegacyFunctionsOnly","pgIgnoreRBAC","pgSkipInstallingWatchFixtures","pgOwnerConnectionString","pgUsePartitionedParent","introspect","cacheKey","version","introspectionResultsByKind","withPgClient","pgClient","versionResult","query","serverVersionNum","parseInt","rows","server_version_num","introspectionQuery","makeIntrospectionQuery","result","__pgVersion","procedure","extension","object","extensionConfigurationClassIds","flatMap","e","configurationClassIds","isExtensionConfigurationTable","indexOf","VARCHAR_ID","TEXT_ID","CHAR_ID","BPCHAR_ID","VALID_TYPE_IDS","all","includes","hasEnumConstraints","some","z","compile","fragment","identifier","role","user","message","freeze","knownSchemas","missingSchemas","s","errorMessage","console","warn","introspectionResultsFromRaw","rawResults","pgAugmentIntrospectionResults","xByY","arrayOfX","attrKey","x","xByYAndZ","attrKey2","namespaceById","classById","attributeByClassIdAndNum","extensionById","relate","array","newAttr","lookupAttr","lookup","missingOk","entry","innerKey","JSON","stringify","_","augment","arrayItemType","arrayType","canUseAsterisk","columnLevelSelectGrant","constraints","foreignConstraints","primaryKeyConstraint","keyAttributes","nr","foreignClass","foreignKeyAttributes","attributeNums","isUnique","every","idx","rawIntrospectionResultsByKind","listener","Listener","constructor","triggerRebuild","stopped","_handleChange","throttle","error","leading","trailing","_listener","bind","_handleClientError","_start","isReconnect","releasePgClient","getPgClientAndReleaserFromConfig","client","_reallyReleaseClient","on","_releaseClient","watchSqlInner","sql","_haveDisplayedError","chalk","bold","yellow","_reconnect","setTimeout","notification","channel","payload","parse","commands","schema","command","affectsOurSchemas","schemaName","stop","cancel","clientIsStillViable","reallyReleaseClient","catch","removeListener","registerWatcher","l","hook","build","pgQueryFromResolveData","queryFromResolveDataFactory","supportsJSONB","extend","pgIntrospectionResultsByKind","getPgFakeEnumIdentifier","exports","PgEntityKind","NAMESPACE","PROCEDURE","CLASS","TYPE","ATTRIBUTE","CONSTRAINT","EXTENSION","INDEX"],"sources":["../../src/plugins/PgIntrospectionPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport type { Client } from \"pg\";\nimport withPgClient, {\n  getPgClientAndReleaserFromConfig,\n} from \"../withPgClient\";\nimport { parseTags } from \"../utils\";\nimport { readFile as rawReadFile } from \"fs\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport throttle from \"lodash/throttle\";\nimport flatMap from \"lodash/flatMap\";\nimport { makeIntrospectionQuery } from \"./introspectionQuery\";\nimport * as pgSql from \"pg-sql2\";\n\nimport { version } from \"../../package.json\";\nimport queryFromResolveDataFactory from \"../queryFromResolveDataFactory\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;\n\n// Ref: https://github.com/graphile/postgraphile/tree/master/src/postgres/introspection/object\n\nexport type PgNamespace = {\n  kind: \"namespace\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgProc = {\n  kind: \"procedure\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  namespaceId: string,\n  namespaceName: string,\n  isStrict: boolean,\n  returnsSet: boolean,\n  isStable: boolean,\n  returnTypeId: string,\n  argTypeIds: Array<string>,\n  argNames: Array<string>,\n  argModes: Array<\"i\" | \"o\" | \"b\" | \"v\" | \"t\">,\n  inputArgsCount: number,\n  argDefaultsNum: number,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  cost: number,\n  aclExecutable: boolean,\n  language: string,\n};\n\nexport type PgClass = {\n  kind: \"class\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  classKind: string,\n  namespaceId: string,\n  namespaceName: string,\n  typeId: string,\n  isSelectable: boolean,\n  isInsertable: boolean,\n  isUpdatable: boolean,\n  isDeletable: boolean,\n  isExtensionConfigurationTable: boolean,\n  namespace: PgNamespace,\n  type: PgType,\n  tags: { [string]: string },\n  attributes: Array<PgAttribute>,\n  constraints: Array<PgConstraint>,\n  foreignConstraints: Array<PgConstraint>,\n  primaryKeyConstraint: ?PgConstraint,\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n  aclDeletable: boolean,\n  canUseAsterisk: boolean,\n\n  // eslint-disable-next-line flowtype/no-weak-types\n  _internalEnumData?: any[], // This is Graphile internal, do not use this.\n};\n\nexport type PgType = {\n  kind: \"type\",\n  id: string,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  namespaceId: string,\n  namespaceName: string,\n  type: string,\n  category: string,\n  domainIsNotNull: boolean,\n  arrayItemTypeId: ?string,\n  arrayItemType: ?PgType,\n  arrayType: ?PgType,\n  typeLength: ?number,\n  isPgArray: boolean,\n  classId: ?string,\n  class: ?PgClass,\n  domainBaseTypeId: ?string,\n  domainBaseType: ?PgType,\n  domainTypeModifier: ?number,\n  domainHasDefault: boolean,\n  enumVariants: ?(string[]),\n  enumDescriptions: ?(string[]),\n  rangeSubTypeId: ?string,\n  tags: { [string]: string },\n  isFake: ?boolean,\n};\n\nexport type PgAttribute = {\n  kind: \"attribute\",\n  classId: string,\n  num: number,\n  name: string,\n  comment: ?string,\n  description: ?string,\n  typeId: string,\n  typeModifier: number,\n  isNotNull: boolean,\n  hasDefault: boolean,\n  identity: \"\" | \"a\" | \"d\",\n  class: PgClass,\n  type: PgType,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n  isIndexed: ?boolean,\n  isUnique: ?boolean,\n  columnLevelSelectGrant: boolean,\n};\n\nexport type PgConstraint = {\n  kind: \"constraint\",\n  id: string,\n  name: string,\n  type: string,\n  classId: string,\n  class: PgClass,\n  foreignClassId: ?string,\n  foreignClass: ?PgClass,\n  comment: ?string,\n  description: ?string,\n  keyAttributeNums: Array<number>,\n  keyAttributes: Array<PgAttribute>,\n  foreignKeyAttributeNums: Array<number>,\n  foreignKeyAttributes: Array<PgAttribute>,\n  namespace: PgNamespace,\n  isIndexed: ?boolean,\n  tags: { [string]: string },\n};\n\nexport type PgExtension = {\n  kind: \"extension\",\n  id: string,\n  name: string,\n  namespaceId: string,\n  namespaceName: string,\n  relocatable: boolean,\n  version: string,\n  configurationClassIds?: Array<string>,\n  comment: ?string,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgIndex = {\n  kind: \"index\",\n  id: string,\n  name: string,\n  namespaceName: string,\n  classId: string,\n  numberOfAttributes: number,\n  indexType: string,\n  isUnique: boolean,\n  isPrimary: boolean,\n  /*\n  Though these exist, we don't want to officially\n  support them yet.\n\n  isImmediate: boolean,\n  isReplicaIdentity: boolean,\n  isValid: boolean,\n  */\n  isPartial: boolean,\n  attributeNums: Array<number>,\n  attributePropertiesAsc: ?Array<boolean>,\n  attributePropertiesNullsFirst: ?Array<boolean>,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgEntity =\n  | PgNamespace\n  | PgProc\n  | PgClass\n  | PgType\n  | PgAttribute\n  | PgConstraint\n  | PgExtension\n  | PgIndex;\n\nconst fakeEnumIdentifier = (\n  namespaceName: string,\n  name: string,\n  identifierExtra = \"\",\n  list = false\n) => {\n  const baseEnumIdentifier = `FAKE_ENUM_${namespaceName}_${name}${identifierExtra}`;\n  if (list) {\n    return `${baseEnumIdentifier}_list`;\n  } else {\n    return baseEnumIdentifier;\n  }\n};\n\nexport type PgIntrospectionResultsByKind = {\n  __pgVersion: number,\n  attribute: PgAttribute[],\n  attributeByClassIdAndNum: {\n    [classId: string]: { [num: string]: PgAttribute },\n  },\n  class: PgClass[],\n  classById: { [classId: string]: PgClass },\n  constraint: PgConstraint[],\n  extension: PgExtension[],\n  extensionById: { [extId: string]: PgExtension },\n  index: PgIndex[],\n  namespace: PgNamespace[],\n  namespaceById: { [namespaceId: string]: PgNamespace },\n  procedure: PgProc[],\n  type: PgType[],\n  typeById: { [typeId: string]: PgType },\n};\n\nfunction readFile(filename, encoding) {\n  return new Promise((resolve, reject) => {\n    rawReadFile(filename, encoding, (err, res) => {\n      if (err) reject(err);\n      else resolve(res);\n    });\n  });\n}\n\nconst removeQuotes = str => {\n  const trimmed = str.trim();\n  if (trimmed[0] === '\"') {\n    if (trimmed[trimmed.length - 1] !== '\"') {\n      throw new Error(\n        `We failed to parse a quoted identifier '${str}'. Please avoid putting quotes or commas in smart comment identifiers (or file a PR to fix the parser).`\n      );\n    }\n    return trimmed.slice(1, -1);\n  } else {\n    // PostgreSQL lower-cases unquoted columns, so we should too.\n    return trimmed.toLowerCase();\n  }\n};\n\nconst parseSqlColumnArray = str => {\n  if (!str) {\n    throw new Error(`Cannot parse '${str}'`);\n  }\n  const parts = str.split(\",\");\n  return parts.map(removeQuotes);\n};\n\nconst parseSqlColumnString = str => {\n  if (!str) {\n    throw new Error(`Cannot parse '${str}'`);\n  }\n  return removeQuotes(str);\n};\n\nfunction parseConstraintSpec(rawSpec) {\n  const [spec, ...tagComponents] = rawSpec.split(/\\|/);\n  const parsed = parseTags(tagComponents.join(\"\\n\"));\n  return {\n    spec,\n    tags: parsed.tags,\n    description: parsed.text,\n  };\n}\n\nfunction smartCommentConstraints(introspectionResults) {\n  const attributesByNames = (tbl, cols, debugStr) => {\n    const attributes = introspectionResults.attribute\n      .filter(a => a.classId === tbl.id)\n      .sort((a, b) => a.num - b.num);\n    if (!cols) {\n      const pk = introspectionResults.constraint.find(\n        c => c.classId == tbl.id && c.type === \"p\"\n      );\n      if (pk) {\n        return pk.keyAttributeNums.map(n => attributes.find(a => a.num === n));\n      } else {\n        throw new Error(\n          `No columns specified for '${tbl.namespaceName}.${tbl.name}' (oid: ${tbl.id}) and no PK found (${debugStr}).`\n        );\n      }\n    }\n    return cols.map(colName => {\n      const attr = attributes.find(a => a.name === colName);\n      if (!attr) {\n        throw new Error(\n          `Could not find attribute '${colName}' in '${tbl.namespaceName}.${tbl.name}'`\n        );\n      }\n      return attr;\n    });\n  };\n\n  // First: primary and unique keys\n  introspectionResults.class.forEach(klass => {\n    const namespace = introspectionResults.namespace.find(\n      n => n.id === klass.namespaceId\n    );\n    if (!namespace) {\n      return;\n    }\n    function addKey(key: string, isPrimary = false) {\n      const tag = isPrimary ? \"@primaryKey\" : \"@unique\";\n      if (typeof key !== \"string\") {\n        if (isPrimary) {\n          throw new Error(\n            `${tag} configuration of '${klass.namespaceName}.${klass.name}' is invalid; please specify just once \"${tag} col1,col2\"`\n          );\n        }\n        throw new Error(\n          `${tag} configuration of '${klass.namespaceName}.${\n            klass.name\n          }' is invalid; expected ${\n            isPrimary ? \"a string\" : \"a string or string array\"\n          } but found ${typeof key}`\n        );\n      }\n      const { spec: keySpec, tags, description } = parseConstraintSpec(key);\n      const columns: string[] = parseSqlColumnArray(keySpec);\n      const attributes = attributesByNames(klass, columns, `${tag} ${key}`);\n      if (isPrimary) {\n        attributes.forEach(attr => {\n          attr.tags.notNull = true;\n        });\n      }\n      const keyAttributeNums = attributes.map(a => a.num);\n      // Now we need to fake a constraint for this:\n      const fakeConstraint = {\n        kind: \"constraint\",\n        isFake: true,\n        isIndexed: true, // otherwise it gets ignored by ignoreIndexes\n        id: Math.random(),\n        name: `FAKE_${klass.namespaceName}_${klass.name}_${tag}`,\n        type: isPrimary ? \"p\" : \"u\",\n        classId: klass.id,\n        foreignClassId: null,\n        comment: null,\n        description,\n        keyAttributeNums,\n        foreignKeyAttributeNums: null,\n        tags,\n      };\n      introspectionResults.constraint.push(fakeConstraint);\n    }\n    if (klass.tags.primaryKey) {\n      addKey(klass.tags.primaryKey, true);\n    }\n    if (klass.tags.unique) {\n      if (Array.isArray(klass.tags.unique)) {\n        klass.tags.unique.forEach(key => addKey(key));\n      } else {\n        addKey(klass.tags.unique);\n      }\n    }\n  });\n  // Now primary keys are in place, we can apply foreign keys\n  introspectionResults.class.forEach(klass => {\n    const namespace = introspectionResults.namespace.find(\n      n => n.id === klass.namespaceId\n    );\n    if (!namespace) {\n      return;\n    }\n    const getType = () =>\n      introspectionResults.type.find(t => t.id === klass.typeId);\n    const foreignKey = klass.tags.foreignKey || getType().tags.foreignKey;\n    if (foreignKey) {\n      const foreignKeys =\n        typeof foreignKey === \"string\" ? [foreignKey] : foreignKey;\n      if (!Array.isArray(foreignKeys)) {\n        throw new Error(\n          `Invalid foreign key smart comment specified on '${klass.namespaceName}.${klass.name}'`\n        );\n      }\n      foreignKeys.forEach((fkSpecRaw, index) => {\n        if (typeof fkSpecRaw !== \"string\") {\n          throw new Error(\n            `Invalid foreign key spec (${index}) on '${klass.namespaceName}.${klass.name}'`\n          );\n        }\n        const {\n          spec: fkSpec,\n          tags,\n          description,\n        } = parseConstraintSpec(fkSpecRaw);\n        const matches = fkSpec.match(\n          /^\\(([^()]+)\\) references ([^().]+)(?:\\.([^().]+))?(?:\\s*\\(([^()]+)\\))?$/i\n        );\n        if (!matches) {\n          throw new Error(\n            `Invalid foreignKey syntax for '${klass.namespaceName}.${klass.name}'; expected something like \"(col1,col2) references schema.table (c1, c2)\", you passed '${fkSpecRaw}'`\n          );\n        }\n        const [\n          ,\n          rawColumns,\n          rawSchemaOrTable,\n          rawTableOnly,\n          rawForeignColumns,\n        ] = matches;\n        const rawSchema = rawTableOnly\n          ? rawSchemaOrTable\n          : `\"${klass.namespaceName}\"`;\n        const rawTable = rawTableOnly || rawSchemaOrTable;\n        const columns: string[] = parseSqlColumnArray(rawColumns);\n        const foreignSchema: string = parseSqlColumnString(rawSchema);\n        const foreignTable: string = parseSqlColumnString(rawTable);\n        const foreignColumns: string[] | null = rawForeignColumns\n          ? parseSqlColumnArray(rawForeignColumns)\n          : null;\n\n        const foreignKlass = introspectionResults.class.find(\n          k => k.name === foreignTable && k.namespaceName === foreignSchema\n        );\n        if (!foreignKlass) {\n          throw new Error(\n            `@foreignKey smart comment referenced non-existant table/view '${foreignSchema}'.'${foreignTable}'. Note that this reference must use *database names* (i.e. it does not respect @name). (${fkSpecRaw})`\n          );\n        }\n        const foreignNamespace = introspectionResults.namespace.find(\n          n => n.id === foreignKlass.namespaceId\n        );\n        if (!foreignNamespace) {\n          return;\n        }\n\n        const keyAttributeNums = attributesByNames(\n          klass,\n          columns,\n          `@foreignKey ${fkSpecRaw}`\n        ).map(a => a.num);\n        const foreignKeyAttributeNums = attributesByNames(\n          foreignKlass,\n          foreignColumns,\n          `@foreignKey ${fkSpecRaw}`\n        ).map(a => a.num);\n\n        // Now we need to fake a constraint for this:\n        const fakeConstraint = {\n          kind: \"constraint\",\n          isFake: true,\n          isIndexed: true, // otherwise it gets ignored by ignoreIndexes\n          id: Math.random(),\n          name: `FAKE_${klass.namespaceName}_${klass.name}_foreignKey_${index}`,\n          type: \"f\", // foreign key\n          classId: klass.id,\n          foreignClassId: foreignKlass.id,\n          comment: null,\n          description,\n          keyAttributeNums,\n          foreignKeyAttributeNums,\n          tags,\n        };\n        introspectionResults.constraint.push(fakeConstraint);\n      });\n    }\n  });\n}\n\nfunction isEnumConstraint(\n  klass: PgClass,\n  con: PgConstraint,\n  isEnumTable: boolean\n) {\n  if (con.classId === klass.id) {\n    const isPrimaryKey = con.type === \"p\";\n    const isUniqueConstraint = con.type === \"u\";\n    if (isPrimaryKey || isUniqueConstraint) {\n      const isExplicitEnumConstraint =\n        con.tags.enum === true || typeof con.tags.enum === \"string\";\n      const isPrimaryKeyOfEnumTableConstraint = con.type === \"p\" && isEnumTable;\n      if (isExplicitEnumConstraint || isPrimaryKeyOfEnumTableConstraint) {\n        const hasExactlyOneColumn = con.keyAttributeNums.length === 1;\n        if (!hasExactlyOneColumn) {\n          throw new Error(\n            `Enum table \"${klass.namespaceName}\".\"${klass.name}\" enum constraint '${con.name}' is composite; it should have exactly one column (found: ${con.keyAttributeNums.length})`\n          );\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction enumTables(introspectionResults) {\n  introspectionResults.class.map(async klass => {\n    const isEnumTable =\n      klass.tags.enum === true || typeof klass.tags.enum === \"string\";\n\n    if (isEnumTable) {\n      // Prevent the table being recognised as a table\n      // eslint-disable-next-line require-atomic-updates\n      klass.tags.omit = true;\n      // eslint-disable-next-line require-atomic-updates\n      klass.isSelectable = false;\n      // eslint-disable-next-line require-atomic-updates\n      klass.isInsertable = false;\n      // eslint-disable-next-line require-atomic-updates\n      klass.isUpdatable = false;\n      // eslint-disable-next-line require-atomic-updates\n      klass.isDeletable = false;\n    }\n\n    // By this point, even views should have \"fake\" constraints we can use\n    // (e.g. `@primaryKey`)\n    const enumConstraints = introspectionResults.constraint.filter(con =>\n      isEnumConstraint(klass, con, isEnumTable)\n    );\n\n    // Get all the columns\n    const enumTableColumns = introspectionResults.attribute.filter(\n      attr => attr.classId === klass.id\n    );\n\n    // Get description column\n    const descriptionColumn = enumTableColumns.find(\n      attr => attr.name === \"description\" || attr.tags.enumDescription\n    );\n    const allData = klass._internalEnumData || [];\n\n    enumConstraints.forEach(constraint => {\n      const col = enumTableColumns.find(\n        col => col.num === constraint.keyAttributeNums[0]\n      );\n      if (!col) {\n        // Should never happen\n        throw new Error(\n          \"Graphile Engine error - could not find column for enum constraint\"\n        );\n      }\n      const data = allData.filter(row => row[col.name] != null);\n      if (data.length < 1) {\n        throw new Error(\n          `Enum table \"${klass.namespaceName}\".\"${klass.name}\" contains no visible entries for enum constraint '${constraint.name}'. Check that the table contains at least one row and that the rows are not hidden by row-level security policies.`\n        );\n      }\n\n      // Create fake enum type\n      const constraintIdent =\n        constraint.type === \"p\" ? \"\" : `_${constraint.name}`;\n      const enumTypeArray = {\n        kind: \"type\",\n        isFake: true,\n        id: fakeEnumIdentifier(\n          klass.namespaceName,\n          klass.name,\n          constraintIdent,\n          true\n        ),\n        name: `_${klass.name}${constraintIdent}`,\n        description: null,\n        tags: {},\n        namespaceId: klass.namespaceId,\n        namespaceName: klass.namespaceName,\n        type: \"b\",\n        category: \"A\",\n        domainIsNotNull: null,\n        arrayItemTypeId: null,\n        typeLength: -1,\n        isPgArray: true,\n        classId: null,\n        domainBaseTypeId: null,\n        domainTypeModifier: null,\n        domainHasDefault: false,\n        enumVariants: null,\n        enumDescriptions: null,\n        rangeSubTypeId: null,\n      };\n      const enumType = {\n        kind: \"type\",\n        isFake: true,\n        id: fakeEnumIdentifier(\n          klass.namespaceName,\n          klass.name,\n          constraintIdent,\n          false\n        ),\n        name: `${klass.name}${constraintIdent}`,\n        description: klass.description,\n        tags: { ...klass.tags, ...constraint.tags },\n        namespaceId: klass.namespaceId,\n        namespaceName: klass.namespaceName,\n        type: \"e\",\n        category: \"E\",\n        domainIsNotNull: null,\n        arrayItemTypeId: enumTypeArray.id,\n        typeLength: 4, // ???\n        isPgArray: false,\n        classId: null,\n        domainBaseTypeId: null,\n        domainTypeModifier: null,\n        domainHasDefault: false,\n        enumVariants: data.map(r => r[col.name]),\n        enumDescriptions: descriptionColumn\n          ? data.map(r => r[descriptionColumn.name])\n          : null,\n        // TODO: enumDescriptions\n        rangeSubTypeId: null,\n      };\n      introspectionResults.type.push(enumType, enumTypeArray);\n      introspectionResults.typeById[enumType.id] = enumType;\n      introspectionResults.typeById[enumTypeArray.id] = enumTypeArray;\n\n      // Change type of all attributes that reference this table to\n      // reference this enum type\n      introspectionResults.constraint.forEach(c => {\n        if (\n          c.type === \"f\" &&\n          c.foreignClassId === klass.id &&\n          c.foreignKeyAttributeNums.length === 1 &&\n          c.foreignKeyAttributeNums[0] === col.num\n        ) {\n          // Get the attribute\n          const fkattr = introspectionResults.attribute.find(\n            attr =>\n              attr.classId === c.classId && attr.num === c.keyAttributeNums[0]\n          );\n          if (fkattr) {\n            // Override the detected type to pretend to be our enum\n            fkattr.typeId = enumType.id;\n          }\n        }\n      });\n    });\n  });\n}\n\n/* The argument to this must not contain cyclic references! */\nconst deepClone = value => {\n  if (Array.isArray(value)) {\n    return value.map(val => deepClone(val));\n  } else if (typeof value === \"object\" && value) {\n    return Object.keys(value).reduce((memo, k) => {\n      memo[k] = deepClone(value[k]);\n      return memo;\n    }, {});\n  } else {\n    return value;\n  }\n};\n\nexport default (async function PgIntrospectionPlugin(\n  builder,\n  {\n    pgConfig,\n    pgSchemas: schemas,\n    pgEnableTags,\n    persistentMemoizeWithKey = (key, fn) => fn(),\n    pgThrowOnMissingSchema = false,\n    pgIncludeExtensionResources = false,\n    pgLegacyFunctionsOnly = false,\n    pgIgnoreRBAC = true,\n    pgSkipInstallingWatchFixtures = false,\n    pgOwnerConnectionString,\n    pgUsePartitionedParent = false,\n  }\n) {\n  /**\n   * Introspect database and get the table/view/constraints.\n   */\n  async function introspect(): Promise<PgIntrospectionResultsByKind> {\n    // Perform introspection\n    if (!Array.isArray(schemas)) {\n      throw new Error(\"Argument 'schemas' (array) is required\");\n    }\n    const cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${version}`;\n    const introspectionResultsByKind = deepClone(\n      await persistentMemoizeWithKey(cacheKey, () =>\n        withPgClient(pgConfig, async pgClient => {\n          const versionResult = await pgClient.query(\n            \"show server_version_num;\"\n          );\n          const serverVersionNum = parseInt(\n            versionResult.rows[0].server_version_num,\n            10\n          );\n          const introspectionQuery = makeIntrospectionQuery(serverVersionNum, {\n            pgLegacyFunctionsOnly,\n            pgIgnoreRBAC,\n            pgUsePartitionedParent,\n          });\n          const { rows } = await pgClient.query(introspectionQuery, [\n            schemas,\n            pgIncludeExtensionResources,\n          ]);\n\n          const result = {\n            __pgVersion: serverVersionNum,\n            namespace: [],\n            class: [],\n            attribute: [],\n            type: [],\n            constraint: [],\n            procedure: [],\n            extension: [],\n            index: [],\n          };\n          for (const { object } of rows) {\n            result[object.kind].push(object);\n          }\n\n          // Parse tags from comments\n          [\n            \"namespace\",\n            \"class\",\n            \"attribute\",\n            \"type\",\n            \"constraint\",\n            \"procedure\",\n            \"extension\",\n            \"index\",\n          ].forEach(kind => {\n            result[kind].forEach(object => {\n              // Keep a copy of the raw comment\n              object.comment = object.description;\n              if (pgEnableTags && object.description) {\n                const parsed = parseTags(object.description);\n                object.tags = parsed.tags;\n                object.description = parsed.text;\n              } else {\n                object.tags = {};\n              }\n            });\n          });\n\n          const extensionConfigurationClassIds = flatMap(\n            result.extension,\n            e => e.configurationClassIds\n          );\n          result.class.forEach(klass => {\n            klass.isExtensionConfigurationTable =\n              extensionConfigurationClassIds.indexOf(klass.id) >= 0;\n          });\n\n          // Assert the columns are text\n          const VARCHAR_ID = \"1043\";\n          const TEXT_ID = \"25\";\n          const CHAR_ID = \"18\";\n          const BPCHAR_ID = \"1042\";\n\n          const VALID_TYPE_IDS = [VARCHAR_ID, TEXT_ID, CHAR_ID, BPCHAR_ID];\n\n          await Promise.all(\n            result.class.map(async klass => {\n              if (!schemas.includes(klass.namespaceName)) {\n                // Only support enums in public tables/views\n                return;\n              }\n              const isEnumTable =\n                klass.tags.enum === true || typeof klass.tags.enum === \"string\";\n\n              // NOTE: this only matches on tables (not views, since they don't\n              // have constraints), which is why we repeat the isEnumTable check below.\n              const hasEnumConstraints = result.constraint.some(con =>\n                isEnumConstraint(klass, con, isEnumTable)\n              );\n              if (isEnumTable || hasEnumConstraints) {\n                // Get the list of columns enums are defined for\n                const enumTableColumns = result.attribute\n                  .filter(\n                    attr =>\n                      attr.classId === klass.id &&\n                      VALID_TYPE_IDS.includes(attr.typeId)\n                  )\n                  .sort((a, z) => a.num - z.num);\n\n                // Load data from the table/view.\n                const query = pgSql.compile(\n                  pgSql.fragment`select ${pgSql.join(\n                    enumTableColumns.map(col => pgSql.identifier(col.name)),\n                    \", \"\n                  )} from ${pgSql.identifier(klass.namespaceName, klass.name)};`\n                );\n\n                let allData;\n                try {\n                  ({ rows: allData } = await pgClient.query(query));\n                } catch (e) {\n                  let role = \"RELEVANT_POSTGRES_USER\";\n                  try {\n                    const {\n                      rows: [{ user }],\n                    } = await pgClient.query(\"select user;\");\n                    role = user;\n                  } catch (e) {\n                    /*\n                     * Ignore; this is likely a 25P02 (transaction aborted)\n                     * error caused by the statement above failing.\n                     */\n                  }\n                  throw new Error(`Introspection could not read from enum table \"${klass.namespaceName}\".\"${klass.name}\", perhaps you need to grant access:\n\n  GRANT USAGE ON SCHEMA \"${klass.namespaceName}\" TO \"${role}\";\n  GRANT SELECT ON \"${klass.namespaceName}\".\"${klass.name}\" TO \"${role}\";\n\nOriginal error: ${e.message}\n`);\n                }\n\n                klass._internalEnumData = allData;\n              }\n            })\n          );\n\n          [\n            \"namespace\",\n            \"class\",\n            \"attribute\",\n            \"type\",\n            \"constraint\",\n            \"procedure\",\n            \"extension\",\n            \"index\",\n          ].forEach(k => {\n            result[k].forEach(Object.freeze);\n          });\n\n          return Object.freeze(result);\n        })\n      )\n    );\n\n    const knownSchemas = introspectionResultsByKind.namespace.map(n => n.name);\n    const missingSchemas = schemas.filter(s => knownSchemas.indexOf(s) < 0);\n    if (missingSchemas.length) {\n      const errorMessage = `You requested to use schema '${schemas.join(\n        \"', '\"\n      )}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join(\n        \"', '\"\n      )}'`;\n      if (pgThrowOnMissingSchema) {\n        throw new Error(errorMessage);\n      } else {\n        console.warn(\"⚠️ WARNING⚠️  \" + errorMessage); // eslint-disable-line no-console\n      }\n    }\n    return introspectionResultsByKind;\n  }\n\n  function introspectionResultsFromRaw(\n    rawResults,\n    pgAugmentIntrospectionResults\n  ) {\n    const introspectionResultsByKind = deepClone(rawResults);\n\n    const xByY = (arrayOfX, attrKey) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = x;\n        return memo;\n      }, {});\n    const xByYAndZ = (arrayOfX, attrKey, attrKey2) =>\n      arrayOfX.reduce((memo, x) => {\n        if (!memo[x[attrKey]]) memo[x[attrKey]] = {};\n        memo[x[attrKey]][x[attrKey2]] = x;\n        return memo;\n      }, {});\n    introspectionResultsByKind.namespaceById = xByY(\n      introspectionResultsByKind.namespace,\n      \"id\"\n    );\n    introspectionResultsByKind.classById = xByY(\n      introspectionResultsByKind.class,\n      \"id\"\n    );\n    introspectionResultsByKind.typeById = xByY(\n      introspectionResultsByKind.type,\n      \"id\"\n    );\n    introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(\n      introspectionResultsByKind.attribute,\n      \"classId\",\n      \"num\"\n    );\n    introspectionResultsByKind.extensionById = xByY(\n      introspectionResultsByKind.extension,\n      \"id\"\n    );\n\n    const relate = (array, newAttr, lookupAttr, lookup, missingOk = false) => {\n      array.forEach(entry => {\n        const key = entry[lookupAttr];\n        if (Array.isArray(key)) {\n          entry[newAttr] = key\n            .map(innerKey => {\n              const result = lookup[innerKey];\n              if (innerKey && !result) {\n                if (missingOk) {\n                  return;\n                }\n                throw new Error(\n                  `Could not look up '${newAttr}' by '${lookupAttr}' ('${innerKey}') on '${JSON.stringify(\n                    entry\n                  )}'`\n                );\n              }\n              return result;\n            })\n            .filter(_ => _);\n        } else {\n          const result = lookup[key];\n          if (key && !result) {\n            if (missingOk) {\n              return;\n            }\n            throw new Error(\n              `Could not look up '${newAttr}' by '${lookupAttr}' (= '${key}') on '${JSON.stringify(\n                entry\n              )}'`\n            );\n          }\n          entry[newAttr] = result;\n        }\n      });\n    };\n\n    const augment = introspectionResults => {\n      [\n        pgAugmentIntrospectionResults,\n        smartCommentConstraints,\n        enumTables,\n      ].forEach(fn => (fn ? fn(introspectionResults) : null));\n    };\n    augment(introspectionResultsByKind);\n\n    relate(\n      introspectionResultsByKind.class,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly\n    );\n\n    relate(\n      introspectionResultsByKind.class,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.procedure,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById,\n      true\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"domainBaseType\",\n      \"domainBaseTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are domains\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"arrayItemType\",\n      \"arrayItemTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are arrays\n    );\n\n    relate(\n      introspectionResultsByKind.constraint,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.constraint,\n      \"foreignClass\",\n      \"foreignClassId\",\n      introspectionResultsByKind.classById,\n      true // Because many constraints don't apply to foreign classes\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because the extension could be a defined in a different namespace\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"configurationClasses\",\n      \"configurationClassIds\",\n      introspectionResultsByKind.classById,\n      true // Because the configuration table could be a defined in a different namespace\n    );\n\n    relate(\n      introspectionResultsByKind.index,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    // Reverse arrayItemType -> arrayType\n    introspectionResultsByKind.type.forEach(type => {\n      if (type.arrayItemType) {\n        type.arrayItemType.arrayType = type;\n      }\n    });\n\n    // Table/type columns / constraints\n    introspectionResultsByKind.class.forEach(klass => {\n      klass.attributes = introspectionResultsByKind.attribute.filter(\n        attr => attr.classId === klass.id\n      );\n      klass.canUseAsterisk = !klass.attributes.some(\n        attr => attr.columnLevelSelectGrant\n      );\n      klass.constraints = introspectionResultsByKind.constraint.filter(\n        constraint => constraint.classId === klass.id\n      );\n      klass.foreignConstraints = introspectionResultsByKind.constraint.filter(\n        constraint => constraint.foreignClassId === klass.id\n      );\n      klass.primaryKeyConstraint = klass.constraints.find(\n        constraint => constraint.type === \"p\"\n      );\n    });\n\n    // Constraint attributes\n    introspectionResultsByKind.constraint.forEach(constraint => {\n      if (constraint.keyAttributeNums && constraint.class) {\n        constraint.keyAttributes = constraint.keyAttributeNums.map(nr =>\n          constraint.class.attributes.find(attr => attr.num === nr)\n        );\n      } else {\n        constraint.keyAttributes = [];\n      }\n      if (constraint.foreignKeyAttributeNums && constraint.foreignClass) {\n        constraint.foreignKeyAttributes =\n          constraint.foreignKeyAttributeNums.map(nr =>\n            constraint.foreignClass.attributes.find(attr => attr.num === nr)\n          );\n      } else {\n        constraint.foreignKeyAttributes = [];\n      }\n    });\n\n    // Detect which columns and constraints are indexed\n    introspectionResultsByKind.index.forEach(index => {\n      const columns = index.attributeNums.map(nr =>\n        index.class.attributes.find(attr => attr.num === nr)\n      );\n\n      // Indexed column (for orderBy / filter):\n      if (columns[0]) {\n        columns[0].isIndexed = true;\n      }\n\n      if (columns[0] && columns.length === 1 && index.isUnique) {\n        columns[0].isUnique = true;\n      }\n\n      // Indexed constraints (for reverse relations):\n      index.class.constraints\n        .filter(constraint => constraint.type === \"f\")\n        .forEach(constraint => {\n          if (\n            constraint.keyAttributeNums.every(\n              (nr, idx) => index.attributeNums[idx] === nr\n            )\n          ) {\n            constraint.isIndexed = true;\n          }\n        });\n    });\n\n    return introspectionResultsByKind;\n  }\n\n  let rawIntrospectionResultsByKind = await introspect();\n\n  let listener;\n\n  class Listener {\n    _handleChange: () => void;\n    client: Client | null;\n    stopped: boolean;\n    _reallyReleaseClient: (() => Promise<void>) | null;\n    _haveDisplayedError: boolean;\n    constructor(triggerRebuild) {\n      this.stopped = false;\n      this._handleChange = throttle(\n        async () => {\n          debug(`Schema change detected: re-inspecting schema...`);\n          try {\n            rawIntrospectionResultsByKind = await introspect();\n            debug(`Schema change detected: re-inspecting schema complete`);\n            triggerRebuild();\n          } catch (e) {\n            // eslint-disable-next-line no-console\n            console.error(`Schema introspection failed: ${e.message}`);\n          }\n        },\n        750,\n        {\n          leading: true,\n          trailing: true,\n        }\n      );\n      this._listener = this._listener.bind(this);\n      this._handleClientError = this._handleClientError.bind(this);\n      this._start();\n    }\n\n    async _start(isReconnect = false) {\n      if (this.stopped) {\n        return;\n      }\n      // Connect to DB\n      try {\n        const { pgClient, releasePgClient } =\n          await getPgClientAndReleaserFromConfig(pgConfig);\n        this.client = pgClient;\n        // $FlowFixMe: hack property\n        this._reallyReleaseClient = releasePgClient;\n        pgClient.on(\"notification\", this._listener);\n        pgClient.on(\"error\", this._handleClientError);\n        if (this.stopped) {\n          // In case watch mode was cancelled in the interrim.\n          return this._releaseClient();\n        } else {\n          await pgClient.query(\"listen postgraphile_watch\");\n\n          // Install the watch fixtures.\n          if (!pgSkipInstallingWatchFixtures) {\n            const watchSqlInner = await readFile(WATCH_FIXTURES_PATH, \"utf8\");\n            const sql = `begin; ${watchSqlInner};`;\n            await withPgClient(\n              pgOwnerConnectionString || pgConfig,\n              async pgClient => {\n                try {\n                  await pgClient.query(sql);\n                } catch (error) {\n                  if (!this._haveDisplayedError) {\n                    this._haveDisplayedError = true;\n                    /* eslint-disable no-console */\n                    console.warn(\n                      `${chalk.bold.yellow(\n                        \"Failed to setup watch fixtures in Postgres database\"\n                      )} ️️⚠️`\n                    );\n                    console.warn(\n                      chalk.yellow(\n                        \"This is likely because the PostgreSQL user in the connection string does not have sufficient privileges; you can solve this by passing the 'owner' connection string via '--owner-connection' / 'ownerConnectionString'. If the fixtures already exist, the watch functionality may still work.\"\n                      )\n                    );\n                    console.warn(\n                      chalk.yellow(\n                        \"Enable DEBUG='graphile-build-pg' to see the error\"\n                      )\n                    );\n                    /* eslint-enable no-console */\n                  }\n                  debug(error);\n                } finally {\n                  await pgClient.query(\"commit;\");\n                }\n              }\n            );\n          }\n\n          // Trigger re-introspection on server reconnect\n          if (isReconnect) {\n            this._handleChange();\n          }\n        }\n      } catch (e) {\n        // If something goes wrong, disconnect and try again after a short delay\n        this._reconnect(e);\n      }\n    }\n\n    _handleClientError: (e: Error) => void;\n    _handleClientError(e) {\n      this._releaseClient(false);\n      this._reconnect(e);\n    }\n    async _reconnect(e) {\n      if (this.stopped) {\n        return;\n      }\n      // eslint-disable-next-line no-console\n      console.error(\n        \"Error occurred for PG watching client; reconnecting in 2 seconds.\",\n        e.message\n      );\n      await this._releaseClient();\n      setTimeout(() => {\n        if (!this.stopped) {\n          // Listen for further changes\n          this._start(true);\n        }\n      }, 2000);\n    }\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    _listener: (notification: any) => void;\n    // eslint-disable-next-line flowtype/no-weak-types\n    async _listener(notification: any) {\n      if (notification.channel !== \"postgraphile_watch\") {\n        return;\n      }\n      try {\n        const payload = JSON.parse(notification.payload);\n        payload.payload = payload.payload || [];\n        if (payload.type === \"ddl\") {\n          const commands = payload.payload\n            .filter(\n              ({ schema }) => schema == null || schemas.indexOf(schema) >= 0\n            )\n            .map(({ command }) => command);\n          if (commands.length) {\n            this._handleChange();\n          }\n        } else if (payload.type === \"drop\") {\n          const affectsOurSchemas = payload.payload.some(\n            schemaName => schemas.indexOf(schemaName) >= 0\n          );\n          if (affectsOurSchemas) {\n            this._handleChange();\n          }\n        } else if (payload.type === \"manual\") {\n          this._handleChange();\n        } else {\n          throw new Error(`Payload type '${payload.type}' not recognised`);\n        }\n      } catch (e) {\n        debug(`Error occurred parsing notification payload: ${e}`);\n      }\n    }\n\n    async stop() {\n      this.stopped = true;\n      this._handleChange.cancel();\n      await this._releaseClient();\n    }\n\n    /**\n     * Only pass `false` to this function if you know the client is going to be\n     * terminated; otherwise we risk leaving listeners running.\n     */\n    async _releaseClient(clientIsStillViable = true) {\n      // $FlowFixMe\n      const pgClient = this.client;\n      const reallyReleaseClient = this._reallyReleaseClient;\n      this.client = null;\n      this._reallyReleaseClient = null;\n      if (pgClient) {\n        // Don't attempt to run a query after a client has errored.\n        if (clientIsStillViable) {\n          pgClient.query(\"unlisten postgraphile_watch\").catch(e => {\n            debug(`Error occurred trying to unlisten watch: ${e}`);\n          });\n        }\n        pgClient.removeListener(\"notification\", this._listener);\n        pgClient.removeListener(\"error\", this._handleClientError);\n      }\n      if (reallyReleaseClient) {\n        await reallyReleaseClient();\n      }\n    }\n  }\n\n  builder.registerWatcher(\n    async triggerRebuild => {\n      // In case we started listening before, clean up\n      if (listener) {\n        await listener.stop();\n      }\n      // We're not worried about a race condition here.\n      // eslint-disable-next-line require-atomic-updates\n      listener = new Listener(triggerRebuild);\n    },\n    async () => {\n      const l = listener;\n      listener = null;\n      if (l) {\n        await l.stop();\n      }\n    }\n  );\n\n  builder.hook(\n    \"build\",\n    build => {\n      const introspectionResultsByKind = introspectionResultsFromRaw(\n        rawIntrospectionResultsByKind,\n        build.pgAugmentIntrospectionResults\n      );\n\n      if (introspectionResultsByKind.__pgVersion < 90500) {\n        // TODO:v5: remove this workaround\n        // This is a bit of a hack, but until we have plugin priorities it's the\n        // easiest way to conditionally support PG9.4.\n        build.pgQueryFromResolveData = queryFromResolveDataFactory({\n          supportsJSONB: false,\n        });\n      }\n      return build.extend(build, {\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        getPgFakeEnumIdentifier: fakeEnumIdentifier,\n      });\n    },\n    [\"PgIntrospection\"],\n    [],\n    [\"PgBasics\"]\n  );\n}: Plugin);\n\n// TypeScript compatibility\nexport const PgEntityKind = {\n  NAMESPACE: \"namespace\",\n  PROCEDURE: \"procedure\",\n  CLASS: \"class\",\n  TYPE: \"type\",\n  ATTRIBUTE: \"attribute\",\n  CONSTRAINT: \"constraint\",\n  EXTENSION: \"extension\",\n  INDEX: \"index\",\n};\n"],"mappings":"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"}