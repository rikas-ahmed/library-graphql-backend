{"version":3,"file":"PgAllRows.js","names":["_debugSql","_interopRequireDefault","require","obj","__esModule","default","PgAllRows","builder","pgViewUniqueKey","pgSimpleCollections","subscriptions","hook","fields","build","context","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","inflection","graphql","GraphQLList","GraphQLNonNull","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgOmit","omit","pgPrepareAndRun","fieldWithHooks","scope","isRootQuery","class","reduce","memo","table","isSelectable","namespace","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","primaryKeyConstraint","primaryKeys","keyAttributes","isView","t","classKind","viewUniqueKey","tags","uniqueKey","uniqueIdAttribute","find","attr","undefined","namespaceName","schema","sqlFullTableName","identifier","makeField","isConnection","fieldName","allRows","allRowsSimple","getDataFromParsedResolveInfoFragment","description","wrapDescription","args","resolve","parent","resolveContext","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","returnType","checkerGenerator","query","useAsterisk","canUseAsterisk","withPaginationAsFields","queryBuilder","makeLiveCollection","_checkerGenerator","selectIdentifiers","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","rootValue","text","values","compile","debugSql","enabled","result","liveCollection","checker","rows","row","liveRecord","__identifiers","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","simpleCollections","hasConnections","hasSimpleCollections","exports"],"sources":["../../src/plugins/PgAllRows.js"],"sourcesContent":["// @flow\n\nimport type { Plugin } from \"graphile-build\";\nimport debugSql from \"./debugSql\";\n\nexport default (async function PgAllRows(\n  builder,\n  { pgViewUniqueKey, pgSimpleCollections, subscriptions }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        parseResolveInfo,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        inflection,\n        graphql: { GraphQLList, GraphQLNonNull },\n        pgQueryFromResolveData: queryFromResolveData,\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit: omit,\n        pgPrepareAndRun,\n      } = build;\n      const {\n        fieldWithHooks,\n        scope: { isRootQuery },\n      } = context;\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.isSelectable) return memo;\n          if (!table.namespace) return memo;\n          if (omit(table, \"all\")) return memo;\n\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableType) {\n            return memo;\n          }\n          const tableTypeName = TableType.name;\n          const ConnectionType = getTypeByName(\n            inflection.connection(TableType.name)\n          );\n          if (!TableType) {\n            throw new Error(\n              `Could not find GraphQL type for table '${table.name}'`\n            );\n          }\n          const attributes = table.attributes;\n          const primaryKeyConstraint = table.primaryKeyConstraint;\n          const primaryKeys =\n            primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n          const isView = t => t.classKind === \"v\";\n          const viewUniqueKey = table.tags.uniqueKey || pgViewUniqueKey;\n          const uniqueIdAttribute = viewUniqueKey\n            ? attributes.find(attr => attr.name === viewUniqueKey)\n            : undefined;\n          if (isView(table) && table.tags.uniqueKey && !uniqueIdAttribute) {\n            throw new Error(\n              `Could not find the named unique key '${table.tags.uniqueKey}' on view '${table.namespaceName}.${table.name}'`\n            );\n          }\n          if (!ConnectionType) {\n            throw new Error(\n              `Could not find GraphQL connection type for table '${table.name}'`\n            );\n          }\n          const schema = table.namespace;\n          const sqlFullTableName = sql.identifier(schema.name, table.name);\n          function makeField(isConnection) {\n            const fieldName = isConnection\n              ? inflection.allRows(table)\n              : inflection.allRowsSimple(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: build.wrapDescription(\n                    isConnection\n                      ? `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`\n                      : `Reads a set of \\`${tableTypeName}\\`.`,\n                    \"field\"\n                  ),\n                  type: isConnection\n                    ? ConnectionType\n                    : new GraphQLList(new GraphQLNonNull(TableType)),\n                  args: {},\n                  async resolve(parent, args, resolveContext, resolveInfo) {\n                    const { pgClient } = resolveContext;\n                    const parsedResolveInfoFragment =\n                      parseResolveInfo(resolveInfo);\n                    parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      resolveInfo.returnType\n                    );\n                    let checkerGenerator;\n                    const query = queryFromResolveData(\n                      sqlFullTableName,\n                      undefined,\n                      resolveData,\n                      {\n                        useAsterisk: table.canUseAsterisk,\n                        withPaginationAsFields: isConnection,\n                      },\n                      queryBuilder => {\n                        if (subscriptions) {\n                          queryBuilder.makeLiveCollection(\n                            table,\n                            _checkerGenerator => {\n                              checkerGenerator = _checkerGenerator;\n                            }\n                          );\n                        }\n                        if (primaryKeys) {\n                          if (subscriptions && !isConnection) {\n                            queryBuilder.selectIdentifiers(table);\n                          }\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              // Order by PK if no order specified\n                              queryBuilder.data.cursorPrefix = [\n                                \"primary_key_asc\",\n                              ];\n                              primaryKeys.forEach(key => {\n                                queryBuilder.orderBy(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )}`,\n                                  true\n                                );\n                              });\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        } else if (isView(table) && !!uniqueIdAttribute) {\n                          queryBuilder.beforeLock(\"orderBy\", () => {\n                            if (!queryBuilder.isOrderUnique(false)) {\n                              queryBuilder.data.cursorPrefix = [\n                                \"view_unique_key_asc\",\n                              ];\n                              queryBuilder.orderBy(\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  uniqueIdAttribute.name\n                                )}`,\n                                true\n                              );\n                              queryBuilder.setOrderIsUnique();\n                            }\n                          });\n                        }\n                      },\n                      resolveContext,\n                      resolveInfo.rootValue\n                    );\n                    const { text, values } = sql.compile(query);\n                    if (debugSql.enabled) debugSql(text);\n                    const result = await pgPrepareAndRun(\n                      pgClient,\n                      text,\n                      values\n                    );\n\n                    const liveCollection =\n                      resolveInfo.rootValue &&\n                      resolveInfo.rootValue.liveCollection;\n                    if (subscriptions && liveCollection && checkerGenerator) {\n                      const checker = checkerGenerator();\n                      liveCollection(\"pg\", table, checker);\n                    }\n\n                    if (isConnection) {\n                      const {\n                        rows: [row],\n                      } = result;\n                      return addStartEndCursor(row);\n                    } else {\n                      const liveRecord =\n                        resolveInfo.rootValue &&\n                        resolveInfo.rootValue.liveRecord;\n                      if (\n                        subscriptions &&\n                        !isConnection &&\n                        primaryKeys &&\n                        liveRecord\n                      ) {\n                        result.rows.forEach(\n                          row =>\n                            row && liveRecord(\"pg\", table, row.__identifiers)\n                        );\n                      }\n                      return result.rows;\n                    }\n                  },\n                };\n              },\n              {\n                isPgFieldConnection: isConnection,\n                isPgFieldSimpleCollection: !isConnection,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          const simpleCollections =\n            table.tags.simpleCollections || pgSimpleCollections;\n          const hasConnections = simpleCollections !== \"only\";\n          const hasSimpleCollections =\n            simpleCollections === \"only\" || simpleCollections === \"both\";\n          if (TableType && ConnectionType && hasConnections) {\n            makeField(true);\n          }\n          if (TableType && hasSimpleCollections) {\n            makeField(false);\n          }\n          return memo;\n        }, {}),\n        `Adding 'all*' relations to root Query`\n      );\n    },\n    [\"PgAllRows\"],\n    [],\n    [\"PgTables\"]\n  );\n}: Plugin);\n"],"mappings":"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"}