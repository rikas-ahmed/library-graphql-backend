{"version":3,"file":"PgMutationPayloadEdgePlugin.js","names":["_isString","_interopRequireDefault","require","obj","__esModule","default","PgMutationPayloadEdgePlugin","builder","pgSimpleCollections","disableIssue397Fix","hook","fields","build","context","extend","getSafeAliasFromResolveInfo","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","pgSql","sql","graphql","GraphQLList","GraphQLNonNull","inflection","pgOmit","omit","describePgEntity","pgField","scope","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","Self","table","kind","namespace","isSelectable","returnTypeId","typeId","returnsSet","simpleCollections","tags","hasConnections","TableType","type","id","tableTypeName","name","TableOrderByType","orderByType","TableEdgeType","edge","primaryKeyConstraint","primaryKeys","keyAttributes","canOrderBy","fieldName","edgeField","primaryKeyAsc","builtin","defaultValueEnum","getValues","find","v","description","wrapDescription","args","orderBy","defaultValue","value","resolve","data","rawOrderBy","_context","resolveInfo","safeAlias","Array","isArray","order","some","item","alias","filter","__identifiers","__cursor","map","join","isPgMutationPayloadEdgeField","pgFieldIntrospection","withQueryBuilder","queryBuilder","parsedResolveInfoFragment","aliases","expressions","unique","forEach","specs","itemIsUnique","orders","col","_ascending","expr","isString","fragment","getTableAlias","identifier","push","key","length","select","a","literal","exports"],"sources":["../../src/plugins/PgMutationPayloadEdgePlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport isString from \"lodash/isString\";\n\nexport default (function PgMutationPayloadEdgePlugin(\n  builder,\n  { pgSimpleCollections, disableIssue397Fix }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        getSafeAliasFromResolveInfo,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        graphql: { GraphQLList, GraphQLNonNull },\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        pgField,\n      } = build;\n      const {\n        scope: { isMutationPayload, pgIntrospection, pgIntrospectionTable },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      const table = pgIntrospectionTable || pgIntrospection;\n      if (\n        !isMutationPayload ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        !table.isSelectable ||\n        (omit(table, \"all\") && omit(table, \"many\"))\n      ) {\n        return fields;\n      }\n      if (\n        pgIntrospection.kind === \"procedure\" &&\n        (pgIntrospection.returnTypeId !== table.typeId ||\n          pgIntrospection.returnsSet)\n      ) {\n        return fields;\n      }\n      const simpleCollections =\n        table.tags.simpleCollections || pgSimpleCollections;\n      const hasConnections = simpleCollections !== \"only\";\n      if (!hasConnections && !disableIssue397Fix) {\n        return fields;\n      }\n\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const tableTypeName = TableType.name;\n      const TableOrderByType = getTypeByName(\n        inflection.orderByType(tableTypeName)\n      );\n      const TableEdgeType = getTypeByName(inflection.edge(tableTypeName));\n      if (!TableEdgeType) {\n        return fields;\n      }\n\n      const primaryKeyConstraint = table.primaryKeyConstraint;\n      const primaryKeys =\n        primaryKeyConstraint && primaryKeyConstraint.keyAttributes;\n      const canOrderBy = !omit(table, \"order\");\n\n      const fieldName = inflection.edgeField(table);\n      const primaryKeyAsc = inflection.builtin(\"PRIMARY_KEY_ASC\");\n      const defaultValueEnum =\n        canOrderBy &&\n        (TableOrderByType.getValues().find(v => v.name === primaryKeyAsc) ||\n          TableOrderByType.getValues()[0]);\n      return extend(\n        fields,\n        {\n          [fieldName]: pgField(\n            build,\n            fieldWithHooks,\n            fieldName,\n            {\n              description: build.wrapDescription(\n                `An edge for our \\`${tableTypeName}\\`. May be used by Relay 1.`,\n                \"field\"\n              ),\n              type: TableEdgeType,\n              args: canOrderBy\n                ? {\n                    orderBy: {\n                      description: build.wrapDescription(\n                        `The method to use when ordering \\`${tableTypeName}\\`.`,\n                        \"arg\"\n                      ),\n                      type: new GraphQLList(\n                        new GraphQLNonNull(TableOrderByType)\n                      ),\n                      defaultValue: defaultValueEnum\n                        ? [defaultValueEnum.value]\n                        : null,\n                    },\n                  }\n                : {},\n              resolve(data, { orderBy: rawOrderBy }, _context, resolveInfo) {\n                if (!data.data) {\n                  return null;\n                }\n                const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n                const edge = data.data[safeAlias];\n                if (!edge) {\n                  return null;\n                }\n                const orderBy =\n                  canOrderBy && rawOrderBy\n                    ? Array.isArray(rawOrderBy)\n                      ? rawOrderBy\n                      : [rawOrderBy]\n                    : null;\n                const order =\n                  orderBy && orderBy.some(item => item.alias)\n                    ? orderBy.filter(item => item.alias)\n                    : null;\n\n                if (!order) {\n                  if (edge.__identifiers) {\n                    return {\n                      ...edge,\n                      __cursor: [\"primary_key_asc\", edge.__identifiers],\n                    };\n                  } else {\n                    return edge;\n                  }\n                }\n\n                return {\n                  ...edge,\n                  __cursor:\n                    edge[`__order_${order.map(item => item.alias).join(\"__\")}`],\n                };\n              },\n            },\n            {\n              isPgMutationPayloadEdgeField: true,\n              pgFieldIntrospection: table,\n            },\n            false,\n            {\n              withQueryBuilder(queryBuilder, { parsedResolveInfoFragment }) {\n                const {\n                  args: { orderBy: rawOrderBy },\n                } = parsedResolveInfoFragment;\n                const orderBy =\n                  canOrderBy && rawOrderBy\n                    ? Array.isArray(rawOrderBy)\n                      ? rawOrderBy\n                      : [rawOrderBy]\n                    : null;\n                if (orderBy != null) {\n                  const aliases = [];\n                  const expressions = [];\n                  let unique = false;\n                  orderBy.forEach(item => {\n                    const { alias, specs, unique: itemIsUnique } = item;\n                    unique = unique || itemIsUnique;\n                    const orders = Array.isArray(specs[0]) ? specs : [specs];\n                    orders.forEach(([col, _ascending]) => {\n                      if (!col) {\n                        return;\n                      }\n                      const expr = isString(col)\n                        ? sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                            col\n                          )}`\n                        : typeof col === \"function\"\n                        ? col({ queryBuilder })\n                        : col;\n                      expressions.push(expr);\n                    });\n                    if (alias == null) return;\n                    aliases.push(alias);\n                  });\n                  if (!unique && primaryKeys) {\n                    // Add PKs\n                    primaryKeys.forEach(key => {\n                      expressions.push(\n                        sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                          key.name\n                        )}`\n                      );\n                    });\n                  }\n                  if (aliases.length) {\n                    queryBuilder.select(\n                      sql.fragment`json_build_array(${sql.join(\n                        aliases.map(a => sql.fragment`${sql.literal(a)}::text`),\n                        \", \"\n                      )}, json_build_array(${sql.join(expressions, \", \")}))`,\n                      \"__order_\" + aliases.join(\"__\")\n                    );\n                  }\n                }\n              },\n            }\n          ),\n        },\n        `Adding edge field for table ${describePgEntity(\n          table\n        )} to mutation payload '${Self.name}'`\n      );\n    },\n    [\"PgMutationPayloadEdge\"]\n  );\n}: Plugin);\n"],"mappings":"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"}