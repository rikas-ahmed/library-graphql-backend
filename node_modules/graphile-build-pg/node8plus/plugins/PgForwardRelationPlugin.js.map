{"version":3,"file":"PgForwardRelationPlugin.js","names":["_debug","_interopRequireDefault","require","obj","__esModule","default","debug","debugFactory","PgForwardRelationPlugin","builder","subscriptions","hook","fields","build","context","extend","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","pgGetGqlTypeByTypeIdAndModifier","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","sqlCommentByAddingTags","describePgEntity","scope","isPgRowType","isPgCompositeType","isMutationPayload","pgIntrospection","pgIntrospectionTable","fieldWithHooks","Self","table","kind","namespace","returnTypeId","typeId","returnsSet","foreignKeyConstraints","constraints","filter","con","type","reduce","memo","constraint","gqlTableType","id","tableTypeName","name","classId","foreignTable","classById","foreignClassId","gqlForeignTableType","foreignTableTypeName","Error","foreignSchema","keys","keyAttributes","foreignKeys","foreignKeyAttributes","every","_","some","key","fieldName","singleRelationByKeys","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","pgQuery","queryBuilder","select","resolveData","foreignTableAlias","identifier","Symbol","query","useAsterisk","asJson","innerQueryBuilder","parentQueryBuilder","primaryKeyConstraint","selectIdentifiers","forEach","i","where","fragment","getTableAlias","rootValue","alias","description","tags","forwardDescription","wrapDescription","resolve","rawData","_args","resolveContext","resolveInfo","data","safeAlias","record","liveRecord","__identifiers","pgFieldIntrospection","isPgForwardRelationField","exports"],"sources":["../../src/plugins/PgForwardRelationPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgForwardRelationPlugin(builder, { subscriptions }) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        getSafeAliasFromResolveInfo,\n        getSafeAliasFromAlias,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        sqlCommentByAddingTags,\n        describePgEntity,\n      } = build;\n      const {\n        scope: {\n          isPgRowType,\n          isPgCompositeType,\n          isMutationPayload,\n          pgIntrospection,\n          pgIntrospectionTable,\n        },\n        fieldWithHooks,\n        Self,\n      } = context;\n\n      const table = pgIntrospectionTable || pgIntrospection;\n      if (\n        !(isPgRowType || isMutationPayload || isPgCompositeType) ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n      if (\n        isMutationPayload &&\n        pgIntrospection.kind === \"procedure\" &&\n        (pgIntrospection.returnTypeId !== table.typeId ||\n          pgIntrospection.returnsSet)\n      ) {\n        return fields;\n      }\n      // This is a relation in which we (table) are local, and there's a foreign table\n\n      const foreignKeyConstraints = table.constraints.filter(\n        con => con.type === \"f\"\n      );\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          if (omit(constraint, \"read\")) {\n            return memo;\n          }\n          const gqlTableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          const tableTypeName = gqlTableType.name;\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const foreignTable =\n            introspectionResultsByKind.classById[constraint.foreignClassId];\n          const gqlForeignTableType = pgGetGqlTypeByTypeIdAndModifier(\n            foreignTable.type.id,\n            null\n          );\n          const foreignTableTypeName = gqlForeignTableType.name;\n          if (!gqlForeignTableType) {\n            debug(\n              `Could not determine type for foreign table with id ${constraint.foreignClassId}`\n            );\n            return memo;\n          }\n          if (!foreignTable) {\n            throw new Error(\n              `Could not find the foreign table (constraint: ${constraint.name})`\n            );\n          }\n          if (omit(foreignTable, \"read\")) {\n            return memo;\n          }\n          const foreignSchema = foreignTable.namespace;\n\n          const keys = constraint.keyAttributes;\n          const foreignKeys = constraint.foreignKeyAttributes;\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n          if (keys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n          if (foreignKeys.some(key => omit(key, \"read\"))) {\n            return memo;\n          }\n\n          const fieldName = inflection.singleRelationByKeys(\n            keys,\n            foreignTable,\n            table,\n            constraint\n          );\n\n          memo = extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                ({\n                  getDataFromParsedResolveInfoFragment,\n                  addDataGenerator,\n                }) => {\n                  addDataGenerator(parsedResolveInfoFragment => {\n                    return {\n                      pgQuery: queryBuilder => {\n                        queryBuilder.select(() => {\n                          const resolveData =\n                            getDataFromParsedResolveInfoFragment(\n                              parsedResolveInfoFragment,\n                              gqlForeignTableType\n                            );\n                          const foreignTableAlias = sql.identifier(Symbol());\n                          const query = queryFromResolveData(\n                            sql.identifier(\n                              foreignSchema.name,\n                              foreignTable.name\n                            ),\n                            foreignTableAlias,\n                            resolveData,\n                            {\n                              useAsterisk: false, // Because it's only a single relation, no need\n                              asJson: true,\n                            },\n                            innerQueryBuilder => {\n                              innerQueryBuilder.parentQueryBuilder =\n                                queryBuilder;\n                              if (subscriptions && table.primaryKeyConstraint) {\n                                queryBuilder.selectIdentifiers(table);\n                              }\n                              if (\n                                subscriptions &&\n                                foreignTable.primaryKeyConstraint\n                              ) {\n                                innerQueryBuilder.selectIdentifiers(\n                                  foreignTable\n                                );\n                              }\n                              keys.forEach((key, i) => {\n                                innerQueryBuilder.where(\n                                  sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                    key.name\n                                  )} = ${foreignTableAlias}.${sql.identifier(\n                                    foreignKeys[i].name\n                                  )}`\n                                );\n                              });\n                            },\n                            queryBuilder.context,\n                            queryBuilder.rootValue\n                          );\n                          return sql.fragment`(${query})`;\n                        }, getSafeAliasFromAlias(parsedResolveInfoFragment.alias));\n                      },\n                    };\n                  });\n                  return {\n                    description:\n                      constraint.tags.forwardDescription ||\n                      build.wrapDescription(\n                        `Reads a single \\`${foreignTableTypeName}\\` that is related to this \\`${tableTypeName}\\`.`,\n                        \"field\"\n                      ),\n                    type: gqlForeignTableType, // Nullable since RLS may forbid fetching\n                    resolve: (rawData, _args, resolveContext, resolveInfo) => {\n                      const data = isMutationPayload ? rawData.data : rawData;\n                      if (!data) return null;\n                      const safeAlias =\n                        getSafeAliasFromResolveInfo(resolveInfo);\n                      const record = data[safeAlias];\n                      const liveRecord =\n                        resolveInfo.rootValue &&\n                        resolveInfo.rootValue.liveRecord;\n                      if (record && liveRecord) {\n                        liveRecord(\"pg\", foreignTable, record.__identifiers);\n                      }\n                      return record;\n                    },\n                  };\n                },\n                {\n                  pgFieldIntrospection: constraint,\n                  isPgForwardRelationField: true,\n                }\n              ),\n            },\n            `Forward relation for ${describePgEntity(\n              constraint\n            )}. To rename this relation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              constraint,\n              {\n                fieldName: \"newNameHere\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n        `Adding forward relations to '${Self.name}'`\n      );\n    },\n    [\"PgForwardRelation\"]\n  );\n}: Plugin);\n"],"mappings":"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"}