{"version":3,"file":"PgBasicsPlugin.js","names":["sql","_interopRequireWildcard","require","_package","_pgField","_interopRequireDefault","_queryFromResolveDataFactory","_addStartEndCursor","_omit","_makeProcField","_PgComputedColumnsPlugin","_parseIdentifier","_viaTemporaryTable","_chalk","_pickBy","_PgLiveProvider","_pgPrepareAndRun","_debugSql","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","defaultPgColumnFilter","_attr","_build","_context","identity","_","preventEmptyResult","keys","reduce","memo","fn","args","result","apply","length","stringifiedArgs","inspect","Error","String","omitWithRBACChecks","omit","entity","permission","ORDINARY_TABLE","VIEW","MATERIALIZED_VIEW","isTableLike","kind","classKind","EXECUTE","aclExecutable","tableEntity","READ","ALL","MANY","aclSelectable","attributes","some","attr","CREATE","aclInsertable","UPDATE","aclUpdatable","DELETE","aclDeletable","class","attributeEntity","klass","FILTER","ORDER","omitUnindexed","hideIndexWarnings","isIndexed","type","shouldOutputWarning","_omitUnindexedReadWarningGiven","console","log","describePgEntity","namespaceName","name","keyAttributes","map","a","join","includeAlias","getAlias","tags","pickBy","value","endsWith","chalk","bold","t","c","f","p","r","v","m","e","error","id","sqlCommentByAddingTags","tagsToAdd","escape","str","replace","chr","description","tagsSql","tag","tagValue","valueArray","Array","isArray","highlightOrNot","green","forEach","push","commentValue","sqlThing","identifier","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","pgIgnoreRBAC","pgIgnoreIndexes","pgHideIndexWarnings","pgLegacyJsonUuid","pgAugmentIntrospectionResults","pgOmit","baseOmit","hook","build","versions","version","liveCoordinator","registerProvider","PgLiveProvider","extend","graphileBuildPgVersion","pgSql","pgQueryFromResolveData","queryFromResolveDataFactory","pgAddStartEndCursor","addStartEndCursor","pgMakeProcField","makeProcField","pgProcFieldDetails","procFieldDetails","pgGetComputedColumnDetails","getComputedColumnDetails","pgParseIdentifier","parseIdentifier","pgViaTemporaryTable","viaTemporaryTable","pgField","pgPrepareAndRun","formatSQLForDebugging","inflection","oldBuiltin","builtin","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","baseInputType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","coerceToGraphQLName","_typeName","_tableName","table","_singularizedTableName","singularize","_columnName","_options","enumType","enumName","argument","index","orderByEnum","columnName","ascending","constantCase","orderByColumnEnum","skipRowId","orderByComputedColumnEnum","pseudoColumnName","computedColumn","domainType","inValue","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionMutationResultFieldName","gqlType","plural","outputArgNames","resultFieldName","returnTypeId","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","functionOutputFieldName","outputArgName","tableType","column","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","singleRelationByKeysBackwards","foreignSingleFieldName","foreignFieldName","manyRelationByKeys","manyRelationByKeysSimple","foreignSimpleFieldName","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","deletedNodeId","updateNodeInputType","deleteNodeInputType","edgeField","recordFunctionReturnType","resultTypeName","recordFunctionConnection","recordFunctionEdge","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","exports"],"sources":["../../src/plugins/PgBasicsPlugin.js"],"sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n  PgEntity,\n} from \"./PgIntrospectionPlugin\";\nimport pgField from \"./pgField\";\n\nimport queryFromResolveDataFactory from \"../queryFromResolveDataFactory\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport baseOmit, {\n  CREATE,\n  READ,\n  UPDATE,\n  DELETE,\n  ALL,\n  MANY,\n  ORDER,\n  FILTER,\n  EXECUTE,\n} from \"../omit\";\nimport makeProcField, { procFieldDetails } from \"./makeProcField\";\nimport { getComputedColumnDetails } from \"./PgComputedColumnsPlugin\";\nimport parseIdentifier from \"../parseIdentifier\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport chalk from \"chalk\";\nimport pickBy from \"lodash/pickBy\";\nimport PgLiveProvider from \"../PgLiveProvider\";\nimport pgPrepareAndRun from \"../pgPrepareAndRun\";\nimport { formatSQLForDebugging } from \"./debugSql\";\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nconst identity = _ => _;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function (...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-engine/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nconst omitWithRBACChecks =\n  omit =>\n  (\n    entity: PgProc | PgClass | PgAttribute | PgConstraint,\n    permission: string\n  ) => {\n    const ORDINARY_TABLE = \"r\";\n    const VIEW = \"v\";\n    const MATERIALIZED_VIEW = \"m\";\n    const isTableLike = entity =>\n      entity &&\n      entity.kind === \"class\" &&\n      (entity.classKind === ORDINARY_TABLE ||\n        entity.classKind === VIEW ||\n        entity.classKind === MATERIALIZED_VIEW);\n    if (entity.kind === \"procedure\") {\n      if (permission === EXECUTE && !entity.aclExecutable) {\n        return true;\n      }\n    } else if (entity.kind === \"class\" && isTableLike(entity)) {\n      const tableEntity: PgClass = entity;\n      if (\n        (permission === READ || permission === ALL || permission === MANY) &&\n        !tableEntity.aclSelectable &&\n        !tableEntity.attributes.some(attr => attr.aclSelectable)\n      ) {\n        return true;\n      } else if (\n        permission === CREATE &&\n        !tableEntity.aclInsertable &&\n        !tableEntity.attributes.some(attr => attr.aclInsertable)\n      ) {\n        return true;\n      } else if (\n        permission === UPDATE &&\n        !tableEntity.aclUpdatable &&\n        !tableEntity.attributes.some(attr => attr.aclUpdatable)\n      ) {\n        return true;\n      } else if (permission === DELETE && !tableEntity.aclDeletable) {\n        return true;\n      }\n    } else if (entity.kind === \"attribute\" && isTableLike(entity.class)) {\n      const attributeEntity: PgAttribute = entity;\n\n      const klass = attributeEntity.class;\n      // Have we got *any* permissions on the table?\n      if (\n        klass.aclSelectable ||\n        klass.attributes.some(attr => attr.aclSelectable)\n      ) {\n        // Yes; this is a regular table; omit if RBAC permissions tell us to.\n        if (\n          (permission === READ ||\n            permission === FILTER ||\n            permission === ORDER) &&\n          !attributeEntity.aclSelectable\n        ) {\n          return true;\n        } else if (permission === CREATE && !attributeEntity.aclInsertable) {\n          return true;\n        } else if (permission === UPDATE && !attributeEntity.aclUpdatable) {\n          return true;\n        }\n      } else {\n        // No permissions on the table at all, so normal connections will skip\n        // over it. Thus we must be being exposed via a security definer function\n        // or similar, so we should expose all fields except those that are\n        // explicitly @omit-ed.\n      }\n    }\n    return omit(entity, permission);\n  };\n\nconst omitUnindexed =\n  (omit, hideIndexWarnings) =>\n  (\n    entity: PgProc | PgClass | PgAttribute | PgConstraint,\n    permission: string\n  ) => {\n    if (\n      entity.kind === \"attribute\" &&\n      !entity.isIndexed &&\n      (permission === \"filter\" || permission === \"order\")\n    ) {\n      return true;\n    }\n    if (\n      entity.kind === \"constraint\" &&\n      entity.type === \"f\" &&\n      !entity.isIndexed &&\n      permission === \"read\"\n    ) {\n      const klass = entity.class;\n      if (klass) {\n        const shouldOutputWarning =\n          // $FlowFixMe\n          !entity._omitUnindexedReadWarningGiven && !hideIndexWarnings;\n        if (shouldOutputWarning) {\n          // $FlowFixMe\n          entity._omitUnindexedReadWarningGiven = true;\n          // eslint-disable-next-line no-console\n          console.log(\n            \"%s\",\n            `Disabled 'read' permission for ${describePgEntity(\n              entity\n            )} because it isn't indexed. For more information see https://graphile.org/postgraphile/best-practices/ To fix, perform\\n\\n  CREATE INDEX ON ${`\"${klass.namespaceName}\".\"${klass.name}\"`}(\"${entity.keyAttributes\n              .map(a => a.name)\n              .join('\", \"')}\");`\n          );\n        }\n      }\n      return true;\n    }\n    return omit(entity, permission);\n  };\n\nfunction describePgEntity(entity: PgEntity, includeAlias = true) {\n  const getAlias = !includeAlias\n    ? () => \"\"\n    : () => {\n        const tags = pickBy(\n          entity.tags,\n          (value, key) => key === \"name\" || key.endsWith(\"Name\")\n        );\n        if (Object.keys(tags).length) {\n          return ` (with smart comments: ${chalk.bold(\n            Object.keys(tags)\n              .map(t => `@${t} ${tags[t]}`)\n              .join(\" | \")\n          )})`;\n        }\n        return \"\";\n      };\n\n  try {\n    if (entity.kind === \"constraint\") {\n      return `constraint ${chalk.bold(\n        `\"${entity.name}\"`\n      )} on ${describePgEntity(entity.class, false)}${getAlias()}`;\n    } else if (entity.kind === \"class\") {\n      // see pg_class.relkind https://www.postgresql.org/docs/10/static/catalog-pg-class.html\n      const kind =\n        {\n          c: \"composite type\",\n          f: \"foreign table\",\n          p: \"partitioned table\",\n          r: \"table\",\n          v: \"view\",\n          m: \"materialized view\",\n        }[entity.classKind] || \"table-like\";\n      return `${kind} ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"procedure\") {\n      return `function ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"(...args...)`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"attribute\") {\n      return `column ${chalk.bold(`\"${entity.name}\"`)} on ${describePgEntity(\n        entity.class,\n        false\n      )}${getAlias()}`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"Error occurred while attempting to debug entity:\", entity);\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return `entity of kind '${entity.kind}' with ${\n    typeof entity.id === \"string\" ? `oid '${entity.id}'` : \"\"\n  }`;\n}\n\nfunction sqlCommentByAddingTags(entity, tagsToAdd) {\n  // NOTE: this function is NOT intended to be SQL safe; it's for\n  // displaying in error messages. Nonetheless if you find issues with\n  // SQL compatibility, please send a PR or issue.\n\n  // Ref: https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-BACKSLASH-TABLE\n  const escape = str =>\n    str.replace(\n      /['\\\\\\b\\f\\n\\r\\t]/g,\n      chr =>\n        ({\n          \"\\b\": \"\\\\b\",\n          \"\\f\": \"\\\\f\",\n          \"\\n\": \"\\\\n\",\n          \"\\r\": \"\\\\r\",\n          \"\\t\": \"\\\\t\",\n        }[chr] || \"\\\\\" + chr)\n    );\n\n  // tagsToAdd is here twice to ensure that the keys in tagsToAdd come first, but that they also \"win\" any conflicts.\n  const tags = {\n    ...tagsToAdd,\n    ...entity.tags,\n    ...tagsToAdd,\n  };\n\n  const description = entity.description;\n  const tagsSql = Object.keys(tags)\n    .reduce((memo, tag) => {\n      const tagValue = tags[tag];\n      const valueArray = Array.isArray(tagValue) ? tagValue : [tagValue];\n      const highlightOrNot = tag in tagsToAdd ? chalk.bold.green : identity;\n      valueArray.forEach(value => {\n        memo.push(\n          highlightOrNot(\n            `@${escape(escape(tag))}${\n              value === true ? \"\" : \" \" + escape(escape(value))\n            }`\n          )\n        );\n      });\n      return memo;\n    }, [])\n    .join(\"\\\\n\");\n  const commentValue = `E'${tagsSql}${\n    description ? \"\\\\n\" + escape(description) : \"\"\n  }'`;\n  let sqlThing;\n  if (entity.kind === \"class\") {\n    const identifier = `\"${entity.namespaceName}\".\"${entity.name}\"`;\n    if (entity.classKind === \"r\") {\n      sqlThing = `TABLE ${identifier}`;\n    } else if (entity.classKind === \"v\") {\n      sqlThing = `VIEW ${identifier}`;\n    } else if (entity.classKind === \"m\") {\n      sqlThing = `MATERIALIZED VIEW ${identifier}`;\n    } else if (entity.classKind === \"c\") {\n      sqlThing = `TYPE ${identifier}`;\n    } else {\n      sqlThing = `PLEASE_SEND_A_PULL_REQUEST_TO_FIX_THIS ${identifier}`;\n    }\n  } else if (entity.kind === \"attribute\") {\n    sqlThing = `COLUMN \"${entity.class.namespaceName}\".\"${entity.class.name}\".\"${entity.name}\"`;\n  } else if (entity.kind === \"procedure\") {\n    sqlThing = `FUNCTION \"${entity.namespaceName}\".\"${entity.name}\"(...arg types go here...)`;\n  } else if (entity.kind === \"constraint\") {\n    // TODO: TEST!\n    sqlThing = `CONSTRAINT \"${entity.name}\" ON \"${entity.class.namespaceName}\".\"${entity.class.name}\"`;\n  } else {\n    sqlThing = `UNKNOWN_ENTITY_PLEASE_SEND_A_PULL_REQUEST`;\n  }\n\n  return `COMMENT ON ${sqlThing} IS ${commentValue};`;\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  {\n    pgStrictFunctions = false,\n    pgColumnFilter = defaultPgColumnFilter,\n    pgIgnoreRBAC = false,\n    pgIgnoreIndexes = true, // TODO:v5: change this to false\n    pgHideIndexWarnings = false,\n    pgLegacyJsonUuid = false, // TODO:v5: remove this\n    pgAugmentIntrospectionResults,\n  }\n) {\n  let pgOmit = baseOmit;\n  if (!pgIgnoreRBAC) {\n    pgOmit = omitWithRBACChecks(pgOmit);\n  }\n  if (!pgIgnoreIndexes) {\n    pgOmit = omitUnindexed(pgOmit, pgHideIndexWarnings);\n  }\n  builder.hook(\n    \"build\",\n    build => {\n      build.versions[\"graphile-build-pg\"] = version;\n      build.liveCoordinator.registerProvider(new PgLiveProvider());\n      return build.extend(build, {\n        graphileBuildPgVersion: version,\n        pgSql: sql,\n        pgStrictFunctions,\n        pgColumnFilter,\n\n        // TODO:v5: remove this workaround\n        // BEWARE: this may be overridden in PgIntrospectionPlugin for PG < 9.5\n        pgQueryFromResolveData: queryFromResolveDataFactory(),\n\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit,\n        pgMakeProcField: makeProcField,\n        pgProcFieldDetails: procFieldDetails,\n        pgGetComputedColumnDetails: getComputedColumnDetails,\n        pgParseIdentifier: parseIdentifier,\n        pgViaTemporaryTable: viaTemporaryTable,\n        describePgEntity,\n        pgField,\n        sqlCommentByAddingTags,\n        pgPrepareAndRun,\n        pgAugmentIntrospectionResults,\n        formatSQLForDebugging,\n      });\n    },\n    [\"PgBasics\"]\n  );\n\n  builder.hook(\n    \"inflection\",\n    (inflection, build) => {\n      // TODO:v5: move this to postgraphile-core\n      const oldBuiltin = inflection.builtin;\n      inflection.builtin = function (name) {\n        if (pgLegacyJsonUuid && name === \"JSON\") return \"Json\";\n        if (pgLegacyJsonUuid && name === \"UUID\") return \"Uuid\";\n        return oldBuiltin.call(this, name);\n      };\n\n      return build.extend(\n        inflection,\n        preventEmptyResult({\n          // These helpers are passed GraphQL type names as strings\n          conditionType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-condition`);\n          },\n          inputType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-input`);\n          },\n          rangeBoundType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-range-bound`);\n          },\n          rangeType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-range`);\n          },\n          patchType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-patch`);\n          },\n          baseInputType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-base-input`);\n          },\n          patchField(itemName: string) {\n            return this.camelCase(`${itemName}-patch`);\n          },\n          orderByType(typeName: string) {\n            return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n          },\n          edge(typeName: string) {\n            return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n          },\n          connection(typeName: string) {\n            return this.upperCamelCase(\n              `${this.pluralize(typeName)}-connection`\n            );\n          },\n\n          // These helpers handle overrides via smart comments. They should only\n          // be used in other inflectors, hence the underscore prefix.\n          //\n          // IMPORTANT: do NOT do case transforms here, because detail can be\n          // lost, e.g.\n          // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n          _functionName(proc: PgProc) {\n            return this.coerceToGraphQLName(proc.tags.name || proc.name);\n          },\n          _typeName(type: PgType) {\n            // 'type' introspection result\n            return this.coerceToGraphQLName(type.tags.name || type.name);\n          },\n          _tableName(table: PgClass) {\n            return this.coerceToGraphQLName(\n              table.tags.name || table.type.tags.name || table.name\n            );\n          },\n          _singularizedTableName(table: PgClass): string {\n            return this.singularize(this._tableName(table)).replace(\n              /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n              \"$&_record\"\n            );\n          },\n          _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n            return this.coerceToGraphQLName(attr.tags.name || attr.name);\n          },\n\n          // From here down, functions are passed database introspection results\n          enumType(type: PgType) {\n            if (type.tags.enumName) {\n              return type.tags.enumName;\n            }\n            return this.upperCamelCase(this._typeName(type));\n          },\n          argument(name: ?string, index: number) {\n            return this.coerceToGraphQLName(\n              this.camelCase(name || `arg${index}`)\n            );\n          },\n          orderByEnum(columnName, ascending) {\n            return this.constantCase(\n              `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n            );\n          },\n          orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n            const columnName = this._columnName(attr, {\n              skipRowId: true, // Because we messed up 😔\n            });\n            return this.orderByEnum(columnName, ascending);\n          },\n          orderByComputedColumnEnum(\n            pseudoColumnName: string,\n            proc: PgProc,\n            table: PgClass,\n            ascending: boolean\n          ) {\n            const columnName = this.computedColumn(\n              pseudoColumnName,\n              proc,\n              table\n            );\n            return this.orderByEnum(columnName, ascending);\n          },\n          domainType(type: PgType) {\n            return this.upperCamelCase(this._typeName(type));\n          },\n          enumName(inValue: string) {\n            let value = inValue;\n\n            if (value === \"\") {\n              return \"_EMPTY_\";\n            }\n\n            // Some enums use asterisks to signify wildcards - this might be for\n            // the whole item, or prefixes/suffixes, or even in the middle.  This\n            // is provided on a best efforts basis, if it doesn't suit your\n            // purposes then please pass a custom inflector as mentioned below.\n            value = value\n              .replace(/\\*/g, \"_ASTERISK_\")\n              .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n              .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n            // This is a best efforts replacement for common symbols that you\n            // might find in enums. Generally we only support enums that are\n            // alphanumeric, if these replacements don't work for you, you should\n            // pass a custom inflector that replaces this `enumName` method\n            // with one of your own chosing.\n            value =\n              {\n                // SQL comparison operators\n                \">\": \"GREATER_THAN\",\n                \">=\": \"GREATER_THAN_OR_EQUAL\",\n                \"=\": \"EQUAL\",\n                \"!=\": \"NOT_EQUAL\",\n                \"<>\": \"DIFFERENT\",\n                \"<=\": \"LESS_THAN_OR_EQUAL\",\n                \"<\": \"LESS_THAN\",\n\n                // PostgreSQL LIKE shortcuts\n                \"~~\": \"LIKE\",\n                \"~~*\": \"ILIKE\",\n                \"!~~\": \"NOT_LIKE\",\n                \"!~~*\": \"NOT_ILIKE\",\n\n                // '~' doesn't necessarily represent regexps, but the three\n                // operators following it likely do, so we'll use the word TILDE\n                // in all for consistency.\n                \"~\": \"TILDE\",\n                \"~*\": \"TILDE_ASTERISK\",\n                \"!~\": \"NOT_TILDE\",\n                \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n                // A number of other symbols where we're not sure of their\n                // meaning.  We give them common generic names so that they're\n                // suitable for multiple purposes, e.g. favouring 'PLUS' over\n                // 'ADDITION' and 'DOT' over 'FULL_STOP'\n                \"%\": \"PERCENT\",\n                \"+\": \"PLUS\",\n                \"-\": \"MINUS\",\n                \"/\": \"SLASH\",\n                \"\\\\\": \"BACKSLASH\",\n                _: \"UNDERSCORE\",\n                \"#\": \"POUND\",\n                \"£\": \"STERLING\",\n                $: \"DOLLAR\",\n                \"&\": \"AMPERSAND\",\n                \"@\": \"AT\",\n                \"'\": \"APOSTROPHE\",\n                '\"': \"QUOTE\",\n                \"`\": \"BACKTICK\",\n                \":\": \"COLON\",\n                \";\": \"SEMICOLON\",\n                \"!\": \"EXCLAMATION_POINT\",\n                \"?\": \"QUESTION_MARK\",\n                \",\": \"COMMA\",\n                \".\": \"DOT\",\n                \"^\": \"CARET\",\n                \"|\": \"BAR\",\n                \"[\": \"OPEN_BRACKET\",\n                \"]\": \"CLOSE_BRACKET\",\n                \"(\": \"OPEN_PARENTHESIS\",\n                \")\": \"CLOSE_PARENTHESIS\",\n                \"{\": \"OPEN_BRACE\",\n                \"}\": \"CLOSE_BRACE\",\n              }[value] || value;\n            return value;\n          },\n\n          tableNode(table: PgClass) {\n            return this.camelCase(this._singularizedTableName(table));\n          },\n          tableFieldName(table: PgClass) {\n            return this.camelCase(this._singularizedTableName(table));\n          },\n          allRows(table: PgClass) {\n            return this.camelCase(\n              `all-${this.pluralize(this._singularizedTableName(table))}`\n            );\n          },\n          allRowsSimple(table: PgClass) {\n            return this.camelCase(\n              `all-${this.pluralize(this._singularizedTableName(table))}-list`\n            );\n          },\n          functionMutationName(proc: PgProc) {\n            return this.camelCase(this._functionName(proc));\n          },\n          functionMutationResultFieldName(\n            proc: PgProc,\n            gqlType,\n            plural: boolean = false,\n            outputArgNames: Array<string> = []\n          ) {\n            if (proc.tags.resultFieldName) {\n              return proc.tags.resultFieldName;\n            }\n            let name;\n            if (outputArgNames.length === 1 && outputArgNames[0] !== \"\") {\n              name = this.camelCase(outputArgNames[0]);\n            } else if (gqlType.name === \"Int\") {\n              name = \"integer\";\n            } else if (gqlType.name === \"Float\") {\n              name = \"float\";\n            } else if (gqlType.name === \"Boolean\") {\n              name = \"boolean\";\n            } else if (gqlType.name === \"String\") {\n              name = \"string\";\n            } else if (proc.returnTypeId === \"2249\") {\n              // returns a record type\n              name = \"result\";\n            } else {\n              name = this.camelCase(gqlType.name);\n            }\n            return plural ? this.pluralize(name) : name;\n          },\n          functionQueryName(proc: PgProc) {\n            return this.camelCase(this._functionName(proc));\n          },\n          functionQueryNameList(proc: PgProc) {\n            return this.camelCase(`${this._functionName(proc)}-list`);\n          },\n          functionPayloadType(proc: PgProc) {\n            return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n          },\n          functionInputType(proc: PgProc) {\n            return this.upperCamelCase(`${this._functionName(proc)}-input`);\n          },\n          functionOutputFieldName(\n            proc: PgProc,\n            outputArgName: string,\n            index: number\n          ) {\n            return this.argument(outputArgName, index);\n          },\n          tableType(table: PgClass) {\n            return this.upperCamelCase(this._singularizedTableName(table));\n          },\n          column(attr: PgAttribute) {\n            return this.camelCase(this._columnName(attr));\n          },\n          computedColumn(\n            pseudoColumnName: string,\n            proc: PgProc,\n            _table: PgClass\n          ) {\n            return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n          },\n          computedColumnList(\n            pseudoColumnName: string,\n            proc: PgProc,\n            _table: PgClass\n          ) {\n            return proc.tags.fieldName\n              ? proc.tags.fieldName + \"List\"\n              : this.camelCase(`${pseudoColumnName}-list`);\n          },\n          singleRelationByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.fieldName) {\n              return constraint.tags.fieldName;\n            }\n            return this.camelCase(\n              `${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          singleRelationByKeysBackwards(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignSingleFieldName) {\n              return constraint.tags.foreignSingleFieldName;\n            }\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.singleRelationByKeys(\n              detailedKeys,\n              table,\n              _foreignTable,\n              constraint\n            );\n          },\n          manyRelationByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.camelCase(\n              `${this.pluralize(\n                this._singularizedTableName(table)\n              )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n            );\n          },\n          manyRelationByKeysSimple(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignSimpleFieldName) {\n              return constraint.tags.foreignSimpleFieldName;\n            }\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.camelCase(\n              `${this.pluralize(\n                this._singularizedTableName(table)\n              )}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-list`\n            );\n          },\n          rowByUniqueKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.fieldName) {\n              return constraint.tags.fieldName;\n            }\n            return this.camelCase(\n              `${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          updateByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.updateFieldName) {\n              return constraint.tags.updateFieldName;\n            }\n            return this.camelCase(\n              `update-${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          deleteByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.deleteFieldName) {\n              return constraint.tags.deleteFieldName;\n            }\n            return this.camelCase(\n              `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          updateByKeysInputType(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.updateFieldName) {\n              return this.upperCamelCase(\n                `${constraint.tags.updateFieldName}-input`\n              );\n            }\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-input`\n            );\n          },\n          deleteByKeysInputType(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.deleteFieldName) {\n              return this.upperCamelCase(\n                `${constraint.tags.deleteFieldName}-input`\n              );\n            }\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-input`\n            );\n          },\n          updateNode(table: PgClass) {\n            return this.camelCase(\n              `update-${this._singularizedTableName(table)}`\n            );\n          },\n          deleteNode(table: PgClass) {\n            return this.camelCase(\n              `delete-${this._singularizedTableName(table)}`\n            );\n          },\n          deletedNodeId(table: PgClass) {\n            return this.camelCase(`deleted-${this.singularize(table.name)}-id`);\n          },\n          updateNodeInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(table)}-input`\n            );\n          },\n          deleteNodeInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(table)}-input`\n            );\n          },\n          edgeField(table: PgClass) {\n            return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n          },\n          recordFunctionReturnType(proc: PgProc) {\n            return (\n              proc.tags.resultTypeName ||\n              this.upperCamelCase(`${this._functionName(proc)}-record`)\n            );\n          },\n          recordFunctionConnection(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this._functionName(proc)}-connection`\n            );\n          },\n          recordFunctionEdge(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this.singularize(this._functionName(proc))}-edge`\n            );\n          },\n          scalarFunctionConnection(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this._functionName(proc)}-connection`\n            );\n          },\n          scalarFunctionEdge(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this.singularize(this._functionName(proc))}-edge`\n            );\n          },\n          createField(table: PgClass) {\n            return this.camelCase(\n              `create-${this._singularizedTableName(table)}`\n            );\n          },\n          createInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `create-${this._singularizedTableName(table)}-input`\n            );\n          },\n          createPayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `create-${this._singularizedTableName(table)}-payload`\n            );\n          },\n          updatePayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(table)}-payload`\n            );\n          },\n          deletePayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(table)}-payload`\n            );\n          },\n        }),\n        \"Default inflectors from PgBasicsPlugin. You can override these with `makeAddInflectorsPlugin(..., true)`.\"\n      );\n    },\n    [\"PgBasics\"]\n  );\n}: Plugin);\n"],"mappings":"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"}