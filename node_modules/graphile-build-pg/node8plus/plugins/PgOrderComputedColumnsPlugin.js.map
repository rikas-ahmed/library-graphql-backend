{"version":3,"file":"PgOrderComputedColumnsPlugin.js","names":["_PgComputedColumnsPlugin","require","PgOrderComputedColumnsPlugin","builder","hook","values","build","context","extend","inflection","pgOmit","omit","describePgEntity","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","scope","isPgRowSortEnum","pgIntrospection","table","kind","compatibleComputedColumns","procedure","reduce","memo","proc","tags","sortable","computedColumnDetails","getComputedColumnDetails","pseudoColumnName","nonOptionalArgumentsCount","inputArgsCount","argDefaultsNum","returnsSet","returnType","typeById","returnTypeId","isPgArray","returnTypeTable","classById","classId","isRecordLike","id","isVoid","String","push","ascFieldName","orderByComputedColumnEnum","descFieldName","unique","isUnique","functionCall","queryBuilder","fragment","identifier","namespaceName","name","getTableAlias","value","alias","toLowerCase","specs","exports","default"],"sources":["../../src/plugins/PgOrderComputedColumnsPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport { getComputedColumnDetails } from \"./PgComputedColumnsPlugin\";\n\nexport default (function PgOrderComputedColumnsPlugin(builder) {\n  builder.hook(\n    \"GraphQLEnumType:values\",\n    (values, build, context) => {\n      const {\n        extend,\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n      } = build;\n      const {\n        scope: { isPgRowSortEnum, pgIntrospection: table },\n      } = context;\n      if (!isPgRowSortEnum || !table || table.kind !== \"class\") {\n        return values;\n      }\n\n      const compatibleComputedColumns =\n        introspectionResultsByKind.procedure.reduce((memo, proc) => {\n          /* ALSO SEE PgConditionComputedColumnPlugin */\n          // Must be marked @sortable\n          if (!proc.tags.sortable) return memo;\n\n          // Must not be omitted\n          if (omit(proc, \"execute\")) return memo;\n\n          // Must be a computed column\n          const computedColumnDetails = getComputedColumnDetails(\n            build,\n            table,\n            proc\n          );\n          if (!computedColumnDetails) return memo;\n          const { pseudoColumnName } = computedColumnDetails;\n\n          // Must have only one required argument\n          const nonOptionalArgumentsCount =\n            proc.inputArgsCount - proc.argDefaultsNum;\n          if (nonOptionalArgumentsCount > 1) {\n            return memo;\n          }\n\n          // Must return a scalar\n          if (proc.returnsSet) return memo;\n          const returnType =\n            introspectionResultsByKind.typeById[proc.returnTypeId];\n          if (returnType.isPgArray) return memo;\n          const returnTypeTable =\n            introspectionResultsByKind.classById[returnType.classId];\n          if (returnTypeTable) return memo;\n          const isRecordLike = returnType.id === \"2249\";\n          if (isRecordLike) return memo;\n          const isVoid = String(returnType.id) === \"2278\";\n          if (isVoid) return memo;\n\n          // Looks good\n          memo.push({ proc, pseudoColumnName });\n          return memo;\n        }, []);\n      return extend(\n        values,\n        compatibleComputedColumns.reduce((memo, { proc, pseudoColumnName }) => {\n          const ascFieldName = inflection.orderByComputedColumnEnum(\n            pseudoColumnName,\n            proc,\n            table,\n            true\n          );\n          const descFieldName = inflection.orderByComputedColumnEnum(\n            pseudoColumnName,\n            proc,\n            table,\n            false\n          );\n\n          const unique = !!proc.tags.isUnique;\n\n          const functionCall = ({ queryBuilder }) =>\n            sql.fragment`(${sql.identifier(\n              proc.namespaceName,\n              proc.name\n            )}(${queryBuilder.getTableAlias()}))`;\n\n          memo = extend(\n            memo,\n            {\n              [ascFieldName]: {\n                value: {\n                  alias: ascFieldName.toLowerCase(),\n                  specs: [[functionCall, true]],\n                  unique,\n                },\n              },\n            },\n            `Adding ascending orderBy enum value for ${describePgEntity(\n              proc\n            )}. You can rename this field by removing the '@sortable' smart comment from the function.`\n          );\n          memo = extend(\n            memo,\n            {\n              [descFieldName]: {\n                value: {\n                  alias: descFieldName.toLowerCase(),\n                  specs: [[functionCall, false]],\n                  unique,\n                },\n              },\n            },\n            `Adding descending orderBy enum value for ${describePgEntity(\n              proc\n            )}. You can rename this field by removing the '@sortable' smart comment from the function.`\n          );\n          return memo;\n        }, {}),\n        `Adding order values from table '${table.name}'`\n      );\n    },\n    [\"PgOrderComputedColumns\"]\n  );\n}: Plugin);\n"],"mappings":"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"}