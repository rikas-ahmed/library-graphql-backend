{"version":3,"file":"PgScalarFunctionConnectionPlugin.js","names":["base64","str","Buffer","from","String","toString","PgScalarFunctionConnectionPlugin","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLList","GraphQLString","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","pgField","Cursor","procedure","forEach","proc","returnsSet","namespace","returnType","typeById","returnTypeId","returnTypeTable","classById","classId","id","NodeType","EdgeType","name","scalarFunctionEdge","description","wrapDescription","fields","fieldWithHooks","cursor","addDataGenerator","usesCursor","type","resolve","data","JSON","stringify","__cursor","isCursorField","node","value","__origin","isEdgeType","nodeType","pgIntrospection","scalarFunctionConnection","nodes","map","entry","edges","hoistCursor","isConnectionType","isPgRowConnectionType","edgeType","exports","default"],"sources":["../../src/plugins/PgScalarFunctionConnectionPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64 = str => Buffer.from(String(str)).toString(\"base64\");\n\nexport default (function PgScalarFunctionConnectionPlugin(builder) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLNonNull,\n          GraphQLList,\n          GraphQLString,\n        },\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgField,\n      } = build;\n\n      const Cursor = getTypeByName(\"Cursor\");\n      introspectionResultsByKind.procedure.forEach(proc => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!proc.returnsSet) return;\n        if (!proc.namespace) return;\n        if (omit(proc, \"execute\")) return;\n\n        const returnType =\n          introspectionResultsByKind.typeById[proc.returnTypeId];\n        const returnTypeTable =\n          introspectionResultsByKind.classById[returnType.classId];\n        if (returnTypeTable) {\n          // Just use the standard table connection from PgTablesPlugin\n          return;\n        }\n        if (returnType.id === \"2249\") {\n          // Defer handling to PgRecordFunctionConnectionPlugin\n          return;\n        }\n        // TODO: PG10 doesn't support the equivalent of pg_attribute.atttypemod\n        // on function arguments and return types, however maybe a later\n        // version of PG will?\n        const NodeType =\n          pgGetGqlTypeByTypeIdAndModifier(returnType.id, null) || GraphQLString;\n        const EdgeType = newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.scalarFunctionEdge(proc),\n            description: build.wrapDescription(\n              `A \\`${NodeType.name}\\` edge in the connection.`,\n              \"type\"\n            ),\n            fields: ({ fieldWithHooks }) => {\n              return {\n                cursor: fieldWithHooks(\n                  \"cursor\",\n                  ({ addDataGenerator }) => {\n                    addDataGenerator(() => ({\n                      usesCursor: [true],\n                    }));\n                    return {\n                      description: build.wrapDescription(\n                        \"A cursor for use in pagination.\",\n                        \"field\"\n                      ),\n                      type: Cursor,\n                      resolve(data) {\n                        return base64(JSON.stringify(data.__cursor));\n                      },\n                    };\n                  },\n                  {\n                    isCursorField: true,\n                  }\n                ),\n                node: {\n                  description: build.wrapDescription(\n                    `The \\`${NodeType.name}\\` at the end of the edge.`,\n                    \"field\"\n                  ),\n                  type: NodeType,\n                  resolve(data) {\n                    return data.value;\n                  },\n                },\n              };\n            },\n          },\n          {\n            __origin: `Adding function result edge type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isEdgeType: true,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n\n        /*const ConnectionType = */\n        newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.scalarFunctionConnection(proc),\n            description: build.wrapDescription(\n              `A connection to a list of \\`${NodeType.name}\\` values.`,\n              \"type\"\n            ),\n            fields: ({ fieldWithHooks }) => {\n              return {\n                nodes: pgField(build, fieldWithHooks, \"nodes\", {\n                  description: build.wrapDescription(\n                    `A list of \\`${NodeType.name}\\` objects.`,\n                    \"field\"\n                  ),\n                  type: new GraphQLNonNull(new GraphQLList(NodeType)),\n                  resolve(data) {\n                    return data.data.map(entry => entry.value);\n                  },\n                }),\n                edges: pgField(\n                  build,\n                  fieldWithHooks,\n                  \"edges\",\n                  {\n                    description: build.wrapDescription(\n                      `A list of edges which contains the \\`${NodeType.name}\\` and cursor to aid in pagination.`,\n                      \"field\"\n                    ),\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                  {},\n                  false,\n                  {\n                    hoistCursor: true,\n                  }\n                ),\n              };\n            },\n          },\n          {\n            __origin: `Adding function connection type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isConnectionType: true,\n            isPgRowConnectionType: true,\n            edgeType: EdgeType,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n      });\n      return _;\n    },\n    [\"PgScalarFunctionConnection\"],\n    [],\n    [\"PgTypes\"]\n  );\n}: Plugin);\n"],"mappings":"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"}