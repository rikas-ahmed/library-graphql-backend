{"version":3,"file":"PgMutationCreatePlugin.js","names":["_debug","_interopRequireDefault","require","obj","__esModule","default","debug","debugFactory","PgMutationCreatePlugin","builder","pgDisableDefaultMutations","hook","fields","build","context","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","pgGetGqlInputTypeByTypeIdAndModifier","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","inflection","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","pgViaTemporaryTable","viaTemporaryTable","describePgEntity","sqlCommentByAddingTags","pgField","scope","isRootMutation","fieldWithHooks","class","reduce","memo","table","namespace","isSelectable","isInsertable","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","wrapDescription","clientMutationId","tableFieldName","__origin","isPgCreateInputType","pgInflection","pgIntrospection","PayloadType","createPayloadType","tableName","isPgCreatePayloadResultField","pgFieldIntrospection","isMutationPayload","isPgCreatePayloadType","fieldName","createField","getDataFromParsedResolveInfoFragment","relevantAttributes","attributes","filter","attr","args","input","resolve","data","resolveContext","resolveInfo","pgClient","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","Symbol","query","rootValue","sqlColumns","sqlValues","inputData","forEach","column","val","Object","prototype","hasOwnProperty","call","push","typeModifier","mutationQuery","length","fragment","join","row","rows","e","isPgCreateMutationField","exports"],"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        newWithHooks,\n        parseResolveInfo,\n        pgIntrospectionResultsByKind,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        pgSql: sql,\n        gql2pg,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLInputObjectType,\n          GraphQLNonNull,\n          GraphQLString,\n        },\n        pgColumnFilter,\n        inflection,\n        pgQueryFromResolveData: queryFromResolveData,\n        pgOmit: omit,\n        pgViaTemporaryTable: viaTemporaryTable,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgField,\n      } = build;\n      const {\n        scope: { isRootMutation },\n        fieldWithHooks,\n      } = context;\n\n      if (!isRootMutation) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        pgIntrospectionResultsByKind.class.reduce((memo, table) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!table.namespace) return memo;\n          if (!table.isSelectable) return memo;\n          if (!table.isInsertable || omit(table, \"create\")) return memo;\n\n          const Table = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n          if (!Table) {\n            debug(\n              `There was no table type for table '${table.namespace.name}.${table.name}', so we're not generating a create mutation for it.`\n            );\n            return memo;\n          }\n          const TableInput = pgGetGqlInputTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          if (!TableInput) {\n            debug(\n              `There was no input type for table '${table.namespace.name}.${table.name}', so we're going to omit it from the create mutation.`\n            );\n          }\n          const tableTypeName = inflection.tableType(table);\n          const InputType = newWithHooks(\n            GraphQLInputObjectType,\n            {\n              name: inflection.createInputType(table),\n              description: build.wrapDescription(\n                `All input for the create \\`${tableTypeName}\\` mutation.`,\n                \"type\"\n              ),\n              fields: {\n                clientMutationId: {\n                  description: build.wrapDescription(\n                    \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                    \"field\"\n                  ),\n                  type: GraphQLString,\n                },\n                ...(TableInput\n                  ? {\n                      [inflection.tableFieldName(table)]: {\n                        description: build.wrapDescription(\n                          `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                          \"field\"\n                        ),\n                        type: new GraphQLNonNull(TableInput),\n                      },\n                    }\n                  : null),\n              },\n            },\n            {\n              __origin: `Adding table create input type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}`,\n              isPgCreateInputType: true,\n              pgInflection: table, // TODO:v5: remove - TYPO!\n              pgIntrospection: table,\n            }\n          );\n          const PayloadType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.createPayloadType(table),\n              description: build.wrapDescription(\n                `The output of our create \\`${tableTypeName}\\` mutation.`,\n                \"type\"\n              ),\n              fields: ({ fieldWithHooks }) => {\n                const tableName = inflection.tableFieldName(table);\n                return {\n                  clientMutationId: {\n                    description: build.wrapDescription(\n                      \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                      \"field\"\n                    ),\n                    type: GraphQLString,\n                  },\n                  [tableName]: pgField(\n                    build,\n                    fieldWithHooks,\n                    tableName,\n                    {\n                      description: build.wrapDescription(\n                        `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                        \"field\"\n                      ),\n                      type: Table,\n                    },\n                    {\n                      isPgCreatePayloadResultField: true,\n                      pgFieldIntrospection: table,\n                    }\n                  ),\n                };\n              },\n            },\n            {\n              __origin: `Adding table create payload type for ${describePgEntity(\n                table\n              )}. You can rename the table's GraphQL type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                {\n                  name: \"newNameHere\",\n                }\n              )}\\n\\nor disable the built-in create mutation via:\\n\\n  ${sqlCommentByAddingTags(\n                table,\n                { omit: \"create\" }\n              )}`,\n              isMutationPayload: true,\n              isPgCreatePayloadType: true,\n              pgIntrospection: table,\n            }\n          );\n          const fieldName = inflection.createField(table);\n          memo = build.extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                context => {\n                  const { getDataFromParsedResolveInfoFragment } = context;\n                  const relevantAttributes = table.attributes.filter(\n                    attr =>\n                      pgColumnFilter(attr, build, context) &&\n                      !omit(attr, \"create\")\n                  );\n                  return {\n                    description: build.wrapDescription(\n                      `Creates a single \\`${tableTypeName}\\`.`,\n                      \"field\"\n                    ),\n                    type: PayloadType,\n                    args: {\n                      input: {\n                        type: new GraphQLNonNull(InputType),\n                      },\n                    },\n                    async resolve(data, args, resolveContext, resolveInfo) {\n                      const { input } = args;\n                      const { pgClient } = resolveContext;\n                      const parsedResolveInfoFragment =\n                        parseResolveInfo(resolveInfo);\n                      parsedResolveInfoFragment.args = args; // Allow overriding via makeWrapResolversPlugin\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        PayloadType\n                      );\n                      const insertedRowAlias = sql.identifier(Symbol());\n                      const query = queryFromResolveData(\n                        insertedRowAlias,\n                        insertedRowAlias,\n                        resolveData,\n                        {},\n                        null,\n                        resolveContext,\n                        resolveInfo.rootValue\n                      );\n                      const sqlColumns = [];\n                      const sqlValues = [];\n                      const inputData = input[inflection.tableFieldName(table)];\n                      relevantAttributes.forEach(attr => {\n                        const fieldName = inflection.column(attr);\n                        const val = inputData[fieldName];\n                        if (\n                          Object.prototype.hasOwnProperty.call(\n                            inputData,\n                            fieldName\n                          )\n                        ) {\n                          sqlColumns.push(sql.identifier(attr.name));\n                          sqlValues.push(\n                            gql2pg(val, attr.type, attr.typeModifier)\n                          );\n                        }\n                      });\n\n                      const mutationQuery = sql.query`\\\ninsert into ${sql.identifier(table.namespace.name, table.name)} ${\n                        sqlColumns.length\n                          ? sql.fragment`(${sql.join(\n                              sqlColumns,\n                              \", \"\n                            )}) values(${sql.join(sqlValues, \", \")})`\n                          : sql.fragment`default values`\n                      } returning *`;\n\n                      let row;\n                      try {\n                        await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                        const rows = await viaTemporaryTable(\n                          pgClient,\n                          sql.identifier(table.namespace.name, table.name),\n                          mutationQuery,\n                          insertedRowAlias,\n                          query\n                        );\n                        row = rows[0];\n                        await pgClient.query(\n                          \"RELEASE SAVEPOINT graphql_mutation\"\n                        );\n                      } catch (e) {\n                        await pgClient.query(\n                          \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                        );\n                        throw e;\n                      }\n                      return {\n                        clientMutationId: input.clientMutationId,\n                        data: row,\n                      };\n                    },\n                  };\n                },\n                {\n                  pgFieldIntrospection: table,\n                  isPgCreateMutationField: true,\n                }\n              ),\n            },\n            `Adding create mutation for ${describePgEntity(\n              table\n            )}. You can omit this default mutation with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              table,\n              {\n                omit: \"create\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n        `Adding default 'create' mutation to root mutation`\n      );\n    },\n    [\"PgMutationCreate\"],\n    [],\n    [\"PgTables\"]\n  );\n}: Plugin);\n"],"mappings":"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"}