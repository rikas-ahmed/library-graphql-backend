{"version":3,"file":"PgRecordFunctionConnectionPlugin.js","names":["base64","str","Buffer","from","String","toString","PgRecordFunctionConnectionPlugin","builder","pgForbidSetofFunctionsToReturnNull","hook","_","build","newWithHooks","getSafeAliasFromResolveInfo","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLList","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","pgField","nullableIf","condition","Type","Cursor","procedure","forEach","proc","returnsSet","namespace","returnTypeId","NodeType","recordFunctionReturnType","Error","name","EdgeType","recordFunctionEdge","description","wrapDescription","fields","fieldWithHooks","cursor","addDataGenerator","usesCursor","type","resolve","data","JSON","stringify","__cursor","isCursorField","node","_args","_context","resolveInfo","safeAlias","__origin","isEdgeType","nodeType","pgIntrospection","recordFunctionConnection","nodes","map","entry","edges","hoistCursor","isConnectionType","isPgRowConnectionType","edgeType","exports","default"],"sources":["../../src/plugins/PgRecordFunctionConnectionPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64 = str => Buffer.from(String(str)).toString(\"base64\");\n\nexport default (function PgRecordFunctionConnectionPlugin(\n  builder,\n  { pgForbidSetofFunctionsToReturnNull = false }\n) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        getSafeAliasFromResolveInfo,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        getTypeByName,\n        graphql: { GraphQLObjectType, GraphQLNonNull, GraphQLList },\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgField,\n      } = build;\n\n      const nullableIf = (condition, Type) =>\n        condition ? Type : new GraphQLNonNull(Type);\n      const Cursor = getTypeByName(\"Cursor\");\n\n      introspectionResultsByKind.procedure.forEach(proc => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!proc.returnsSet) return;\n        if (!proc.namespace) return;\n        if (omit(proc, \"execute\")) return;\n\n        if (proc.returnTypeId !== \"2249\") {\n          // Does not return a record type; defer handling to\n          // PgTablesPlugin and PgScalarFunctionConnectionPlugin\n          return;\n        }\n        // TODO: PG10 doesn't support the equivalent of pg_attribute.atttypemod\n        // on function arguments and return types, however maybe a later\n        // version of PG will?\n        const NodeType = getTypeByName(\n          inflection.recordFunctionReturnType(proc)\n        );\n        if (!NodeType) {\n          throw new Error(\n            `Do not have a node type '${inflection.recordFunctionReturnType(\n              proc\n            )}' for '${proc.name}' so cannot create connection type`\n          );\n        }\n        const EdgeType = newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.recordFunctionEdge(proc),\n            description: build.wrapDescription(\n              `A \\`${NodeType.name}\\` edge in the connection.`,\n              \"type\"\n            ),\n            fields: ({ fieldWithHooks }) => {\n              return {\n                cursor: fieldWithHooks(\n                  \"cursor\",\n                  ({ addDataGenerator }) => {\n                    addDataGenerator(() => ({\n                      usesCursor: [true],\n                    }));\n                    return {\n                      description: build.wrapDescription(\n                        \"A cursor for use in pagination.\",\n                        \"field\"\n                      ),\n                      type: Cursor,\n                      resolve(data) {\n                        return base64(JSON.stringify(data.__cursor));\n                      },\n                    };\n                  },\n                  {\n                    isCursorField: true,\n                  }\n                ),\n                node: pgField(\n                  build,\n                  fieldWithHooks,\n                  \"node\",\n                  {\n                    description: build.wrapDescription(\n                      `The \\`${NodeType.name}\\` at the end of the edge.`,\n                      \"field\"\n                    ),\n                    type: nullableIf(\n                      !pgForbidSetofFunctionsToReturnNull,\n                      NodeType\n                    ),\n                    resolve(data, _args, _context, resolveInfo) {\n                      const safeAlias =\n                        getSafeAliasFromResolveInfo(resolveInfo);\n                      return data[safeAlias];\n                    },\n                  },\n                  {},\n                  false\n                ),\n              };\n            },\n          },\n          {\n            __origin: `Adding function result edge type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isEdgeType: true,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n\n        /*const ConnectionType = */\n        newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.recordFunctionConnection(proc),\n            description: build.wrapDescription(\n              `A connection to a list of \\`${NodeType.name}\\` values.`,\n              \"type\"\n            ),\n            fields: ({ fieldWithHooks }) => {\n              return {\n                nodes: pgField(build, fieldWithHooks, \"nodes\", {\n                  description: build.wrapDescription(\n                    `A list of \\`${NodeType.name}\\` objects.`,\n                    \"field\"\n                  ),\n                  type: new GraphQLNonNull(\n                    new GraphQLList(\n                      nullableIf(!pgForbidSetofFunctionsToReturnNull, NodeType)\n                    )\n                  ),\n                  resolve(data, _args, _context, resolveInfo) {\n                    const safeAlias = getSafeAliasFromResolveInfo(resolveInfo);\n                    return data.data.map(entry => entry[safeAlias]);\n                  },\n                }),\n                edges: pgField(\n                  build,\n                  fieldWithHooks,\n                  \"edges\",\n                  {\n                    description: build.wrapDescription(\n                      `A list of edges which contains the \\`${NodeType.name}\\` and cursor to aid in pagination.`,\n                      \"field\"\n                    ),\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data, _args, _context, resolveInfo) {\n                      const safeAlias =\n                        getSafeAliasFromResolveInfo(resolveInfo);\n                      return data.data.map(entry => ({\n                        __cursor: entry.__cursor,\n                        ...entry[safeAlias],\n                      }));\n                    },\n                  },\n                  {},\n                  false,\n                  {\n                    hoistCursor: true,\n                  }\n                ),\n              };\n            },\n          },\n          {\n            __origin: `Adding function connection type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}`,\n            isConnectionType: true,\n            isPgRowConnectionType: true,\n            edgeType: EdgeType,\n            nodeType: NodeType,\n            pgIntrospection: proc,\n          }\n        );\n      });\n      return _;\n    },\n    [\"PgRecordFunctionConnection\"]\n  );\n}: Plugin);\n"],"mappings":"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"}