{"version":3,"file":"PgRecordReturnTypesPlugin.js","names":["PgRecordReturnTypesPlugin","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlTypeByTypeIdAndModifier","graphql","GraphQLObjectType","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","pgSql","sql","pgGetSelectValueForFieldAndTypeAndModifier","getSelectValueForFieldAndTypeAndModifier","getSafeAliasFromResolveInfo","getSafeAliasFromAlias","pg2gqlForType","procedure","forEach","proc","namespace","returnType","typeById","returnTypeId","id","argTypes","argTypeIds","reduce","prev","typeId","idx","argModes","length","push","argModesWithOutput","outputArgNames","includes","argNames","outputArgTypes","isMutation","isStable","firstArgType","computed","type","class","namespaceId","name","startsWith","procFieldName","functionMutationName","computedColumn","slice","functionQueryName","recordFunctionReturnType","description","wrapDescription","fields","fieldWithHooks","memo","outputArgName","fieldName","functionOutputFieldName","fieldType","Error","fieldContext","addDataGenerator","parsedResolveInfoFragment","safeAlias","alias","pgQuery","queryBuilder","select","fragment","getTableAlias","identifier","convertFromPg","resolve","data","_args","_context","resolveInfo","__origin","resultTypeName","isRecordReturnType","pgIntrospection","exports","default"],"sources":["../../src/plugins/PgRecordReturnTypesPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgRecordReturnTypesPlugin(builder) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgGetGqlTypeByTypeIdAndModifier,\n        graphql: { GraphQLObjectType },\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n        pgSql: sql,\n        pgGetSelectValueForFieldAndTypeAndModifier:\n          getSelectValueForFieldAndTypeAndModifier,\n        getSafeAliasFromResolveInfo,\n        getSafeAliasFromAlias,\n        pg2gqlForType,\n      } = build;\n\n      introspectionResultsByKind.procedure.forEach(proc => {\n        // PERFORMANCE: These used to be .filter(...) calls\n        if (!proc.namespace) return;\n        if (omit(proc, \"execute\")) return;\n\n        const returnType =\n          introspectionResultsByKind.typeById[proc.returnTypeId];\n        if (returnType.id !== \"2249\") {\n          return;\n        }\n        const argTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n          if (\n            proc.argModes.length === 0 || // all args are `in`\n            proc.argModes[idx] === \"i\" || // this arg is `in`\n            proc.argModes[idx] === \"b\" // this arg is `inout`\n          ) {\n            prev.push(introspectionResultsByKind.typeById[typeId]);\n          }\n          return prev;\n        }, []);\n        const argModesWithOutput = [\n          \"o\", // OUT,\n          \"b\", // INOUT\n          \"t\", // TABLE\n        ];\n        const outputArgNames = proc.argTypeIds.reduce((prev, _, idx) => {\n          if (argModesWithOutput.includes(proc.argModes[idx])) {\n            prev.push(proc.argNames[idx] || \"\");\n          }\n          return prev;\n        }, []);\n        const outputArgTypes = proc.argTypeIds.reduce((prev, typeId, idx) => {\n          if (argModesWithOutput.includes(proc.argModes[idx])) {\n            prev.push(introspectionResultsByKind.typeById[typeId]);\n          }\n          return prev;\n        }, []);\n        const isMutation = !proc.isStable;\n        const firstArgType = argTypes[0];\n        const computed =\n          firstArgType &&\n          firstArgType.type === \"c\" &&\n          firstArgType.class &&\n          firstArgType.namespaceId === proc.namespaceId &&\n          proc.name.startsWith(`${firstArgType.name}_`);\n        const procFieldName = isMutation\n          ? inflection.functionMutationName(proc)\n          : computed\n          ? inflection.computedColumn(\n              proc.name.slice(firstArgType.name.length + 1),\n              proc\n            )\n          : inflection.functionQueryName(proc);\n        newWithHooks(\n          GraphQLObjectType,\n          {\n            name: inflection.recordFunctionReturnType(proc),\n            description: build.wrapDescription(\n              `The return type of our \\`${procFieldName}\\` ${\n                isMutation ? \"mutation\" : \"query\"\n              }.`,\n              \"type\"\n            ),\n            fields: ({ fieldWithHooks }) => {\n              return outputArgNames.reduce((memo, outputArgName, idx) => {\n                const fieldName = inflection.functionOutputFieldName(\n                  proc,\n                  outputArgName,\n                  idx + 1\n                );\n                const fieldType = pgGetGqlTypeByTypeIdAndModifier(\n                  outputArgTypes[idx].id,\n                  null\n                );\n                if (memo[fieldName]) {\n                  throw new Error(\n                    `Tried to register field name '${fieldName}' twice in '${describePgEntity(\n                      proc\n                    )}'; the argument names are too similar.`\n                  );\n                }\n                memo[fieldName] = fieldWithHooks(\n                  fieldName,\n                  fieldContext => {\n                    const { addDataGenerator } = fieldContext;\n                    addDataGenerator(parsedResolveInfoFragment => {\n                      const safeAlias = getSafeAliasFromAlias(\n                        parsedResolveInfoFragment.alias\n                      );\n                      return {\n                        pgQuery: queryBuilder => {\n                          queryBuilder.select(\n                            getSelectValueForFieldAndTypeAndModifier(\n                              fieldType,\n                              fieldContext,\n                              parsedResolveInfoFragment,\n                              sql.fragment`(${queryBuilder.getTableAlias()}.${sql.identifier(\n                                // According to https://www.postgresql.org/docs/10/static/sql-createfunction.html,\n                                // \"If you omit the name for an output argument, the system will choose a default column name.\"\n                                // In PG 9.x and 10, the column names appear to be assigned with a `column` prefix.\n                                outputArgName !== \"\"\n                                  ? outputArgName\n                                  : `column${idx + 1}`\n                              )})`,\n                              outputArgTypes[idx],\n                              null\n                            ),\n                            safeAlias\n                          );\n                        },\n                      };\n                    });\n                    const convertFromPg = pg2gqlForType(outputArgTypes[idx]);\n                    return {\n                      type: fieldType,\n                      resolve(data, _args, _context, resolveInfo) {\n                        const safeAlias =\n                          getSafeAliasFromResolveInfo(resolveInfo);\n                        return convertFromPg(data[safeAlias]);\n                      },\n                    };\n                  },\n                  {}\n                );\n                return memo;\n              }, {});\n            },\n          },\n          {\n            __origin: `Adding record return type for ${describePgEntity(\n              proc\n            )}. You can rename the function's GraphQL field (and its dependent types) via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                name: \"newNameHere\",\n              }\n            )}\\n\\nYou can rename just the function's GraphQL result type via a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              proc,\n              {\n                resultTypeName: \"newNameHere\",\n              }\n            )}`,\n            isRecordReturnType: true,\n            pgIntrospection: proc,\n          }\n        );\n      });\n      return _;\n    },\n    [\"PgRecordReturnTypes\"]\n  );\n}: Plugin);\n"],"mappings":";;;;;;IAGyBA,yBAAyB,GAAlC,SAASA,yBAAyBA,CAACC,OAAO,EAAE;EAC1DA,OAAO,CAACC,IAAI,CACV,MAAM,EACN,CAACC,CAAC,EAAEC,KAAK,KAAK;IACZ,MAAM;MACJC,YAAY;MACZC,4BAA4B,EAAEC,0BAA0B;MACxDC,+BAA+B;MAC/BC,OAAO,EAAE;QAAEC;MAAkB,CAAC;MAC9BC,UAAU;MACVC,MAAM,EAAEC,IAAI;MACZC,gBAAgB;MAChBC,sBAAsB;MACtBC,KAAK,EAAEC,GAAG;MACVC,0CAA0C,EACxCC,wCAAwC;MAC1CC,2BAA2B;MAC3BC,qBAAqB;MACrBC;IACF,CAAC,GAAGlB,KAAK;IAETG,0BAA0B,CAACgB,SAAS,CAACC,OAAO,CAACC,IAAI,IAAI;MACnD;MACA,IAAI,CAACA,IAAI,CAACC,SAAS,EAAE;MACrB,IAAIb,IAAI,CAACY,IAAI,EAAE,SAAS,CAAC,EAAE;MAE3B,MAAME,UAAU,GACdpB,0BAA0B,CAACqB,QAAQ,CAACH,IAAI,CAACI,YAAY,CAAC;MACxD,IAAIF,UAAU,CAACG,EAAE,KAAK,MAAM,EAAE;QAC5B;MACF;MACA,MAAMC,QAAQ,GAAGN,IAAI,CAACO,UAAU,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,MAAM,EAAEC,GAAG,KAAK;QAC7D,IACEX,IAAI,CAACY,QAAQ,CAACC,MAAM,KAAK,CAAC;QAAI;QAC9Bb,IAAI,CAACY,QAAQ,CAACD,GAAG,CAAC,KAAK,GAAG;QAAI;QAC9BX,IAAI,CAACY,QAAQ,CAACD,GAAG,CAAC,KAAK,GAAG,CAAC;QAAA,EAC3B;UACAF,IAAI,CAACK,IAAI,CAAChC,0BAA0B,CAACqB,QAAQ,CAACO,MAAM,CAAC,CAAC;QACxD;QACA,OAAOD,IAAI;MACb,CAAC,EAAE,EAAE,CAAC;MACN,MAAMM,kBAAkB,GAAG,CACzB,GAAG;MAAE;MACL,GAAG;MAAE;MACL,GAAG,CAAE;MAAA,CACN;;MACD,MAAMC,cAAc,GAAGhB,IAAI,CAACO,UAAU,CAACC,MAAM,CAAC,CAACC,IAAI,EAAE/B,CAAC,EAAEiC,GAAG,KAAK;QAC9D,IAAII,kBAAkB,CAACE,QAAQ,CAACjB,IAAI,CAACY,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;UACnDF,IAAI,CAACK,IAAI,CAACd,IAAI,CAACkB,QAAQ,CAACP,GAAG,CAAC,IAAI,EAAE,CAAC;QACrC;QACA,OAAOF,IAAI;MACb,CAAC,EAAE,EAAE,CAAC;MACN,MAAMU,cAAc,GAAGnB,IAAI,CAACO,UAAU,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,MAAM,EAAEC,GAAG,KAAK;QACnE,IAAII,kBAAkB,CAACE,QAAQ,CAACjB,IAAI,CAACY,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;UACnDF,IAAI,CAACK,IAAI,CAAChC,0BAA0B,CAACqB,QAAQ,CAACO,MAAM,CAAC,CAAC;QACxD;QACA,OAAOD,IAAI;MACb,CAAC,EAAE,EAAE,CAAC;MACN,MAAMW,UAAU,GAAG,CAACpB,IAAI,CAACqB,QAAQ;MACjC,MAAMC,YAAY,GAAGhB,QAAQ,CAAC,CAAC,CAAC;MAChC,MAAMiB,QAAQ,GACZD,YAAY,IACZA,YAAY,CAACE,IAAI,KAAK,GAAG,IACzBF,YAAY,CAACG,KAAK,IAClBH,YAAY,CAACI,WAAW,KAAK1B,IAAI,CAAC0B,WAAW,IAC7C1B,IAAI,CAAC2B,IAAI,CAACC,UAAU,CAAE,GAAEN,YAAY,CAACK,IAAK,GAAE,CAAC;MAC/C,MAAME,aAAa,GAAGT,UAAU,GAC5BlC,UAAU,CAAC4C,oBAAoB,CAAC9B,IAAI,CAAC,GACrCuB,QAAQ,GACRrC,UAAU,CAAC6C,cAAc,CACvB/B,IAAI,CAAC2B,IAAI,CAACK,KAAK,CAACV,YAAY,CAACK,IAAI,CAACd,MAAM,GAAG,CAAC,CAAC,EAC7Cb,IACF,CAAC,GACDd,UAAU,CAAC+C,iBAAiB,CAACjC,IAAI,CAAC;MACtCpB,YAAY,CACVK,iBAAiB,EACjB;QACE0C,IAAI,EAAEzC,UAAU,CAACgD,wBAAwB,CAAClC,IAAI,CAAC;QAC/CmC,WAAW,EAAExD,KAAK,CAACyD,eAAe,CAC/B,4BAA2BP,aAAc,MACxCT,UAAU,GAAG,UAAU,GAAG,OAC3B,GAAE,EACH,MACF,CAAC;QACDiB,MAAM,EAAEA,CAAC;UAAEC;QAAe,CAAC,KAAK;UAC9B,OAAOtB,cAAc,CAACR,MAAM,CAAC,CAAC+B,IAAI,EAAEC,aAAa,EAAE7B,GAAG,KAAK;YACzD,MAAM8B,SAAS,GAAGvD,UAAU,CAACwD,uBAAuB,CAClD1C,IAAI,EACJwC,aAAa,EACb7B,GAAG,GAAG,CACR,CAAC;YACD,MAAMgC,SAAS,GAAG5D,+BAA+B,CAC/CoC,cAAc,CAACR,GAAG,CAAC,CAACN,EAAE,EACtB,IACF,CAAC;YACD,IAAIkC,IAAI,CAACE,SAAS,CAAC,EAAE;cACnB,MAAM,IAAIG,KAAK,CACZ,iCAAgCH,SAAU,eAAcpD,gBAAgB,CACvEW,IACF,CAAE,wCACJ,CAAC;YACH;YACAuC,IAAI,CAACE,SAAS,CAAC,GAAGH,cAAc,CAC9BG,SAAS,EACTI,YAAY,IAAI;cACd,MAAM;gBAAEC;cAAiB,CAAC,GAAGD,YAAY;cACzCC,gBAAgB,CAACC,yBAAyB,IAAI;gBAC5C,MAAMC,SAAS,GAAGpD,qBAAqB,CACrCmD,yBAAyB,CAACE,KAC5B,CAAC;gBACD,OAAO;kBACLC,OAAO,EAAEC,YAAY,IAAI;oBACvBA,YAAY,CAACC,MAAM,CACjB1D,wCAAwC,CACtCiD,SAAS,EACTE,YAAY,EACZE,yBAAyB,EACzBvD,GAAG,CAAC6D,QAAS,IAAGF,YAAY,CAACG,aAAa,CAAC,CAAE,IAAG9D,GAAG,CAAC+D,UAAU;oBAC5D;oBACA;oBACA;oBACAf,aAAa,KAAK,EAAE,GAChBA,aAAa,GACZ,SAAQ7B,GAAG,GAAG,CAAE,EACvB,CAAE,GAAE,EACJQ,cAAc,CAACR,GAAG,CAAC,EACnB,IACF,CAAC,EACDqC,SACF,CAAC;kBACH;gBACF,CAAC;cACH,CAAC,CAAC;cACF,MAAMQ,aAAa,GAAG3D,aAAa,CAACsB,cAAc,CAACR,GAAG,CAAC,CAAC;cACxD,OAAO;gBACLa,IAAI,EAAEmB,SAAS;gBACfc,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAE;kBAC1C,MAAMb,SAAS,GACbrD,2BAA2B,CAACkE,WAAW,CAAC;kBAC1C,OAAOL,aAAa,CAACE,IAAI,CAACV,SAAS,CAAC,CAAC;gBACvC;cACF,CAAC;YACH,CAAC,EACD,CAAC,CACH,CAAC;YACD,OAAOT,IAAI;UACb,CAAC,EAAE,CAAC,CAAC,CAAC;QACR;MACF,CAAC,EACD;QACEuB,QAAQ,EAAG,iCAAgCzE,gBAAgB,CACzDW,IACF,CAAE,uGAAsGV,sBAAsB,CAC5HU,IAAI,EACJ;UACE2B,IAAI,EAAE;QACR,CACF,CAAE,0FAAyFrC,sBAAsB,CAC/GU,IAAI,EACJ;UACE+D,cAAc,EAAE;QAClB,CACF,CAAE,EAAC;QACHC,kBAAkB,EAAE,IAAI;QACxBC,eAAe,EAAEjE;MACnB,CACF,CAAC;IACH,CAAC,CAAC;IACF,OAAOtB,CAAC;EACV,CAAC,EACD,CAAC,qBAAqB,CACxB,CAAC;AACH,CAAC;AAAAwF,OAAA,CAAAC,OAAA,GAAA5F,yBAAA"}