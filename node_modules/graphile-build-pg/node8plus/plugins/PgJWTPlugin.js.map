{"version":3,"file":"PgJWTPlugin.js","names":["_jsonwebtoken","require","PgJWTPlugin","builder","pgJwtTypeIdentifier","pgJwtSecret","pgJwtSignOptions","hook","_","build","newWithHooks","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","pgRegisterGqlTypeByTypeId","pg2GqlMapper","pgTweaksByTypeId","pgTweakFragmentForTypeAndModifier","graphql","GraphQLScalarType","inflection","pgParseIdentifier","parseIdentifier","describePgEntity","Error","namespaceName","entityName","typeName","compositeClass","class","find","table","isSelectable","isInsertable","isUpdatable","isDeletable","name","compositeType","type","id","attributes","compositeTypeName","tableType","cb","JWTType","description","wrapDescription","serialize","value","token","reduce","memo","attr","parseFloat","undefined","signJwt","Object","assign","aud","audience","iss","issuer","exp","expiresIn","__origin","isPgJwtType","map","values","some","v","unmap","fragment","join","literal","identifier","typeModifier","exports","default"],"sources":["../../src/plugins/PgJWTPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport { sign as signJwt } from \"jsonwebtoken\";\n\nexport default (function PgJWTPlugin(\n  builder,\n  { pgJwtTypeIdentifier, pgJwtSecret, pgJwtSignOptions }\n) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgRegisterGqlTypeByTypeId,\n        pg2GqlMapper,\n        pgTweaksByTypeId,\n        pgTweakFragmentForTypeAndModifier,\n        graphql: { GraphQLScalarType },\n        inflection,\n        pgParseIdentifier: parseIdentifier,\n        describePgEntity,\n      } = build;\n\n      if (!pgJwtTypeIdentifier) {\n        return _;\n      }\n      if (!pgJwtSecret) {\n        throw new Error(\n          \"pgJwtTypeIdentifier was specified without pgJwtSecret\"\n        );\n      }\n      const { namespaceName, entityName: typeName } =\n        parseIdentifier(pgJwtTypeIdentifier);\n\n      const compositeClass = introspectionResultsByKind.class.find(\n        table =>\n          !table.isSelectable &&\n          !table.isInsertable &&\n          !table.isUpdatable &&\n          !table.isDeletable &&\n          table.name === typeName &&\n          table.namespaceName === namespaceName\n      );\n      if (!compositeClass) {\n        throw new Error(\n          `Could not find JWT type '\"${namespaceName}\".\"${typeName}\"'`\n        );\n      }\n      const compositeType = compositeClass.type;\n      if (!compositeType) {\n        throw new Error(\"Could not determine the type for JWT type\");\n      }\n      if (pg2GqlMapper[compositeType.id]) {\n        throw new Error(\"JWT type has already been overridden?\");\n      }\n      const attributes = compositeClass.attributes;\n\n      const compositeTypeName = inflection.tableType(compositeClass);\n\n      // NOTE: we deliberately do not create an input type\n      pgRegisterGqlTypeByTypeId(compositeType.id, cb => {\n        const JWTType = newWithHooks(\n          GraphQLScalarType,\n          {\n            name: compositeTypeName,\n            description: build.wrapDescription(\n              \"A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519) which securely represents claims between two parties.\",\n              \"type\"\n            ),\n            serialize(value) {\n              const token = attributes.reduce((memo, attr) => {\n                if (attr.name === \"exp\") {\n                  memo[attr.name] = value[attr.name]\n                    ? parseFloat(value[attr.name])\n                    : undefined;\n                } else {\n                  memo[attr.name] = value[attr.name];\n                }\n                return memo;\n              }, {});\n              return signJwt(\n                token,\n                pgJwtSecret,\n                Object.assign(\n                  {},\n                  pgJwtSignOptions,\n                  token.aud || (pgJwtSignOptions && pgJwtSignOptions.audience)\n                    ? null\n                    : {\n                        audience: \"postgraphile\",\n                      },\n                  token.iss || (pgJwtSignOptions && pgJwtSignOptions.issuer)\n                    ? null\n                    : {\n                        issuer: \"postgraphile\",\n                      },\n                  token.exp || (pgJwtSignOptions && pgJwtSignOptions.expiresIn)\n                    ? null\n                    : {\n                        expiresIn: \"1 day\",\n                      }\n                )\n              );\n            },\n          },\n          {\n            __origin: `Adding JWT type based on ${describePgEntity(\n              compositeType\n            )}`,\n            isPgJwtType: true,\n          }\n        );\n        cb(JWTType);\n\n        pg2GqlMapper[compositeType.id] = {\n          map: value => {\n            if (!value) return null;\n            const values = Object.values(value);\n            if (values.some(v => v != null)) {\n              return value;\n            }\n            return null;\n          },\n          unmap: () => {\n            throw new Error(\n              \"We don't support passing a JWT token into GraphQL currently\"\n            );\n          },\n        };\n\n        pgTweaksByTypeId[compositeType.id] = fragment =>\n          sql.fragment`json_build_object(${sql.join(\n            compositeClass.attributes.map(\n              attr =>\n                sql.fragment`${sql.literal(\n                  attr.name\n                )}::text, ${pgTweakFragmentForTypeAndModifier(\n                  sql.fragment`(${fragment}).${sql.identifier(attr.name)}`,\n                  attr.type,\n                  attr.typeModifier,\n                  {}\n                )}`\n            ),\n            \", \"\n          )})`;\n      });\n      return _;\n    },\n    [\"PgJWT\"],\n    [],\n    [\"PgIntrospection\"]\n  );\n}: Plugin);\n"],"mappings":"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"}