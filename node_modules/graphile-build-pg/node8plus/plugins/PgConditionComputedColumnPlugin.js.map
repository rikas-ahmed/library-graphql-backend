{"version":3,"file":"PgConditionComputedColumnPlugin.js","names":["_PgComputedColumnsPlugin","require","_assert","_interopRequireDefault","obj","__esModule","default","getCompatibleComputedColumns","build","table","pgIntrospectionResultsByKind","introspectionResultsByKind","pgOmit","omit","procedure","reduce","memo","proc","tags","filterable","computedColumnDetails","getComputedColumnDetails","pseudoColumnName","nonOptionalArgumentsCount","inputArgsCount","argDefaultsNum","returnsSet","returnType","typeById","returnTypeId","isPgArray","returnTypeTable","classById","classId","isRecordLike","id","isVoid","String","push","PgConditionComputedColumnPlugin","builder","hook","fields","context","extend","pgGetGqlInputTypeByTypeIdAndModifier","inflection","describePgEntity","scope","isPgCondition","pgIntrospection","fieldWithHooks","kind","compatibleComputedColumns","fieldName","computedColumn","Type","description","wrapDescription","type","isPgConnectionConditionInputField","pgFieldIntrospection","args","pgSql","sql","gql2pg","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","graphql","getNullableType","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospectionTable","addArgDataGenerator","shouldAddCondition","condition","namespace","TableType","TableConditionType","conditionType","name","assert","map","o","sqlFnName","identifier","namespaceName","connectionCondition","pgQuery","queryBuilder","forEach","val","sqlCall","fragment","getTableAlias","where","exports"],"sources":["../../src/plugins/PgConditionComputedColumnPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport { getComputedColumnDetails } from \"./PgComputedColumnsPlugin\";\nimport assert from \"assert\";\nfunction getCompatibleComputedColumns(build, table) {\n  const {\n    pgIntrospectionResultsByKind: introspectionResultsByKind,\n    pgOmit: omit,\n  } = build;\n  return introspectionResultsByKind.procedure.reduce((memo, proc) => {\n    /* ALSO SEE PgOrderComputedColumnsPlugin */\n    // Must be marked @filterable\n    if (!proc.tags.filterable) return memo;\n\n    // Must not be omitted\n    if (omit(proc, \"execute\")) return memo;\n\n    // Must be a computed column\n    const computedColumnDetails = getComputedColumnDetails(build, table, proc);\n    if (!computedColumnDetails) return memo;\n    const { pseudoColumnName } = computedColumnDetails;\n\n    // Must have only one required argument\n    const nonOptionalArgumentsCount = proc.inputArgsCount - proc.argDefaultsNum;\n    if (nonOptionalArgumentsCount > 1) {\n      return memo;\n    }\n\n    // Must return a scalar\n    if (proc.returnsSet) return memo;\n    const returnType = introspectionResultsByKind.typeById[proc.returnTypeId];\n    if (returnType.isPgArray) return memo;\n    const returnTypeTable =\n      introspectionResultsByKind.classById[returnType.classId];\n    if (returnTypeTable) return memo;\n    const isRecordLike = returnType.id === \"2249\";\n    if (isRecordLike) return memo;\n    const isVoid = String(returnType.id) === \"2278\";\n    if (isVoid) return memo;\n\n    // Looks good\n    memo.push({ proc, pseudoColumnName, returnType });\n    return memo;\n  }, []);\n}\n\nexport default (function PgConditionComputedColumnPlugin(builder) {\n  builder.hook(\n    \"GraphQLInputObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        inflection,\n        describePgEntity,\n      } = build;\n      const {\n        scope: { isPgCondition, pgIntrospection: table },\n        fieldWithHooks,\n      } = context;\n      if (!isPgCondition || !table || table.kind !== \"class\") {\n        return fields;\n      }\n      const compatibleComputedColumns = getCompatibleComputedColumns(\n        build,\n        table\n      );\n      return extend(\n        fields,\n        compatibleComputedColumns.reduce((memo, { proc, pseudoColumnName }) => {\n          const fieldName = inflection.computedColumn(\n            pseudoColumnName,\n            proc,\n            table\n          );\n          const Type = pgGetGqlInputTypeByTypeIdAndModifier(\n            proc.returnTypeId,\n            null\n          );\n          if (!Type) return memo;\n          memo = build.extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                {\n                  description: build.wrapDescription(\n                    `Checks for equality with the objectâ€™s \\`${fieldName}\\` field.`,\n                    \"field\"\n                  ),\n                  type: Type,\n                },\n                {\n                  isPgConnectionConditionInputField: true,\n                  pgFieldIntrospection: proc,\n                }\n              ),\n            },\n            `Adding computed column condition argument for ${describePgEntity(\n              proc\n            )}`\n          );\n          return memo;\n        }, {})\n      );\n    },\n    [\"PgConditionComputedColumn\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        pgSql: sql,\n        gql2pg,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        inflection,\n        pgOmit: omit,\n        graphql: { getNullableType },\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection,\n          pgFieldIntrospectionTable,\n        },\n        addArgDataGenerator,\n      } = context;\n\n      const shouldAddCondition =\n        isPgFieldConnection || isPgFieldSimpleCollection;\n      if (!shouldAddCondition) return args;\n      if (!args.condition) {\n        return args;\n      }\n      const proc =\n        pgFieldIntrospection.kind === \"procedure\" ? pgFieldIntrospection : null;\n      const table =\n        pgFieldIntrospection.kind === \"class\"\n          ? pgFieldIntrospection\n          : proc\n          ? pgFieldIntrospectionTable\n          : null;\n      if (\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        omit(table, \"filter\")\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const TableConditionType = getTypeByName(\n        inflection.conditionType(TableType.name)\n      );\n      if (!TableConditionType) {\n        return args;\n      }\n      assert(\n        getNullableType(args.condition.type) === TableConditionType,\n        \"Condition is present, but doesn't match?\"\n      );\n\n      const compatibleComputedColumns = getCompatibleComputedColumns(\n        build,\n        table\n      ).map(o => {\n        const { proc, pseudoColumnName } = o;\n\n        const fieldName = inflection.computedColumn(\n          pseudoColumnName,\n          proc,\n          table\n        );\n        const sqlFnName = sql.identifier(proc.namespaceName, proc.name);\n        return {\n          ...o,\n          fieldName,\n          sqlFnName,\n        };\n      });\n      addArgDataGenerator(function connectionCondition({ condition }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (condition != null) {\n              compatibleComputedColumns.forEach(\n                ({ fieldName, sqlFnName, returnType }) => {\n                  const val = condition[fieldName];\n                  const sqlCall = sql.fragment`${sqlFnName}(${queryBuilder.getTableAlias()})`;\n                  if (val != null) {\n                    queryBuilder.where(\n                      sql.fragment`${sqlCall} = ${gql2pg(\n                        val,\n                        returnType,\n                        null\n                      )}`\n                    );\n                  } else if (val === null) {\n                    queryBuilder.where(sql.fragment`${sqlCall} IS NULL`);\n                  }\n                }\n              );\n            }\n          },\n        };\n      });\n\n      return args;\n    },\n    [\"PgConditionComputedColumn\"]\n  );\n}: Plugin);\n"],"mappings":"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"}