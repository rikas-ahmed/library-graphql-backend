{"version":3,"file":"PgColumnsPlugin.js","names":["nullableIf","GraphQLNonNull","condition","Type","PgColumnsPlugin","builder","hook","build","pgSql","sql","pgTweakFragmentForTypeAndModifier","pgQueryFromResolveData","queryFromResolveData","getSelectValueForFieldAndTypeAndModifier","ReturnType","fieldScope","parsedResolveInfoFragment","sqlFullName","type","typeModifier","getDataFromParsedResolveInfoFragment","isPgArray","ident","identifier","Symbol","fragment","arrayItemType","resolveData","isDefinitelyNotATable","class","isSelectable","jsonBuildObject","onlyJsonField","addNullCase","addNotDistinctFromNullCase","extend","pgGetSelectValueForFieldAndTypeAndModifier","fields","context","pgGetGqlTypeByTypeIdAndModifier","pg2gqlForType","graphql","GraphQLString","pgColumnFilter","inflection","pgOmit","omit","describePgEntity","sqlCommentByAddingTags","scope","isPgRowType","isPgCompoundType","pgIntrospection","table","fieldWithHooks","kind","attributes","reduce","memo","attr","fieldName","column","Error","namespaceName","name","fieldContext","sqlColumn","addDataGenerator","typeId","pgQuery","queryBuilder","select","getTableAlias","convertFromPg","description","isNotNull","domainIsNotNull","tags","notNull","resolve","data","_args","_context","_resolveInfo","pgFieldIntrospection","pgGetGqlInputTypeByTypeIdAndModifier","isPgPatch","isPgBaseInput","pgAddSubfield","action","identity","domainHasDefault","hasDefault","exports","default"],"sources":["../../src/plugins/PgColumnsPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst nullableIf = (GraphQLNonNull, condition, Type) =>\n  condition ? Type : new GraphQLNonNull(Type);\n\nexport default (function PgColumnsPlugin(builder) {\n  builder.hook(\n    \"build\",\n    build => {\n      const {\n        pgSql: sql,\n        pgTweakFragmentForTypeAndModifier,\n        pgQueryFromResolveData: queryFromResolveData,\n      } = build;\n      const getSelectValueForFieldAndTypeAndModifier = (\n        ReturnType,\n        fieldScope,\n        parsedResolveInfoFragment,\n        sqlFullName,\n        type,\n        typeModifier\n      ) => {\n        const { getDataFromParsedResolveInfoFragment } = fieldScope;\n        if (type.isPgArray) {\n          const ident = sql.identifier(Symbol());\n          return sql.fragment`(\\\ncase\nwhen ${sqlFullName} is null then null\nwhen coalesce(array_length(${sqlFullName}, 1), 0) = 0 then '[]'::json\nelse (\n  select json_agg(${getSelectValueForFieldAndTypeAndModifier(\n    ReturnType,\n    fieldScope,\n    parsedResolveInfoFragment,\n    ident,\n    type.arrayItemType,\n    typeModifier\n  )}) from unnest(${sqlFullName}) as ${ident}\n)\nend\n)`;\n        } else {\n          const resolveData = getDataFromParsedResolveInfoFragment(\n            parsedResolveInfoFragment,\n            ReturnType\n          );\n          if (type.type === \"c\") {\n            const isDefinitelyNotATable =\n              type.class && !type.class.isSelectable;\n            const jsonBuildObject = queryFromResolveData(\n              sql.identifier(Symbol()), // Ignore!\n              sqlFullName,\n              resolveData,\n              {\n                onlyJsonField: true,\n                addNullCase: !isDefinitelyNotATable,\n                addNotDistinctFromNullCase: isDefinitelyNotATable,\n              }\n            );\n            return jsonBuildObject;\n          } else {\n            return pgTweakFragmentForTypeAndModifier(\n              sqlFullName,\n              type,\n              typeModifier,\n              resolveData\n            );\n          }\n        }\n      };\n      return build.extend(build, {\n        pgGetSelectValueForFieldAndTypeAndModifier:\n          getSelectValueForFieldAndTypeAndModifier,\n      });\n    },\n    [\"PgColumns\"],\n    [],\n    [\"PgTypes\"]\n  );\n\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgSql: sql,\n        pg2gqlForType,\n        graphql: { GraphQLString, GraphQLNonNull },\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n        pgGetSelectValueForFieldAndTypeAndModifier:\n          getSelectValueForFieldAndTypeAndModifier,\n        describePgEntity,\n        sqlCommentByAddingTags,\n      } = build;\n      const {\n        scope: { isPgRowType, isPgCompoundType, pgIntrospection: table },\n        fieldWithHooks,\n      } = context;\n\n      if (\n        !(isPgRowType || isPgCompoundType) ||\n        !table ||\n        table.kind !== \"class\"\n      ) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        table.attributes.reduce((memo, attr) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!pgColumnFilter(attr, build, context)) return memo;\n          if (omit(attr, \"read\")) return memo;\n\n          const fieldName = inflection.column(attr);\n          if (memo[fieldName]) {\n            throw new Error(\n              `Two columns produce the same GraphQL field name '${fieldName}' on class '${table.namespaceName}.${table.name}'; one of them is '${attr.name}'`\n            );\n          }\n          memo = extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                fieldContext => {\n                  const { type, typeModifier } = attr;\n                  const sqlColumn = sql.identifier(attr.name);\n                  const { addDataGenerator } = fieldContext;\n                  const ReturnType =\n                    pgGetGqlTypeByTypeIdAndModifier(\n                      attr.typeId,\n                      attr.typeModifier\n                    ) || GraphQLString;\n                  addDataGenerator(parsedResolveInfoFragment => {\n                    return {\n                      pgQuery: queryBuilder => {\n                        queryBuilder.select(\n                          getSelectValueForFieldAndTypeAndModifier(\n                            ReturnType,\n                            fieldContext,\n                            parsedResolveInfoFragment,\n                            sql.fragment`(${queryBuilder.getTableAlias()}.${sqlColumn})`, // The brackets are necessary to stop the parser getting confused, ref: https://www.postgresql.org/docs/9.6/static/rowtypes.html#ROWTYPES-ACCESSING\n                            type,\n                            typeModifier\n                          ),\n                          fieldName\n                        );\n                      },\n                    };\n                  });\n                  const convertFromPg = pg2gqlForType(type);\n                  return {\n                    description: attr.description,\n                    type: nullableIf(\n                      GraphQLNonNull,\n                      !attr.isNotNull &&\n                        !attr.type.domainIsNotNull &&\n                        !attr.tags.notNull,\n                      ReturnType\n                    ),\n                    resolve: (data, _args, _context, _resolveInfo) => {\n                      return convertFromPg(data[fieldName]);\n                    },\n                  };\n                },\n                { pgFieldIntrospection: attr }\n              ),\n            },\n            `Adding field for ${describePgEntity(\n              attr\n            )}. You can rename this field with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              attr,\n              {\n                name: \"newNameHere\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n        `Adding columns to '${describePgEntity(table)}'`\n      );\n    },\n    [\"PgColumns\"]\n  );\n  builder.hook(\n    \"GraphQLInputObjectType:fields\",\n    (fields, build, context) => {\n      const {\n        extend,\n        pgGetGqlInputTypeByTypeIdAndModifier,\n        graphql: { GraphQLString, GraphQLNonNull },\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n        describePgEntity,\n        sqlCommentByAddingTags,\n      } = build;\n      const {\n        scope: {\n          isPgRowType,\n          isPgCompoundType,\n          isPgPatch,\n          isPgBaseInput,\n          pgIntrospection: table,\n          pgAddSubfield,\n        },\n        fieldWithHooks,\n      } = context;\n      if (\n        !(isPgRowType || isPgCompoundType) ||\n        !table ||\n        table.kind !== \"class\"\n      ) {\n        return fields;\n      }\n      return extend(\n        fields,\n        table.attributes.reduce((memo, attr) => {\n          // PERFORMANCE: These used to be .filter(...) calls\n          if (!pgColumnFilter(attr, build, context)) return memo;\n          const action = isPgBaseInput\n            ? \"base\"\n            : isPgPatch\n            ? \"update\"\n            : \"create\";\n          if (omit(attr, action)) return memo;\n          if (attr.identity === \"a\") return memo;\n\n          const fieldName = inflection.column(attr);\n          if (memo[fieldName]) {\n            throw new Error(\n              `Two columns produce the same GraphQL field name '${fieldName}' on input class '${table.namespaceName}.${table.name}'; one of them is '${attr.name}'`\n            );\n          }\n          memo = extend(\n            memo,\n            {\n              [fieldName]: fieldWithHooks(\n                fieldName,\n                pgAddSubfield(\n                  fieldName,\n                  attr.name,\n                  attr.type,\n                  {\n                    description: attr.description,\n                    type: nullableIf(\n                      GraphQLNonNull,\n                      isPgBaseInput ||\n                        isPgPatch ||\n                        (!attr.isNotNull &&\n                          (!attr.type.domainIsNotNull ||\n                            attr.type.domainHasDefault) &&\n                          !attr.tags.notNull) ||\n                        attr.hasDefault ||\n                        attr.tags.hasDefault ||\n                        attr.identity === \"d\",\n                      pgGetGqlInputTypeByTypeIdAndModifier(\n                        attr.typeId,\n                        attr.typeModifier\n                      ) || GraphQLString\n                    ),\n                  },\n                  attr.typeModifier\n                ),\n                { pgFieldIntrospection: attr }\n              ),\n            },\n            `Adding input object field for ${describePgEntity(\n              attr\n            )}. You can rename this field with a 'Smart Comment':\\n\\n  ${sqlCommentByAddingTags(\n              attr,\n              {\n                name: \"newNameHere\",\n              }\n            )}`\n          );\n          return memo;\n        }, {}),\n        `Adding columns to input object for ${describePgEntity(table)}`\n      );\n    },\n    [\"PgColumns\"]\n  );\n}: Plugin);\n"],"mappings":"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"}