{"version":3,"file":"omit.js","names":["CREATE","exports","READ","UPDATE","DELETE","FILTER","ORDER","ALL","MANY","EXECUTE","BASE","aliases","C","R","U","D","F","O","A","M","X","B","PERMISSIONS_THAT_REQUIRE_READ","parse","arrOrNot","errorPrefix","arr","Array","isArray","all","arrayNormalized","concat","map","str","perms","slice","split","p","bad","find","Error","omit","entity","permission","tags","omitSpecRaw","includeSpecRaw","kind","name","omitSpec","includeSpec","indexOf","filter","length","join"],"sources":["../src/omit.js"],"sourcesContent":["// @flow\n\nimport type {\n  PgProc,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n} from \"./plugins/PgIntrospectionPlugin\";\n\n/*\n * Please only use capitals for aliases and lower case for the values.\n */\nexport const CREATE = \"create\";\nexport const READ = \"read\";\nexport const UPDATE = \"update\";\nexport const DELETE = \"delete\";\nexport const FILTER = \"filter\";\nexport const ORDER = \"order\";\nexport const ALL = \"all\";\nexport const MANY = \"many\";\nexport const EXECUTE = \"execute\";\nexport const BASE = \"base\";\n\nconst aliases = {\n  C: CREATE,\n  R: READ,\n  U: UPDATE,\n  D: DELETE,\n  F: FILTER,\n  O: ORDER,\n  A: ALL,\n  M: MANY,\n  X: EXECUTE,\n  B: BASE,\n};\n\nconst PERMISSIONS_THAT_REQUIRE_READ = [UPDATE, CREATE, DELETE, ALL, MANY];\n\nfunction parse(arrOrNot, errorPrefix = \"Error\") {\n  if (!arrOrNot) {\n    return null;\n  }\n  const arr = Array.isArray(arrOrNot) ? arrOrNot : [arrOrNot];\n  let all = false;\n  const arrayNormalized = [].concat(\n    ...arr.map(str => {\n      if (str === true || str === \"*\") {\n        all = true;\n        return [];\n      }\n      if (str[0] === \":\") {\n        const perms = str\n          .slice(1)\n          .split(\"\")\n          .map(p => aliases[p]);\n        const bad = perms.find(p => !p);\n        if (bad) {\n          throw new Error(\n            `${errorPrefix} - abbreviated parameter '${bad}' not understood`\n          );\n        }\n        return perms;\n      } else {\n        const perms = str.split(\",\");\n        // TODO: warning if not in list?\n        return perms;\n      }\n    })\n  );\n  if (all) {\n    return true;\n  }\n  return arrayNormalized;\n}\n\nexport default function omit(\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) {\n  const tags = entity.tags;\n  const omitSpecRaw = tags.omit;\n\n  // '@include' is not being released yet because it would mean every new\n  // filter we added would become a breaking change for people using @include.\n  const includeSpecRaw = null;\n  // const includeSpecRaw = tags.include;\n\n  if (omitSpecRaw && includeSpecRaw) {\n    throw new Error(\n      `Error when processing instructions for ${entity.kind} '${entity.name}' - you must only specify @omit or @include, not both`\n    );\n  }\n  const omitSpec = parse(\n    omitSpecRaw,\n    `Error when processing @omit instructions for ${entity.kind} '${entity.name}'`\n  );\n  const includeSpec = parse(\n    includeSpecRaw,\n    `Error when processing @include instructions for ${entity.kind} '${entity.name}'`\n  );\n\n  if (omitSpec) {\n    if (omitSpec === true) {\n      return true;\n    }\n    if (omitSpec.indexOf(READ) >= 0) {\n      const bad = PERMISSIONS_THAT_REQUIRE_READ.filter(\n        p => omitSpec.indexOf(p) === -1\n      );\n      if (bad.length > 0) {\n        throw new Error(\n          `Processing @omit for ${entity.kind} '${entity.name}' - '${bad.join(\n            \",\"\n          )}' must be omitted when '${READ}' is omitted. Add '${bad.join(\n            \",\"\n          )}' to the @omit clause, or use '@omit' to omit all actions.`\n        );\n      }\n    }\n    return omitSpec.indexOf(permission) >= 0;\n  } else if (includeSpec) {\n    if (includeSpec === true) {\n      throw new Error(\n        `Error when processing instructions for ${entity.kind} '${entity.name}' - @include should specify a list of actions`\n      );\n    }\n    if (includeSpec.indexOf(READ) === -1) {\n      const bad = PERMISSIONS_THAT_REQUIRE_READ.find(\n        p => includeSpec.indexOf(p) >= 0\n      );\n      if (bad) {\n        throw new Error(\n          `Error when processing @include for ${entity.kind} '${entity.name}' - we currently don't support '${bad}' when '${READ}' is forbidden`\n        );\n      }\n    }\n    return includeSpec.indexOf(permission) === -1;\n  } else {\n    return false;\n  }\n}\n"],"mappings":"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"}