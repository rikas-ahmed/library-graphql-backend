{"version":3,"file":"pgPrepareAndRun.js","names":["_crypto","require","_lru","_interopRequireDefault","obj","__esModule","default","cacheSizeFromEnv","parseInt","process","env","POSTGRAPHILE_PREPARED_STATEMENT_CACHE_SIZE","lastString","lastHash","hash","str","createHash","update","digest","pgPrepareAndRun","pgClient","text","values","connection","parsedStatements","query","name","_graphilePreparedStatementCache","LRU","maxLength","dispose","key","escapeIdentifier","then","catch","e","console","error","get","set"],"sources":["../src/pgPrepareAndRun.js"],"sourcesContent":["//@flow\nimport { createHash } from \"crypto\";\nimport LRU from \"@graphile/lru\";\nimport type { PoolClient } from \"pg\";\n\nconst cacheSizeFromEnv = parseInt(\n  process.env.POSTGRAPHILE_PREPARED_STATEMENT_CACHE_SIZE,\n  10\n);\nconst POSTGRAPHILE_PREPARED_STATEMENT_CACHE_SIZE =\n  !!cacheSizeFromEnv || cacheSizeFromEnv === 0 ? cacheSizeFromEnv : 100;\n\nlet lastString: string;\nlet lastHash: string;\nconst hash = (str: string): string => {\n  if (str !== lastString) {\n    lastString = str;\n    lastHash = createHash(\"sha1\").update(str).digest(\"base64\");\n  }\n  return lastHash;\n};\n\nexport default function pgPrepareAndRun(\n  pgClient: PoolClient,\n  text: string,\n  // eslint-disable-next-line flowtype/no-weak-types\n  values: any\n) {\n  const connection = pgClient.connection;\n  if (\n    !values ||\n    POSTGRAPHILE_PREPARED_STATEMENT_CACHE_SIZE < 2 ||\n    !connection ||\n    !connection.parsedStatements\n  ) {\n    return pgClient.query(text, values);\n  } else {\n    const name = hash(text);\n    if (!connection._graphilePreparedStatementCache) {\n      connection._graphilePreparedStatementCache = new LRU({\n        maxLength: POSTGRAPHILE_PREPARED_STATEMENT_CACHE_SIZE,\n        dispose(key) {\n          if (connection.parsedStatements[key]) {\n            pgClient\n              .query(`deallocate ${pgClient.escapeIdentifier(key)}`)\n              .then(() => {\n                delete connection.parsedStatements[key];\n              })\n              .catch(e => {\n                // eslint-disable-next-line no-console\n                console.error(\"Error releasing prepared query\", e);\n              });\n          }\n        },\n      });\n    }\n    if (!connection._graphilePreparedStatementCache.get(name)) {\n      // We're relying on dispose to clear out the old ones.\n      connection._graphilePreparedStatementCache.set(name, true);\n    }\n    return pgClient.query({\n      name,\n      text,\n      values,\n    });\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,IAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAgC,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAGhC,MAAMG,gBAAgB,GAAGC,QAAQ,CAC/BC,OAAO,CAACC,GAAG,CAACC,0CAA0C,EACtD,EACF,CAAC;AACD,MAAMA,0CAA0C,GAC9C,CAAC,CAACJ,gBAAgB,IAAIA,gBAAgB,KAAK,CAAC,GAAGA,gBAAgB,GAAG,GAAG;AAEvE,IAAIK,UAAkB;AACtB,IAAIC,QAAgB;AACpB,MAAMC,IAAI,GAAIC,GAAW,IAAa;EACpC,IAAIA,GAAG,KAAKH,UAAU,EAAE;IACtBA,UAAU,GAAGG,GAAG;IAChBF,QAAQ,GAAG,IAAAG,kBAAU,EAAC,MAAM,CAAC,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,QAAQ,CAAC;EAC5D;EACA,OAAOL,QAAQ;AACjB,CAAC;AAEc,SAASM,eAAeA,CACrCC,QAAoB,EACpBC,IAAY;AACZ;AACAC,MAAW,EACX;EACA,MAAMC,UAAU,GAAGH,QAAQ,CAACG,UAAU;EACtC,IACE,CAACD,MAAM,IACPX,0CAA0C,GAAG,CAAC,IAC9C,CAACY,UAAU,IACX,CAACA,UAAU,CAACC,gBAAgB,EAC5B;IACA,OAAOJ,QAAQ,CAACK,KAAK,CAACJ,IAAI,EAAEC,MAAM,CAAC;EACrC,CAAC,MAAM;IACL,MAAMI,IAAI,GAAGZ,IAAI,CAACO,IAAI,CAAC;IACvB,IAAI,CAACE,UAAU,CAACI,+BAA+B,EAAE;MAC/CJ,UAAU,CAACI,+BAA+B,GAAG,IAAIC,YAAG,CAAC;QACnDC,SAAS,EAAElB,0CAA0C;QACrDmB,OAAOA,CAACC,GAAG,EAAE;UACX,IAAIR,UAAU,CAACC,gBAAgB,CAACO,GAAG,CAAC,EAAE;YACpCX,QAAQ,CACLK,KAAK,CAAE,cAAaL,QAAQ,CAACY,gBAAgB,CAACD,GAAG,CAAE,EAAC,CAAC,CACrDE,IAAI,CAAC,MAAM;cACV,OAAOV,UAAU,CAACC,gBAAgB,CAACO,GAAG,CAAC;YACzC,CAAC,CAAC,CACDG,KAAK,CAACC,CAAC,IAAI;cACV;cACAC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,CAAC,CAAC;YACpD,CAAC,CAAC;UACN;QACF;MACF,CAAC,CAAC;IACJ;IACA,IAAI,CAACZ,UAAU,CAACI,+BAA+B,CAACW,GAAG,CAACZ,IAAI,CAAC,EAAE;MACzD;MACAH,UAAU,CAACI,+BAA+B,CAACY,GAAG,CAACb,IAAI,EAAE,IAAI,CAAC;IAC5D;IACA,OAAON,QAAQ,CAACK,KAAK,CAAC;MACpBC,IAAI;MACJL,IAAI;MACJC;IACF,CAAC,CAAC;EACJ;AACF"}