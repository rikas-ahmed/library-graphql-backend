{"version":3,"file":"inflections.js","names":["_graphileBuild","require","_PgBasicsPlugin","outputMessages","deprecate","fn","message","args","indexOf","push","console","warn","Error","apply","deprecateEverything","obj","Object","keys","reduce","memo","key","defaultUtils","constantCase","camelCase","upperCamelCase","pluralize","singularize","exports","newInflector","overrides","undefined","singularizeTable","tableName","replace","preventEmptyResult","argument","name","index","orderByType","typeName","orderByEnum","ascending","_table","_schema","domainType","enumName","inValue","value","_","$","enumType","conditionType","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","tableNode","allRows","schema","functionName","functionPayloadType","functionInputType","tableType","column","singleRelationByKeys","detailedKeys","table","map","join","rowByUniqueKeys","updateByKeys","deleteByKeys","updateNode","deleteNode","updateByKeysInputType","deleteByKeysInputType","updateNodeInputType","deleteNodeInputType","manyRelationByKeys","_foreignTable","_foreignSchema","edge","edgeField","connection","scalarFunctionConnection","procName","_procSchema","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","defaultInflection"],"sources":["../src/inflections.js"],"sourcesContent":["/* THIS ENTIRE FILE IS DEPRECATED. DO NOT USE THIS. DO NOT EDIT THIS. */\n// @flow\nimport {\n  upperCamelCase,\n  camelCase,\n  constantCase,\n  pluralize,\n  singularize,\n} from \"graphile-build\";\n\nimport { preventEmptyResult } from \"./plugins/PgBasicsPlugin\";\n\nconst outputMessages = [];\n\n// eslint-disable-next-line flowtype/no-weak-types\nfunction deprecate(fn: (...input: Array<any>) => string, message: string) {\n  if (typeof fn !== \"function\") {\n    return fn;\n  }\n  return function (...args) {\n    if (outputMessages.indexOf(message) === -1) {\n      outputMessages.push(message);\n      // eslint-disable-next-line no-console\n      console.warn(new Error(message));\n    }\n    return fn.apply(this, args);\n  };\n}\n\nfunction deprecateEverything(obj: {\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n}) {\n  return Object.keys(obj).reduce((memo, key) => {\n    memo[key] = deprecate(\n      obj[key],\n      `Something (probably a plugin) called the old inflection system (inflector: '${key}'). This system has been deprecated since 4.0.0-beta.6 (4th May 2018) and is not used internally so using it may cause inconsistencies, instead please use the plugin-capable inflection system https://www.graphile.org/postgraphile/inflection/`\n    );\n    return memo;\n  }, {});\n}\n\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\ntype InflectorUtils = {|\n  constantCase: string => string,\n  camelCase: string => string,\n  upperCamelCase: string => string,\n  pluralize: string => string,\n  singularize: string => string,\n|};\n\nexport const defaultUtils: InflectorUtils = {\n  constantCase,\n  camelCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n};\n\nexport type Inflector = {\n  // TODO: tighten this up!\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n};\n\nexport const newInflector = (\n  overrides: ?{ [string]: () => string } = undefined,\n  {\n    constantCase,\n    camelCase,\n    upperCamelCase,\n    pluralize,\n    singularize,\n  }: InflectorUtils = defaultUtils\n): Inflector => {\n  function singularizeTable(tableName: string): string {\n    return singularize(tableName).replace(\n      /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n      \"$&_record\"\n    );\n  }\n\n  return deprecateEverything(\n    preventEmptyResult({\n      pluralize,\n      argument(name: ?string, index: number) {\n        return camelCase(name || `arg${index}`);\n      },\n      orderByType(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-order-by`);\n      },\n      orderByEnum(\n        name: string,\n        ascending: boolean,\n        _table: string,\n        _schema: ?string\n      ) {\n        return constantCase(`${name}_${ascending ? \"asc\" : \"desc\"}`);\n      },\n      domainType(name: string) {\n        return upperCamelCase(name);\n      },\n      enumName(inValue: string) {\n        let value = inValue;\n\n        if (value === \"\") {\n          return \"_EMPTY_\";\n        }\n\n        // Some enums use asterisks to signify wildcards - this might be for\n        // the whole item, or prefixes/suffixes, or even in the middle.  This\n        // is provided on a best efforts basis, if it doesn't suit your\n        // purposes then please pass a custom inflector as mentioned below.\n        value = value\n          .replace(/\\*/g, \"_ASTERISK_\")\n          .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n          .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n        // This is a best efforts replacement for common symbols that you\n        // might find in enums. Generally we only support enums that are\n        // alphanumeric, if these replacements don't work for you, you should\n        // pass a custom inflector that replaces this `enumName` method\n        // with one of your own chosing.\n        value =\n          {\n            // SQL comparison operators\n            \">\": \"GREATER_THAN\",\n            \">=\": \"GREATER_THAN_OR_EQUAL\",\n            \"=\": \"EQUAL\",\n            \"!=\": \"NOT_EQUAL\",\n            \"<>\": \"DIFFERENT\",\n            \"<=\": \"LESS_THAN_OR_EQUAL\",\n            \"<\": \"LESS_THAN\",\n\n            // PostgreSQL LIKE shortcuts\n            \"~~\": \"LIKE\",\n            \"~~*\": \"ILIKE\",\n            \"!~~\": \"NOT_LIKE\",\n            \"!~~*\": \"NOT_ILIKE\",\n\n            // '~' doesn't necessarily represent regexps, but the three\n            // operators following it likely do, so we'll use the word TILDE\n            // in all for consistency.\n            \"~\": \"TILDE\",\n            \"~*\": \"TILDE_ASTERISK\",\n            \"!~\": \"NOT_TILDE\",\n            \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n            // A number of other symbols where we're not sure of their\n            // meaning.  We give them common generic names so that they're\n            // suitable for multiple purposes, e.g. favouring 'PLUS' over\n            // 'ADDITION' and 'DOT' over 'FULL_STOP'\n            \"%\": \"PERCENT\",\n            \"+\": \"PLUS\",\n            \"-\": \"MINUS\",\n            \"/\": \"SLASH\",\n            \"\\\\\": \"BACKSLASH\",\n            _: \"UNDERSCORE\",\n            \"#\": \"POUND\",\n            \"Â£\": \"STERLING\",\n            $: \"DOLLAR\",\n            \"&\": \"AMPERSAND\",\n            \"@\": \"AT\",\n            \"'\": \"APOSTROPHE\",\n            '\"': \"QUOTE\",\n            \"`\": \"BACKTICK\",\n            \":\": \"COLON\",\n            \";\": \"SEMICOLON\",\n            \"!\": \"EXCLAMATION_POINT\",\n            \"?\": \"QUESTION_MARK\",\n            \",\": \"COMMA\",\n            \".\": \"DOT\",\n            \"^\": \"CARET\",\n            \"|\": \"BAR\",\n            \"[\": \"OPEN_BRACKET\",\n            \"]\": \"CLOSE_BRACKET\",\n            \"(\": \"OPEN_PARENTHESIS\",\n            \")\": \"CLOSE_PARENTHESIS\",\n            \"{\": \"OPEN_BRACE\",\n            \"}\": \"CLOSE_BRACE\",\n          }[value] || value;\n        return value;\n      },\n      enumType(name: string) {\n        return upperCamelCase(name);\n      },\n      conditionType(typeName: string) {\n        return upperCamelCase(`${typeName}-condition`);\n      },\n      inputType(typeName: string) {\n        return upperCamelCase(`${typeName}-input`);\n      },\n      rangeBoundType(typeName: string) {\n        return upperCamelCase(`${typeName}-range-bound`);\n      },\n      rangeType(typeName: string) {\n        return upperCamelCase(`${typeName}-range`);\n      },\n      patchType(typeName: string) {\n        return upperCamelCase(`${typeName}-patch`);\n      },\n      patchField(itemName: string) {\n        return camelCase(`${itemName}-patch`);\n      },\n      tableName(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      tableNode(name: string, _schema: ?string) {\n        return camelCase(singularizeTable(name));\n      },\n      allRows(name: string, schema: ?string) {\n        return camelCase(`all-${this.pluralize(this.tableName(name, schema))}`);\n      },\n      functionName(name: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      functionPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-payload`);\n      },\n      functionInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`${name}-input`);\n      },\n      tableType(name: string, schema: ?string) {\n        return upperCamelCase(this.tableName(name, schema));\n      },\n      column(name: string, _table: string, _schema: ?string) {\n        return camelCase(name);\n      },\n      singleRelationByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      rowByUniqueKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `update-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      deleteByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n        return camelCase(\n          `delete-${this.tableName(table, schema)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      updateNode(name: string, _schema: ?string) {\n        return camelCase(`update-${singularizeTable(name)}`);\n      },\n      deleteNode(name: string, _schema: ?string) {\n        return camelCase(`delete-${singularizeTable(name)}`);\n      },\n      updateByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `update-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      deleteByKeysInputType(\n        detailedKeys: Keys,\n        name: string,\n        _schema: ?string\n      ) {\n        return upperCamelCase(\n          `delete-${singularizeTable(name)}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}-input`\n        );\n      },\n      updateNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-input`);\n      },\n      deleteNodeInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-input`);\n      },\n      manyRelationByKeys(\n        detailedKeys: Keys,\n        table: string,\n        schema: ?string,\n        _foreignTable: string,\n        _foreignSchema: ?string\n      ) {\n        return camelCase(\n          `${this.pluralize(this.tableName(table, schema))}-by-${detailedKeys\n            .map(key => this.column(key.column, key.table, key.schema))\n            .join(\"-and-\")}`\n        );\n      },\n      edge(typeName: string) {\n        return upperCamelCase(`${pluralize(typeName)}-edge`);\n      },\n      edgeField(name: string, _schema: ?string) {\n        return camelCase(`${singularizeTable(name)}-edge`);\n      },\n      connection(typeName: string) {\n        return upperCamelCase(`${this.pluralize(typeName)}-connection`);\n      },\n      scalarFunctionConnection(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-connection`);\n      },\n      scalarFunctionEdge(procName: string, _procSchema: ?string) {\n        return upperCamelCase(`${procName}-edge`);\n      },\n      createField(name: string, _schema: ?string) {\n        return camelCase(`create-${singularizeTable(name)}`);\n      },\n      createInputType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-input`);\n      },\n      createPayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`create-${singularizeTable(name)}-payload`);\n      },\n      updatePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`update-${singularizeTable(name)}-payload`);\n      },\n      deletePayloadType(name: string, _schema: ?string) {\n        return upperCamelCase(`delete-${singularizeTable(name)}-payload`);\n      },\n      ...overrides,\n    })\n  );\n};\n\nexport const defaultInflection = newInflector();\n"],"mappings":";;;;;;AAEA,IAAAA,cAAA,GAAAC,OAAA;AAQA,IAAAC,eAAA,GAAAD,OAAA;AAVA,wEAYA,MAAME,cAAc,GAAG,EAAE;;AAEzB;AACA,SAASC,SAASA,CAACC,EAAoC,EAAEC,OAAe,EAAE;EACxE,IAAI,OAAOD,EAAE,KAAK,UAAU,EAAE;IAC5B,OAAOA,EAAE;EACX;EACA,OAAO,UAAU,GAAGE,IAAI,EAAE;IACxB,IAAIJ,cAAc,CAACK,OAAO,CAACF,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1CH,cAAc,CAACM,IAAI,CAACH,OAAO,CAAC;MAC5B;MACAI,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,CAACN,OAAO,CAAC,CAAC;IAClC;IACA,OAAOD,EAAE,CAACQ,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;EAC7B,CAAC;AACH;AAEA,SAASO,mBAAmBA,CAACC,GAG5B,EAAE;EACD,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;IAC5CD,IAAI,CAACC,GAAG,CAAC,GAAGhB,SAAS,CACnBW,GAAG,CAACK,GAAG,CAAC,EACP,+EAA8EA,GAAI,mPACrF,CAAC;IACD,OAAOD,IAAI;EACb,CAAC,EAAE,CAAC,CAAC,CAAC;AACR;AAgBO,MAAME,YAA4B,GAAG;EAC1CC,YAAY,EAAZA,2BAAY;EACZC,SAAS,EAATA,wBAAS;EACTC,cAAc,EAAdA,6BAAc;EACdC,SAAS,EAATA,wBAAS;EACTC,WAAW,EAAXA;AACF,CAAC;AAACC,OAAA,CAAAN,YAAA,GAAAA,YAAA;AAQK,MAAMO,YAAY,GAAGA,CAC1BC,SAAsC,GAAGC,SAAS,EAClD;EACER,YAAY;EACZC,SAAS;EACTC,cAAc;EACdC,SAAS;EACTC;AACc,CAAC,GAAGL,YAAY,KAClB;EACd,SAASU,gBAAgBA,CAACC,SAAiB,EAAU;IACnD,OAAON,WAAW,CAACM,SAAS,CAAC,CAACC,OAAO,CACnC,uCAAuC,EACvC,WACF,CAAC;EACH;EAEA,OAAOnB,mBAAmB,CACxB,IAAAoB,kCAAkB,EAAC;IACjBT,SAAS;IACTU,QAAQA,CAACC,IAAa,EAAEC,KAAa,EAAE;MACrC,OAAOd,SAAS,CAACa,IAAI,IAAK,MAAKC,KAAM,EAAC,CAAC;IACzC,CAAC;IACDC,WAAWA,CAACC,QAAgB,EAAE;MAC5B,OAAOf,cAAc,CAAE,GAAEC,SAAS,CAACc,QAAQ,CAAE,WAAU,CAAC;IAC1D,CAAC;IACDC,WAAWA,CACTJ,IAAY,EACZK,SAAkB,EAClBC,MAAc,EACdC,OAAgB,EAChB;MACA,OAAOrB,YAAY,CAAE,GAAEc,IAAK,IAAGK,SAAS,GAAG,KAAK,GAAG,MAAO,EAAC,CAAC;IAC9D,CAAC;IACDG,UAAUA,CAACR,IAAY,EAAE;MACvB,OAAOZ,cAAc,CAACY,IAAI,CAAC;IAC7B,CAAC;IACDS,QAAQA,CAACC,OAAe,EAAE;MACxB,IAAIC,KAAK,GAAGD,OAAO;MAEnB,IAAIC,KAAK,KAAK,EAAE,EAAE;QAChB,OAAO,SAAS;MAClB;;MAEA;MACA;MACA;MACA;MACAA,KAAK,GAAGA,KAAK,CACVd,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAC5BA,OAAO,CAAC,iBAAiB,EAAE,YAAY,CAAC,CACxCA,OAAO,CAAC,kBAAkB,EAAE,YAAY,CAAC;;MAE5C;MACA;MACA;MACA;MACA;MACAc,KAAK,GACH;QACE;QACA,GAAG,EAAE,cAAc;QACnB,IAAI,EAAE,uBAAuB;QAC7B,GAAG,EAAE,OAAO;QACZ,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,oBAAoB;QAC1B,GAAG,EAAE,WAAW;QAEhB;QACA,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,UAAU;QACjB,MAAM,EAAE,WAAW;QAEnB;QACA;QACA;QACA,GAAG,EAAE,OAAO;QACZ,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,WAAW;QACjB,KAAK,EAAE,oBAAoB;QAE3B;QACA;QACA;QACA;QACA,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,OAAO;QACZ,IAAI,EAAE,WAAW;QACjBC,CAAC,EAAE,YAAY;QACf,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,UAAU;QACfC,CAAC,EAAE,QAAQ;QACX,GAAG,EAAE,WAAW;QAChB,GAAG,EAAE,IAAI;QACT,GAAG,EAAE,YAAY;QACjB,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,UAAU;QACf,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,WAAW;QAChB,GAAG,EAAE,mBAAmB;QACxB,GAAG,EAAE,eAAe;QACpB,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,KAAK;QACV,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,KAAK;QACV,GAAG,EAAE,cAAc;QACnB,GAAG,EAAE,eAAe;QACpB,GAAG,EAAE,kBAAkB;QACvB,GAAG,EAAE,mBAAmB;QACxB,GAAG,EAAE,YAAY;QACjB,GAAG,EAAE;MACP,CAAC,CAACF,KAAK,CAAC,IAAIA,KAAK;MACnB,OAAOA,KAAK;IACd,CAAC;IACDG,QAAQA,CAACd,IAAY,EAAE;MACrB,OAAOZ,cAAc,CAACY,IAAI,CAAC;IAC7B,CAAC;IACDe,aAAaA,CAACZ,QAAgB,EAAE;MAC9B,OAAOf,cAAc,CAAE,GAAEe,QAAS,YAAW,CAAC;IAChD,CAAC;IACDa,SAASA,CAACb,QAAgB,EAAE;MAC1B,OAAOf,cAAc,CAAE,GAAEe,QAAS,QAAO,CAAC;IAC5C,CAAC;IACDc,cAAcA,CAACd,QAAgB,EAAE;MAC/B,OAAOf,cAAc,CAAE,GAAEe,QAAS,cAAa,CAAC;IAClD,CAAC;IACDe,SAASA,CAACf,QAAgB,EAAE;MAC1B,OAAOf,cAAc,CAAE,GAAEe,QAAS,QAAO,CAAC;IAC5C,CAAC;IACDgB,SAASA,CAAChB,QAAgB,EAAE;MAC1B,OAAOf,cAAc,CAAE,GAAEe,QAAS,QAAO,CAAC;IAC5C,CAAC;IACDiB,UAAUA,CAACC,QAAgB,EAAE;MAC3B,OAAOlC,SAAS,CAAE,GAAEkC,QAAS,QAAO,CAAC;IACvC,CAAC;IACDzB,SAASA,CAACI,IAAY,EAAEO,OAAgB,EAAE;MACxC,OAAOpB,SAAS,CAACQ,gBAAgB,CAACK,IAAI,CAAC,CAAC;IAC1C,CAAC;IACDsB,SAASA,CAACtB,IAAY,EAAEO,OAAgB,EAAE;MACxC,OAAOpB,SAAS,CAACQ,gBAAgB,CAACK,IAAI,CAAC,CAAC;IAC1C,CAAC;IACDuB,OAAOA,CAACvB,IAAY,EAAEwB,MAAe,EAAE;MACrC,OAAOrC,SAAS,CAAE,OAAM,IAAI,CAACE,SAAS,CAAC,IAAI,CAACO,SAAS,CAACI,IAAI,EAAEwB,MAAM,CAAC,CAAE,EAAC,CAAC;IACzE,CAAC;IACDC,YAAYA,CAACzB,IAAY,EAAEO,OAAgB,EAAE;MAC3C,OAAOpB,SAAS,CAACa,IAAI,CAAC;IACxB,CAAC;IACD0B,mBAAmBA,CAAC1B,IAAY,EAAEO,OAAgB,EAAE;MAClD,OAAOnB,cAAc,CAAE,GAAEY,IAAK,UAAS,CAAC;IAC1C,CAAC;IACD2B,iBAAiBA,CAAC3B,IAAY,EAAEO,OAAgB,EAAE;MAChD,OAAOnB,cAAc,CAAE,GAAEY,IAAK,QAAO,CAAC;IACxC,CAAC;IACD4B,SAASA,CAAC5B,IAAY,EAAEwB,MAAe,EAAE;MACvC,OAAOpC,cAAc,CAAC,IAAI,CAACQ,SAAS,CAACI,IAAI,EAAEwB,MAAM,CAAC,CAAC;IACrD,CAAC;IACDK,MAAMA,CAAC7B,IAAY,EAAEM,MAAc,EAAEC,OAAgB,EAAE;MACrD,OAAOpB,SAAS,CAACa,IAAI,CAAC;IACxB,CAAC;IACD8B,oBAAoBA,CAACC,YAAkB,EAAEC,KAAa,EAAER,MAAe,EAAE;MACvE,OAAOrC,SAAS,CACb,GAAE,IAAI,CAACS,SAAS,CAACoC,KAAK,EAAER,MAAM,CAAE,OAAMO,YAAY,CAChDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,EACnB,CAAC;IACH,CAAC;IACDC,eAAeA,CAACJ,YAAkB,EAAEC,KAAa,EAAER,MAAe,EAAE;MAClE,OAAOrC,SAAS,CACb,GAAE,IAAI,CAACS,SAAS,CAACoC,KAAK,EAAER,MAAM,CAAE,OAAMO,YAAY,CAChDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,EACnB,CAAC;IACH,CAAC;IACDE,YAAYA,CAACL,YAAkB,EAAEC,KAAa,EAAER,MAAe,EAAE;MAC/D,OAAOrC,SAAS,CACb,UAAS,IAAI,CAACS,SAAS,CAACoC,KAAK,EAAER,MAAM,CAAE,OAAMO,YAAY,CACvDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,EACnB,CAAC;IACH,CAAC;IACDG,YAAYA,CAACN,YAAkB,EAAEC,KAAa,EAAER,MAAe,EAAE;MAC/D,OAAOrC,SAAS,CACb,UAAS,IAAI,CAACS,SAAS,CAACoC,KAAK,EAAER,MAAM,CAAE,OAAMO,YAAY,CACvDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,EACnB,CAAC;IACH,CAAC;IACDI,UAAUA,CAACtC,IAAY,EAAEO,OAAgB,EAAE;MACzC,OAAOpB,SAAS,CAAE,UAASQ,gBAAgB,CAACK,IAAI,CAAE,EAAC,CAAC;IACtD,CAAC;IACDuC,UAAUA,CAACvC,IAAY,EAAEO,OAAgB,EAAE;MACzC,OAAOpB,SAAS,CAAE,UAASQ,gBAAgB,CAACK,IAAI,CAAE,EAAC,CAAC;IACtD,CAAC;IACDwC,qBAAqBA,CACnBT,YAAkB,EAClB/B,IAAY,EACZO,OAAgB,EAChB;MACA,OAAOnB,cAAc,CAClB,UAASO,gBAAgB,CAACK,IAAI,CAAE,OAAM+B,YAAY,CAChDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,QACnB,CAAC;IACH,CAAC;IACDO,qBAAqBA,CACnBV,YAAkB,EAClB/B,IAAY,EACZO,OAAgB,EAChB;MACA,OAAOnB,cAAc,CAClB,UAASO,gBAAgB,CAACK,IAAI,CAAE,OAAM+B,YAAY,CAChDE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,QACnB,CAAC;IACH,CAAC;IACDQ,mBAAmBA,CAAC1C,IAAY,EAAEO,OAAgB,EAAE;MAClD,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,QAAO,CAAC;IACjE,CAAC;IACD2C,mBAAmBA,CAAC3C,IAAY,EAAEO,OAAgB,EAAE;MAClD,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,QAAO,CAAC;IACjE,CAAC;IACD4C,kBAAkBA,CAChBb,YAAkB,EAClBC,KAAa,EACbR,MAAe,EACfqB,aAAqB,EACrBC,cAAuB,EACvB;MACA,OAAO3D,SAAS,CACb,GAAE,IAAI,CAACE,SAAS,CAAC,IAAI,CAACO,SAAS,CAACoC,KAAK,EAAER,MAAM,CAAC,CAAE,OAAMO,YAAY,CAChEE,GAAG,CAACjD,GAAG,IAAI,IAAI,CAAC6C,MAAM,CAAC7C,GAAG,CAAC6C,MAAM,EAAE7C,GAAG,CAACgD,KAAK,EAAEhD,GAAG,CAACwC,MAAM,CAAC,CAAC,CAC1DU,IAAI,CAAC,OAAO,CAAE,EACnB,CAAC;IACH,CAAC;IACDa,IAAIA,CAAC5C,QAAgB,EAAE;MACrB,OAAOf,cAAc,CAAE,GAAEC,SAAS,CAACc,QAAQ,CAAE,OAAM,CAAC;IACtD,CAAC;IACD6C,SAASA,CAAChD,IAAY,EAAEO,OAAgB,EAAE;MACxC,OAAOpB,SAAS,CAAE,GAAEQ,gBAAgB,CAACK,IAAI,CAAE,OAAM,CAAC;IACpD,CAAC;IACDiD,UAAUA,CAAC9C,QAAgB,EAAE;MAC3B,OAAOf,cAAc,CAAE,GAAE,IAAI,CAACC,SAAS,CAACc,QAAQ,CAAE,aAAY,CAAC;IACjE,CAAC;IACD+C,wBAAwBA,CAACC,QAAgB,EAAEC,WAAoB,EAAE;MAC/D,OAAOhE,cAAc,CAAE,GAAE+D,QAAS,aAAY,CAAC;IACjD,CAAC;IACDE,kBAAkBA,CAACF,QAAgB,EAAEC,WAAoB,EAAE;MACzD,OAAOhE,cAAc,CAAE,GAAE+D,QAAS,OAAM,CAAC;IAC3C,CAAC;IACDG,WAAWA,CAACtD,IAAY,EAAEO,OAAgB,EAAE;MAC1C,OAAOpB,SAAS,CAAE,UAASQ,gBAAgB,CAACK,IAAI,CAAE,EAAC,CAAC;IACtD,CAAC;IACDuD,eAAeA,CAACvD,IAAY,EAAEO,OAAgB,EAAE;MAC9C,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,QAAO,CAAC;IACjE,CAAC;IACDwD,iBAAiBA,CAACxD,IAAY,EAAEO,OAAgB,EAAE;MAChD,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,UAAS,CAAC;IACnE,CAAC;IACDyD,iBAAiBA,CAACzD,IAAY,EAAEO,OAAgB,EAAE;MAChD,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,UAAS,CAAC;IACnE,CAAC;IACD0D,iBAAiBA,CAAC1D,IAAY,EAAEO,OAAgB,EAAE;MAChD,OAAOnB,cAAc,CAAE,UAASO,gBAAgB,CAACK,IAAI,CAAE,UAAS,CAAC;IACnE,CAAC;IACD,GAAGP;EACL,CAAC,CACH,CAAC;AACH,CAAC;AAACF,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAEK,MAAMmE,iBAAiB,GAAGnE,YAAY,CAAC,CAAC;AAACD,OAAA,CAAAoE,iBAAA,GAAAA,iBAAA"}