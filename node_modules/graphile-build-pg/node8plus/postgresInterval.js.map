{"version":3,"file":"postgresInterval.js","names":["NUMBER","YEAR","MONTH","DAY","TIME","INTERVAL","RegExp","map","str","join","parseInterval","interval","years","months","days","plusMinusTime","hours","minutes","seconds","exec","timeMultiplier","parseInt","parseFloat"],"sources":["../src/postgresInterval.js"],"sourcesContent":["// @flow\n\nexport type Interval = {\n  years: number,\n  months: number,\n  days: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n};\n\n// Regexp construction enhanced from `postgres-interval`, which is licensed\n// under the MIT license and is copyright (c) Ben Drucker <bvdrucker@gmail.com>\n// (bendrucker.me).\n\nconst NUMBER = \"([+-]?\\\\d+)\";\nconst YEAR = `${NUMBER}\\\\s+years?`;\nconst MONTH = `${NUMBER}\\\\s+mons?`;\nconst DAY = `${NUMBER}\\\\s+days?`;\n// NOTE: PostgreSQL automatically overflows seconds into minutes and minutes\n// into hours, so we can rely on minutes and seconds always being 2 digits\n// (plus decimal for seconds). The overflow stops at hours - hours do not\n// overflow into days, so could be arbitrarily long.\nconst TIME = \"([+-])?(\\\\d+):(\\\\d\\\\d):(\\\\d\\\\d(?:\\\\.\\\\d{1,6})?)\";\n\nconst INTERVAL = new RegExp(\n  \"^\" +\n    // All parts of an interval are optional\n    [YEAR, MONTH, DAY, TIME].map(str => \"(?:\" + str + \")?\").join(\"\\\\s*\") +\n    \"$\"\n);\n\nexport function parseInterval(interval: string): Interval {\n  const [, years, months, days, plusMinusTime, hours, minutes, seconds] =\n    INTERVAL.exec(interval || \"\") || [];\n\n  const timeMultiplier = plusMinusTime === \"-\" ? -1 : 1;\n\n  return {\n    years: years ? parseInt(years, 10) : 0,\n    months: months ? parseInt(months, 10) : 0,\n    days: days ? parseInt(days, 10) : 0,\n    hours: hours ? timeMultiplier * parseInt(hours, 10) : 0,\n    minutes: minutes ? timeMultiplier * parseInt(minutes, 10) : 0,\n    // Seconds can be decimal; all other values are integer\n    seconds: seconds ? timeMultiplier * parseFloat(seconds) : 0,\n  };\n}\n"],"mappings":";;;;;;AAWA;AACA;AACA;AAEA,MAAMA,MAAM,GAAG,aAAa;AAC5B,MAAMC,IAAI,GAAI,GAAED,MAAO,YAAW;AAClC,MAAME,KAAK,GAAI,GAAEF,MAAO,WAAU;AAClC,MAAMG,GAAG,GAAI,GAAEH,MAAO,WAAU;AAChC;AACA;AACA;AACA;AACA,MAAMI,IAAI,GAAG,iDAAiD;AAE9D,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CACzB,GAAG;AACD;AACA,CAACL,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAACG,GAAG,CAACC,GAAG,IAAI,KAAK,GAAGA,GAAG,GAAG,IAAI,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC,GACpE,GACJ,CAAC;AAEM,SAASC,aAAaA,CAACC,QAAgB,EAAY;EACxD,MAAM,GAAGC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,GACnEb,QAAQ,CAACc,IAAI,CAACR,QAAQ,IAAI,EAAE,CAAC,IAAI,EAAE;EAErC,MAAMS,cAAc,GAAGL,aAAa,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EAErD,OAAO;IACLH,KAAK,EAAEA,KAAK,GAAGS,QAAQ,CAACT,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC;IACtCC,MAAM,EAAEA,MAAM,GAAGQ,QAAQ,CAACR,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC;IACzCC,IAAI,EAAEA,IAAI,GAAGO,QAAQ,CAACP,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC;IACnCE,KAAK,EAAEA,KAAK,GAAGI,cAAc,GAAGC,QAAQ,CAACL,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC;IACvDC,OAAO,EAAEA,OAAO,GAAGG,cAAc,GAAGC,QAAQ,CAACJ,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC;IAC7D;IACAC,OAAO,EAAEA,OAAO,GAAGE,cAAc,GAAGE,UAAU,CAACJ,OAAO,CAAC,GAAG;EAC5D,CAAC;AACH"}