{"version":3,"file":"SchemaBuilder.js","names":["_debug","_interopRequireDefault","require","_makeNewBuild","_utils","graphql","_interopRequireWildcard","_events","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","GraphQLSchema","debug","debugFactory","INDENT","SchemaBuilder","EventEmitter","constructor","options","Error","_busy","_watching","watchers","unwatchers","depth","hooks","build","inflection","init","finalize","GraphQLObjectType","GraphQLInputObjectType","GraphQLEnumType","GraphQLUnionType","GraphQLInterfaceType","_setPluginName","name","_currentPluginName","hook","hookName","fn","provides","before","after","displayName","length","join","push","relevantHooks","minIndex","minReason","maxIndex","maxReason","newProvides","newBefore","newAfter","describe","index","check","setMin","newMin","reason","setMax","newMax","forEach","oldHook","idx","oldProvides","oldBefore","oldAfter","some","dep","includes","splice","applyHooks","input","context","debugStr","repeat","hookDisplayName","previousHookName","status","currentHookName","previousHookEvent","currentHookEvent","oldObj","console","warn","assign","registerWatcher","listen","unlisten","createBuild","initialBuild","makeNewBuild","scope","bindAll","keys","filter","freeze","buildSchema","_generatedSchema","schema","newWithHooks","directives","specifiedDirectives","__origin","isSchema","hookedSchema","errors","validateSchema","map","e","message","replace","watchSchema","listener","_explicitSchemaListener","ignoreChangeTriggers","triggerChange","emit","error","on","unwatchSchema","e2","removeListener","_default","exports"],"sources":["../src/SchemaBuilder.js"],"sourcesContent":["// @flow\nimport debugFactory from \"debug\";\nimport makeNewBuild from \"./makeNewBuild\";\nimport { bindAll } from \"./utils\";\nimport * as graphql from \"graphql\";\nimport type {\n  GraphQLType,\n  GraphQLNamedType,\n  GraphQLInterfaceType,\n  GraphQLObjectTypeConfig,\n} from \"graphql\";\nimport EventEmitter from \"events\";\n// TODO: when we move to TypeScript, change this to:\n// import { EventEmitter } from \"events\";\nimport type {\n  simplifyParsedResolveInfoFragmentWithType,\n  parseResolveInfo,\n} from \"graphql-parse-resolve-info\";\nimport type { GraphQLResolveInfo } from \"graphql/type/definition\";\nimport type resolveNode from \"./resolveNode\";\n\nimport type { FieldWithHooksFunction } from \"./makeNewBuild\";\nconst { GraphQLSchema } = graphql;\n\nconst debug = debugFactory(\"graphile-builder\");\n\nconst INDENT = \"  \";\n\nexport type Options = {\n  [string]: mixed,\n};\n\nexport type Plugin = (\n  builder: SchemaBuilder,\n  options: Options\n) => Promise<void> | void;\n\ntype TriggerChangeType = () => void;\n\nexport type DataForType = {\n  [string]: Array<mixed>,\n};\n\nexport type Build = {|\n  graphileBuildVersion: string,\n  graphql: *,\n  parseResolveInfo: parseResolveInfo,\n  simplifyParsedResolveInfoFragmentWithType: simplifyParsedResolveInfoFragmentWithType,\n  // DEPRECATED: getAliasFromResolveInfo: (resolveInfo: GraphQLResolveInfo) => string,\n  getSafeAliasFromResolveInfo: (resolveInfo: GraphQLResolveInfo) => string,\n  getSafeAliasFromAlias: (alias: string) => string,\n  resolveAlias(\n    data: {},\n    _args: mixed,\n    _context: mixed,\n    resolveInfo: GraphQLResolveInfo\n  ): string,\n  addType(type: GraphQLNamedType, origin?: ?string): void,\n  getTypeByName(typeName: string): ?GraphQLType,\n  extend<Obj1: *, Obj2: *>(base: Obj1, extra: Obj2, hint?: string): Obj1 & Obj2,\n  newWithHooks<T: GraphQLNamedType | GraphQLSchema, ConfigType: *>(\n    Class<T>,\n    spec: ConfigType,\n    scope: Scope,\n    performNonEmptyFieldsCheck?: boolean\n  ): ?T,\n  fieldDataGeneratorsByType: Map<*, *>, // @deprecated - use fieldDataGeneratorsByFieldNameByType instead\n  fieldDataGeneratorsByFieldNameByType: Map<*, *>,\n  fieldArgDataGeneratorsByFieldNameByType: Map<*, *>,\n  inflection: {\n    // eslint-disable-next-line flowtype/no-weak-types\n    [string]: (...args: Array<any>) => string,\n  },\n  wrapDescription: (\n    description: string,\n    position: \"root\" | \"type\" | \"field\" | \"arg\"\n  ) => string,\n  swallowError: (e: Error) => void,\n  // resolveNode: EXPERIMENTAL, API might change!\n  resolveNode: resolveNode,\n  status: {\n    currentHookName: ?string,\n    currentHookEvent: ?string,\n  },\n  scopeByType: Map<GraphQLType, Scope>,\n|};\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport type Scope = {\n  __origin: ?string,\n  [string]: mixed,\n};\n\nexport type Context = {|\n  scope: Scope,\n  type: string,\n  [string]: mixed,\n|};\n\ntype DataGeneratorFunction = () => {};\n\nexport type ContextGraphQLObjectTypeFields = {|\n  addDataGeneratorForField: (\n    fieldName: string,\n    fn: DataGeneratorFunction\n  ) => void,\n  recurseDataGeneratorsForField: (fieldName: string) => void, // @deprecated - DO NOT USE!\n  Self: GraphQLNamedType,\n  GraphQLObjectType: GraphQLObjectTypeConfig<*, *>,\n  fieldWithHooks: FieldWithHooksFunction,\n|};\n\ntype SupportedHookTypes = {} | Build | Array<GraphQLInterfaceType>;\n\nexport type Hook<\n  Type: SupportedHookTypes,\n  BuildExtensions: *,\n  ContextExtensions: *\n> = {\n  (\n    input: Type,\n    build: { ...Build, ...BuildExtensions },\n    context: { ...Context, ...ContextExtensions }\n  ): Type,\n  displayName?: string,\n  provides?: Array<string>,\n  before?: Array<string>,\n  after?: Array<string>,\n};\n\nexport type WatchUnwatch = (triggerChange: TriggerChangeType) => void;\n\nexport type SchemaListener = (newSchema: GraphQLSchema) => void;\n\nclass SchemaBuilder extends EventEmitter {\n  options: Options;\n  watchers: Array<WatchUnwatch>;\n  unwatchers: Array<WatchUnwatch>;\n  triggerChange: ?TriggerChangeType;\n  depth: number;\n  hooks: {\n    [string]: Array<Hook<*, *, *>>,\n  };\n\n  _currentPluginName: ?string;\n  _generatedSchema: ?GraphQLSchema;\n  _explicitSchemaListener: ?SchemaListener;\n  _busy: boolean;\n  _watching: boolean;\n\n  constructor(options: Options) {\n    super();\n\n    this.options = options;\n    if (!options) {\n      throw new Error(\"Please pass options to SchemaBuilder\");\n    }\n\n    this._busy = false;\n    this._watching = false;\n\n    this.watchers = [];\n    this.unwatchers = [];\n\n    // Because hooks can nest, this keeps track of how deep we are.\n    this.depth = -1;\n\n    this.hooks = {\n      // The build object represents the current schema build and is passed to\n      // all hooks, hook the 'build' event to extend this object:\n      build: [],\n\n      // Inflection is used for naming resulting types/fields/args/etc - it's\n      // hookable so that other plugins may extend it or override it\n      inflection: [],\n\n      // 'build' phase should not generate any GraphQL objects (because the\n      // build object isn't finalised yet so it risks weirdness occurring); so\n      // if you need to set up any global types you can do so here.\n      init: [],\n\n      // 'finalize' phase is called once the schema is built; typically you\n      // shouldn't use this, but it's useful for interfacing with external\n      // libraries that mutate an already constructed schema.\n      finalize: [],\n\n      // Add 'query', 'mutation' or 'subscription' types in this hook:\n      GraphQLSchema: [],\n\n      // When creating a GraphQLObjectType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLObjectType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLObjectType:interfaces' to add additional interfaces to this object type\n      // - 'GraphQLObjectType:fields' to add additional fields to this object type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Object as\n      //   `Self` in the context)\n      // - 'GraphQLObjectType:fields:field' to customise an individual field from above\n      // - 'GraphQLObjectType:fields:field:args' to customize the arguments to a field\n      GraphQLObjectType: [],\n      \"GraphQLObjectType:interfaces\": [],\n      \"GraphQLObjectType:fields\": [],\n      \"GraphQLObjectType:fields:field\": [],\n      \"GraphQLObjectType:fields:field:args\": [],\n\n      // When creating a GraphQLInputObjectType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLInputObjectType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLInputObjectType:fields' to add additional fields to this object type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Object as\n      //   `Self` in the context)\n      // - 'GraphQLInputObjectType:fields:field' to customise an individual field from above\n      GraphQLInputObjectType: [],\n      \"GraphQLInputObjectType:fields\": [],\n      \"GraphQLInputObjectType:fields:field\": [],\n\n      // When creating a GraphQLEnumType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLEnumType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLEnumType:values' to add additional values\n      // - 'GraphQLEnumType:values:value' to change an individual value\n      GraphQLEnumType: [],\n      \"GraphQLEnumType:values\": [],\n      \"GraphQLEnumType:values:value\": [],\n\n      // When creating a GraphQLUnionType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLUnionType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLUnionType:types' to add additional types to this union\n      GraphQLUnionType: [],\n      \"GraphQLUnionType:types\": [],\n\n      // When creating a GraphQLInterfaceType via `newWithHooks`, we'll\n      // execute, the following hooks:\n      // - 'GraphQLInterfaceType' to add any root-level attributes, e.g. add a description\n      // - 'GraphQLInterfaceType:fields' to add additional fields to this interface type (is\n      //   ran asynchronously and gets a reference to the final GraphQL Interface as\n      //   `Self` in the context)\n      // - 'GraphQLInterfaceType:fields:field' to customise an individual field from above\n      // - 'GraphQLInterfaceType:fields:field:args' to customize the arguments to a field\n      GraphQLInterfaceType: [],\n      \"GraphQLInterfaceType:fields\": [],\n      \"GraphQLInterfaceType:fields:field\": [],\n      \"GraphQLInterfaceType:fields:field:args\": [],\n    };\n  }\n\n  _setPluginName(name: ?string) {\n    this._currentPluginName = name;\n  }\n\n  /*\n   * Every hook `fn` takes three arguments:\n   * - obj - the object currently being inspected\n   * - build - the current build object (which contains a number of utilities and the context of the build)\n   * - context - information specific to the current invocation of the hook\n   *\n   * The function must either return a replacement object for `obj` or `obj` itself\n   */\n  hook<T: *>(\n    hookName: string,\n    fn: Hook<T, *, *>,\n    provides?: Array<string>,\n    before?: Array<string>,\n    after?: Array<string>\n  ) {\n    if (!this.hooks[hookName]) {\n      throw new Error(`Sorry, '${hookName}' is not a supported hook`);\n    }\n    if (this._currentPluginName) {\n      fn.displayName = `${this._currentPluginName}/${hookName}/${\n        (provides && provides.length && provides.join(\"+\")) ||\n        fn.displayName ||\n        fn.name ||\n        \"unnamed\"\n      }`;\n    }\n    if (provides) {\n      if (!fn.displayName && provides.length) {\n        fn.displayName = `unknown/${hookName}/${provides[0]}`;\n      }\n      fn.provides = provides;\n    }\n    if (before) {\n      fn.before = before;\n    }\n    if (after) {\n      fn.after = after;\n    }\n    if (!fn.provides && !fn.before && !fn.after) {\n      // No explicit dependencies - add to the end\n      this.hooks[hookName].push(fn);\n    } else {\n      // We need to figure out where it can go, respecting all the dependencies.\n      // TODO: I think there are situations in which this algorithm may result in unnecessary conflict errors; we should take a more iterative approach or find a better algorithm\n      const relevantHooks = this.hooks[hookName];\n      let minIndex = 0;\n      let minReason = null;\n      let maxIndex = relevantHooks.length;\n      let maxReason = null;\n      const { provides: newProvides, before: newBefore, after: newAfter } = fn;\n      const describe = (hook, index) => {\n        if (!hook) {\n          return \"-\";\n        }\n        return `${hook.displayName || hook.name || \"anonymous\"} (${\n          index ? `index: ${index}, ` : \"\"\n        }provides: ${hook.provides ? hook.provides.join(\",\") : \"-\"}, before: ${\n          hook.before ? hook.before.join(\",\") : \"-\"\n        }, after: ${hook.after ? hook.after.join(\",\") : \"-\"})`;\n      };\n      const check = () => {\n        if (minIndex > maxIndex) {\n          throw new Error(\n            `Cannot resolve plugin order - ${describe(\n              fn\n            )} cannot be before ${describe(\n              maxReason,\n              maxIndex\n            )} and after ${describe(\n              minReason,\n              minIndex\n            )} - please report this issue`\n          );\n        }\n      };\n      const setMin = (newMin, reason) => {\n        if (newMin > minIndex) {\n          minIndex = newMin;\n          minReason = reason;\n          check();\n        }\n      };\n      const setMax = (newMax, reason) => {\n        if (newMax < maxIndex) {\n          maxIndex = newMax;\n          maxReason = reason;\n          check();\n        }\n      };\n      relevantHooks.forEach((oldHook, idx) => {\n        const {\n          provides: oldProvides,\n          before: oldBefore,\n          after: oldAfter,\n        } = oldHook;\n        if (newProvides) {\n          if (oldBefore && oldBefore.some(dep => newProvides.includes(dep))) {\n            // Old says it has to come before new\n            setMin(idx + 1, oldHook);\n          }\n          if (oldAfter && oldAfter.some(dep => newProvides.includes(dep))) {\n            // Old says it has to be after new\n            setMax(idx, oldHook);\n          }\n        }\n        if (oldProvides) {\n          if (newBefore && newBefore.some(dep => oldProvides.includes(dep))) {\n            // New says it has to come before old\n            setMax(idx, oldHook);\n          }\n          if (newAfter && newAfter.some(dep => oldProvides.includes(dep))) {\n            // New says it has to be after old\n            setMin(idx + 1, oldHook);\n          }\n        }\n      });\n\n      // We've already validated everything, so we can now insert the record.\n      this.hooks[hookName].splice(maxIndex, 0, fn);\n    }\n  }\n\n  applyHooks<T: *, Context>(\n    build: { ...Build },\n    hookName: string,\n    input: T,\n    context: Context,\n    debugStr: string = \"\"\n  ): T {\n    if (!input) {\n      throw new Error(\"applyHooks was called with falsy input\");\n    }\n    this.depth++;\n    try {\n      debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Running...`);\n\n      const hooks: Array<Hook<T, *, *>> = this.hooks[hookName];\n      if (!hooks) {\n        throw new Error(`Sorry, '${hookName}' is not a registered hook`);\n      }\n\n      let newObj = input;\n      for (const hook: Hook<T, *, *> of hooks) {\n        this.depth++;\n        try {\n          const hookDisplayName = hook.displayName || hook.name || \"anonymous\";\n          debug(\n            `${INDENT.repeat(\n              this.depth\n            )}[${hookName}${debugStr}]:   Executing '${hookDisplayName}'`\n          );\n\n          const previousHookName = build.status.currentHookName;\n          const previousHookEvent = build.status.currentHookEvent;\n          build.status.currentHookName = hookDisplayName;\n          build.status.currentHookEvent = hookName;\n          const oldObj = newObj;\n          newObj = hook(newObj, build, context);\n          if (hookName === \"build\") {\n            /*\n             * Unlike all the other hooks, the `build` hook must always use the\n             * same `build` object - never returning a new object for fear of\n             * causing issues to other build hooks that reference the old\n             * object and don't get the new additions.\n             */\n            if (newObj !== oldObj) {\n              // TODO:v5: forbid this\n              // eslint-disable-next-line no-console\n              console.warn(\n                `Build hook '${hookDisplayName}' returned a new object; please use 'return build.extend(build, {...})' instead.`\n              );\n              // Copy everything from newObj back to oldObj\n              Object.assign(oldObj, newObj);\n              // Go back to the old objectect\n              newObj = oldObj;\n            }\n          }\n          build.status.currentHookName = previousHookName;\n          build.status.currentHookEvent = previousHookEvent;\n\n          if (!newObj) {\n            throw new Error(\n              `Hook '${\n                hook.displayName || hook.name || \"anonymous\"\n              }' for '${hookName}' returned falsy value '${newObj}'`\n            );\n          }\n          debug(\n            `${INDENT.repeat(\n              this.depth\n            )}[${hookName}${debugStr}]:   '${hookDisplayName}' complete`\n          );\n        } finally {\n          this.depth--;\n        }\n      }\n\n      debug(`${INDENT.repeat(this.depth)}[${hookName}${debugStr}]: Complete`);\n\n      return newObj;\n    } finally {\n      this.depth--;\n    }\n  }\n\n  registerWatcher(listen: WatchUnwatch, unlisten: WatchUnwatch) {\n    if (!listen || !unlisten) {\n      throw new Error(\"You must provide both a listener and an unlistener\");\n    }\n    this.watchers.push(listen);\n    this.unwatchers.push(unlisten);\n  }\n\n  createBuild(): { ...Build } {\n    const initialBuild = makeNewBuild(this);\n    // Inflection needs to come first, in case 'build' hooks depend on it\n    initialBuild.inflection = this.applyHooks(\n      initialBuild,\n      \"inflection\",\n      initialBuild.inflection,\n      {\n        scope: {},\n      }\n    );\n    const build = this.applyHooks(initialBuild, \"build\", initialBuild, {\n      scope: {},\n    });\n    // Bind all functions so they can be dereferenced\n    bindAll(\n      build,\n      Object.keys(build).filter(key => typeof build[key] === \"function\")\n    );\n    Object.freeze(build);\n    this.applyHooks(build, \"init\", {}, { scope: {} });\n    return build;\n  }\n\n  buildSchema(): GraphQLSchema {\n    if (!this._generatedSchema) {\n      const build = this.createBuild();\n      const schema = build.newWithHooks(\n        GraphQLSchema,\n        {\n          directives: [...build.graphql.specifiedDirectives],\n        },\n        {\n          __origin: `GraphQL built-in`,\n          isSchema: true,\n        }\n      );\n      const hookedSchema = this.applyHooks(\n        build,\n        \"finalize\",\n        schema,\n        {},\n        \"Finalising GraphQL schema\"\n      );\n      const errors = build.graphql.validateSchema(hookedSchema);\n      if (errors && errors.length) {\n        throw new Error(\n          \"GraphQL schema is invalid:\\n\" +\n            errors.map(e => `- ` + e.message.replace(/\\n/g, \"\\n  \")).join(\"\\n\")\n        );\n      }\n      this._generatedSchema = hookedSchema;\n    }\n    if (!this._generatedSchema) {\n      throw new Error(\"Schema generation failed\");\n    }\n    return this._generatedSchema;\n  }\n\n  async watchSchema(listener?: SchemaListener) {\n    if (this._busy) {\n      throw new Error(\"An operation is in progress\");\n    }\n    if (this._watching) {\n      throw new Error(\n        \"We're already watching this schema! Use `builder.on('schema', callback)` instead.\"\n      );\n    }\n    try {\n      this._busy = true;\n      this._explicitSchemaListener = listener;\n\n      // We want to ignore `triggerChange` calls that occur whilst we're setting\n      // up the listeners to prevent an unnecessary double schema build.\n      let ignoreChangeTriggers = true;\n\n      this.triggerChange = () => {\n        if (ignoreChangeTriggers) {\n          return;\n        }\n        this._generatedSchema = null;\n        // XXX: optionally debounce\n        try {\n          const schema = this.buildSchema();\n          this.emit(\"schema\", schema);\n        } catch (e) {\n          // Build errors introduced while watching are ignored because it's\n          // primarily used in development.\n          // eslint-disable-next-line no-console\n          console.error(\n            \"⚠️⚠️⚠️ An error occured when building the schema on watch:\"\n          );\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n      };\n      try {\n        this._watching = true;\n        for (const fn of this.watchers) {\n          await fn(this.triggerChange);\n        }\n\n        // Now we're about to build the first schema, any further\n        // `triggerChange` calls should be honoured.\n        ignoreChangeTriggers = false;\n\n        if (listener) {\n          this.on(\"schema\", listener);\n        }\n        this.emit(\"schema\", this.buildSchema());\n      } catch (e) {\n        try {\n          this._busy = false;\n          // Abort abort!\n          await this.unwatchSchema();\n        } catch (e2) {\n          console.error(\n            `Error when unwatching schema after error during schema build: ${e}`\n          );\n        }\n        throw e;\n      }\n    } finally {\n      this._busy = false;\n    }\n  }\n\n  async unwatchSchema() {\n    if (this._busy) {\n      throw new Error(\"An operation is in progress\");\n    }\n    if (!this._watching) {\n      throw new Error(\"We're not watching this schema!\");\n    }\n    this._busy = true;\n    try {\n      const listener = this._explicitSchemaListener;\n      this._explicitSchemaListener = null;\n      if (listener) {\n        this.removeListener(\"schema\", listener);\n      }\n      if (this.triggerChange) {\n        for (const fn of this.unwatchers) {\n          await fn(this.triggerChange);\n        }\n      }\n      this.triggerChange = null;\n      this._watching = false;\n    } finally {\n      this._busy = false;\n    }\n  }\n}\n\nexport default SchemaBuilder;\n"],"mappings":"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"}