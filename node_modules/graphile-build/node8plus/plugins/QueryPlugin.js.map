{"version":3,"file":"QueryPlugin.js","names":["QueryPlugin","builder","hook","build","extend","$$isQuery","Symbol","schema","newWithHooks","graphql","GraphQLObjectType","GraphQLNonNull","inflection","queryType","description","wrapDescription","name","builtin","isTypeOf","value","_context","info","parentType","fields","Self","query","type","resolve","__origin","isRootQuery","exports","default"],"sources":["../../src/plugins/QueryPlugin.js"],"sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\n\nexport type BuildExtensionQuery = {|\n  $$isQuery: Symbol,\n|};\n\nexport default (async function QueryPlugin(builder) {\n  builder.hook(\n    \"build\",\n    (build: Build): Build & BuildExtensionQuery =>\n      build.extend(\n        build,\n        {\n          $$isQuery: Symbol(\"isQuery\"),\n        },\n        `Extending Build`\n      ),\n    [\"Query\"]\n  );\n  builder.hook(\n    \"GraphQLSchema\",\n    (schema: {}, build) => {\n      const {\n        $$isQuery,\n        newWithHooks,\n        extend,\n        graphql: { GraphQLObjectType, GraphQLNonNull },\n        inflection,\n      } = build;\n      const queryType = newWithHooks(\n        GraphQLObjectType,\n        {\n          description: build.wrapDescription(\n            \"The root query type which gives access points into the data universe.\",\n            \"type\"\n          ),\n          name: inflection.builtin(\"Query\"),\n          isTypeOf: (value, _context, info) =>\n            info.parentType == null || value === $$isQuery,\n          fields: ({ Self }) => ({\n            query: {\n              description: build.wrapDescription(\n                \"Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.\",\n                \"field\"\n              ),\n              type: new GraphQLNonNull(Self),\n              resolve() {\n                return $$isQuery;\n              },\n            },\n          }),\n        },\n        {\n          __origin: `graphile-build built-in (root query type)`,\n          isRootQuery: true,\n        },\n        true\n      );\n      if (queryType) {\n        return extend(\n          schema,\n          {\n            query: queryType,\n          },\n          `Adding 'query' type to Schema`\n        );\n      } else {\n        return schema;\n      }\n    },\n    [\"Query\"]\n  );\n}: Plugin);\n"],"mappings":";;;;;;IAO+BA,WAAW,GAA1B,eAAeA,WAAWA,CAACC,OAAO,EAAE;EAClDA,OAAO,CAACC,IAAI,CACV,OAAO,EACNC,KAAY,IACXA,KAAK,CAACC,MAAM,CACVD,KAAK,EACL;IACEE,SAAS,EAAEC,MAAM,CAAC,SAAS;EAC7B,CAAC,EACA,iBACH,CAAC,EACH,CAAC,OAAO,CACV,CAAC;EACDL,OAAO,CAACC,IAAI,CACV,eAAe,EACf,CAACK,MAAU,EAAEJ,KAAK,KAAK;IACrB,MAAM;MACJE,SAAS;MACTG,YAAY;MACZJ,MAAM;MACNK,OAAO,EAAE;QAAEC,iBAAiB;QAAEC;MAAe,CAAC;MAC9CC;IACF,CAAC,GAAGT,KAAK;IACT,MAAMU,SAAS,GAAGL,YAAY,CAC5BE,iBAAiB,EACjB;MACEI,WAAW,EAAEX,KAAK,CAACY,eAAe,CAChC,uEAAuE,EACvE,MACF,CAAC;MACDC,IAAI,EAAEJ,UAAU,CAACK,OAAO,CAAC,OAAO,CAAC;MACjCC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAC9BA,IAAI,CAACC,UAAU,IAAI,IAAI,IAAIH,KAAK,KAAKd,SAAS;MAChDkB,MAAM,EAAEA,CAAC;QAAEC;MAAK,CAAC,MAAM;QACrBC,KAAK,EAAE;UACLX,WAAW,EAAEX,KAAK,CAACY,eAAe,CAChC,wJAAwJ,EACxJ,OACF,CAAC;UACDW,IAAI,EAAE,IAAIf,cAAc,CAACa,IAAI,CAAC;UAC9BG,OAAOA,CAAA,EAAG;YACR,OAAOtB,SAAS;UAClB;QACF;MACF,CAAC;IACH,CAAC,EACD;MACEuB,QAAQ,EAAG,2CAA0C;MACrDC,WAAW,EAAE;IACf,CAAC,EACD,IACF,CAAC;IACD,IAAIhB,SAAS,EAAE;MACb,OAAOT,MAAM,CACXG,MAAM,EACN;QACEkB,KAAK,EAAEZ;MACT,CAAC,EACA,+BACH,CAAC;IACH,CAAC,MAAM;MACL,OAAON,MAAM;IACf;EACF,CAAC,EACD,CAAC,OAAO,CACV,CAAC;AACH,CAAC;AAAAuB,OAAA,CAAAC,OAAA,GAAA/B,WAAA"}