{"version":3,"file":"makeNewBuild.js","names":["graphql","_interopRequireWildcard","require","_graphqlParseResolveInfo","_debug","_interopRequireDefault","_pluralize","_lru","_semver","_utils","_swallowError","_resolveNode","_Live","_extend","_chalk","_crypto","_package","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","recurseDataGeneratorsForFieldWarned","isString","str","isDev","indexOf","process","env","NODE_ENV","debug","debugFactory","hashCache","LRU","maxLength","hashFieldAlias","precomputed","hash","createHash","update","digest","getSafeAliasFromAlias","alias","length","startsWith","Error","getSafeAliasFromResolveInfo","resolveInfo","rawGetAliasFromResolveInfo","getNameFromType","Type","GraphQLSchema","name","GraphQLInterfaceType","GraphQLObjectType","GraphQLInputObjectType","GraphQLEnumType","GraphQLUnionType","getNamedType","isCompositeType","isAbstractType","mergeData","data","gen","ReturnType","arg","results","ensureArray","resultIndex","resultCount","result","keys","i","l","k","value","newData","push","knownTypes","knownTypeNames","map","val","Array","isArray","ensureName","_fn","fn","displayName","enabled","console","trace","makeNewBuild","builder","allTypes","Int","GraphQLInt","Float","GraphQLFloat","String","GraphQLString","Boolean","GraphQLBoolean","ID","GraphQLID","allTypesSources","fieldDataGeneratorsByFieldNameByType","Map","fieldArgDataGeneratorsByFieldNameByType","options","graphileBuildVersion","version","versions","hasVersion","packageName","range","includePrerelease","packageVersion","semver","satisfies","parseResolveInfo","simplifyParsedResolveInfoFragmentWithType","getAliasFromResolveInfo","resolveAlias","_args","_context","addType","type","origin","newTypeSource","status","currentHookName","oldTypeSource","firstEntityDetails","indent","chalk","magenta","secondEntityDetails","yellow","bold","getTypeByName","typeName","extend","newWithHooks","spec","inScope","performNonEmptyFieldsCheck","scope","warn","fieldDataGeneratorsByFieldName","fieldArgDataGeneratorsByFieldName","newSpec","applyHooks","addDataGeneratorForField","fieldName","Self","recurseDataGeneratorsForField","iKnowWhatIAmDoing","error","parsedResolveInfoFragment","rest","args","fields","StrippedType","argDataGeneratorsForSelfByFieldName","argDataGenerators","genIndex","genCount","local","typeFields","getFields","keyIndex","keyCount","field","gens","commonContext","rawSpec","interfaces","interfacesContext","rawInterfaces","processedFields","fieldsContext","fieldWithHooks","fieldScope","context","addDataGenerator","addArgDataGenerator","getDataFromParsedResolveInfoFragment","dgIndex","dgCount","e","finalSpec","FieldReturnType","returnType","rawFields","fieldsSpec","__origin","fieldSpec","autoField","values","reduce","memo","valueKey","newValue","types","typesContext","rawTypes","_Self","isRootQuery","isProbablyAnEmptyObjectError","message","match","swallowError","scopeByType","fieldDataGeneratorsByType","inflection","pluralize","singularize","singular","upperCamelCase","camelCase","constantCase","builtin","live","coerceToGraphQLName","resultingName","replace","wrapDescription","resolveNode","currentHookEvent","liveCoordinator","LiveCoordinator"],"sources":["../src/makeNewBuild.js"],"sourcesContent":["// @flow\n\nimport * as graphql from \"graphql\";\nimport type {\n  GraphQLNamedType,\n  GraphQLInputField,\n  GraphQLFieldResolver,\n  GraphQLType,\n} from \"graphql\";\nimport {\n  parseResolveInfo,\n  simplifyParsedResolveInfoFragmentWithType,\n  getAliasFromResolveInfo as rawGetAliasFromResolveInfo,\n} from \"graphql-parse-resolve-info\";\nimport debugFactory from \"debug\";\nimport type { ResolveTree } from \"graphql-parse-resolve-info\";\nimport pluralize from \"pluralize\";\nimport LRU from \"@graphile/lru\";\nimport semver from \"semver\";\nimport {\n  upperCamelCase,\n  camelCase,\n  constantCase,\n  wrapDescription,\n} from \"./utils\";\nimport swallowError from \"./swallowError\";\nimport resolveNode from \"./resolveNode\";\nimport { LiveCoordinator } from \"./Live\";\n\nimport type SchemaBuilder, {\n  Build,\n  Context,\n  Scope,\n  DataForType,\n} from \"./SchemaBuilder\";\n\nimport extend, { indent } from \"./extend\";\nimport chalk from \"chalk\";\nimport { createHash } from \"crypto\";\n\nimport { version } from \"../package.json\";\n\nlet recurseDataGeneratorsForFieldWarned = false;\n\nconst isString = str => typeof str === \"string\";\nconst isDev = [\"test\", \"development\"].indexOf(process.env.NODE_ENV) >= 0;\nconst debug = debugFactory(\"graphile-build\");\n\n/*\n * This should be more than enough for normal usage. If you come under a\n * sophisticated attack then the attacker can empty this of useful values (with\n * a lot of work) but because we use SHA1 hashes under the covers the aliases\n * will still be consistent even after the LRU cache is exhausted. And SHA1 can\n * produce half a million hashes per second on my machine, the LRU only gives\n * us a 10x speedup!\n */\nconst hashCache = new LRU({ maxLength: 100000 });\n\n/*\n * This function must never return a string longer than 56 characters.\n *\n * This function must only output alphanumeric and underscore characters.\n *\n * Collisions in SHA1 aren't problematic here (for us; they will be problematic\n * for the user deliberately causing them, but that's their own fault!), so\n * we'll happily take the performance boost over SHA256.\n */\nfunction hashFieldAlias(str) {\n  const precomputed = hashCache.get(str);\n  if (precomputed) return precomputed;\n  const hash = createHash(\"sha1\").update(str).digest(\"hex\");\n  hashCache.set(str, hash);\n  return hash;\n}\n\n/*\n * This function may be replaced at any time, but all versions of it will\n * always return a representation of `alias` (a valid GraphQL identifier)\n * that:\n *\n *   1. won't conflict with normal GraphQL field names\n *   2. won't be over 60 characters long (allows for systems with alias length limits, such as PG)\n *   3. will give the same value when called multiple times within the same GraphQL query\n *   4. matches the regex /^[@!-_A-Za-z0-9]+$/\n *   5. will not be prefixed with `__` (as that will conflict with other Graphile internals)\n *\n * It does not guarantee that this alias will be human readable!\n */\nfunction getSafeAliasFromAlias(alias) {\n  if (alias.length <= 60 && !alias.startsWith(\"@\")) {\n    // Use the `@` to prevent conflicting with normal GraphQL field names, but otherwise let it through verbatim.\n    return `@${alias}`;\n  } else if (alias.length > 1024) {\n    throw new Error(\n      `GraphQL alias '${alias}' is too long, use shorter aliases (max length 1024).`\n    );\n  } else {\n    return `@@${hashFieldAlias(alias)}`;\n  }\n}\n\n/*\n * This provides a \"safe\" version of the alias from ResolveInfo, guaranteed to\n * never be longer than 60 characters. This makes it suitable as a PostgreSQL\n * identifier.\n */\nfunction getSafeAliasFromResolveInfo(resolveInfo) {\n  const alias = rawGetAliasFromResolveInfo(resolveInfo);\n  return getSafeAliasFromAlias(alias);\n}\n\ntype MetaData = {\n  [string]: Array<mixed>,\n};\ntype DataGeneratorFunction = (\n  parsedResolveInfoFragment: ResolveTree,\n  ReturnType: GraphQLType,\n  ...args: Array<mixed>\n) => Array<MetaData>;\n\ntype FieldSpecIsh = {\n  type?: GraphQLType,\n  args?: {},\n  resolve?: GraphQLFieldResolver<*, *>,\n  deprecationReason?: string,\n  description?: ?string,\n};\n\ntype ContextAndGenerators =\n  | Context\n  | {\n      addDataGenerator: DataGeneratorFunction => void,\n      addArgDataGenerator: DataGeneratorFunction => void,\n      getDataFromParsedResolveInfoFragment: (\n        parsedResolveInfoFragment: ResolveTree,\n        Type: GraphQLType\n      ) => DataForType,\n    };\n\nexport type FieldWithHooksFunction = (\n  fieldName: string,\n  spec: FieldSpecIsh | (ContextAndGenerators => FieldSpecIsh),\n  fieldScope?: {}\n) => {};\n\nexport type InputFieldWithHooksFunction = (\n  fieldName: string,\n  spec: GraphQLInputField,\n  fieldScope?: {}\n) => GraphQLInputField;\n\nfunction getNameFromType(Type: GraphQLNamedType | GraphQLSchema) {\n  if (Type instanceof GraphQLSchema) {\n    return \"schema\";\n  } else {\n    return Type.name;\n  }\n}\n\nconst {\n  GraphQLSchema,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLUnionType,\n  getNamedType,\n  isCompositeType,\n  isAbstractType,\n} = graphql;\n\nconst mergeData = (\n  data: MetaData,\n  gen: DataGeneratorFunction,\n  ReturnType,\n  arg\n) => {\n  const results: ?Array<MetaData> = ensureArray<MetaData>(\n    gen(arg, ReturnType, data)\n  );\n  if (!results) {\n    return;\n  }\n  for (\n    let resultIndex = 0, resultCount = results.length;\n    resultIndex < resultCount;\n    resultIndex++\n  ) {\n    const result: MetaData = results[resultIndex];\n    const keys = Object.keys(result);\n    for (let i = 0, l = keys.length; i < l; i++) {\n      const k = keys[i];\n      data[k] = data[k] || [];\n      const value: mixed = result[k];\n      const newData: ?Array<mixed> = ensureArray<mixed>(value);\n      if (newData) {\n        data[k].push(...newData);\n      }\n    }\n  }\n};\n\nconst knownTypes = [\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLUnionType,\n];\nconst knownTypeNames = knownTypes.map(k => k.name);\n\nfunction ensureArray<T>(val: null | T | Array<T>): void | Array<T> {\n  if (val == null) {\n    return;\n  } else if (Array.isArray(val)) {\n    // $FlowFixMe\n    return (val: Array<T>);\n  } else {\n    return ([val]: Array<T>);\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nlet ensureName = _fn => {};\nif ([\"development\", \"test\"].indexOf(process.env.NODE_ENV) >= 0) {\n  ensureName = fn => {\n    // $FlowFixMe: displayName\n    if (isDev && !fn.displayName && !fn.name && debug.enabled) {\n      // eslint-disable-next-line no-console\n      console.trace(\n        \"WARNING: you've added a function with no name as an argDataGenerator, doing so may make debugging more challenging\"\n      );\n    }\n  };\n}\n\nexport default function makeNewBuild(builder: SchemaBuilder): { ...Build } {\n  const allTypes = {\n    Int: graphql.GraphQLInt,\n    Float: graphql.GraphQLFloat,\n    String: graphql.GraphQLString,\n    Boolean: graphql.GraphQLBoolean,\n    ID: graphql.GraphQLID,\n  };\n  const allTypesSources = {\n    Int: \"GraphQL Built-in\",\n    Float: \"GraphQL Built-in\",\n    String: \"GraphQL Built-in\",\n    Boolean: \"GraphQL Built-in\",\n    ID: \"GraphQL Built-in\",\n  };\n\n  // Every object type gets fieldData associated with each of its\n  // fields.\n\n  // When a field is defined, it may add to this field data.\n\n  // When something resolves referencing this type, the resolver may\n  // request the fieldData, e.g. to perform optimisations.\n\n  // fieldData is an object whose keys are the fields on this\n  // GraphQLObjectType and whose values are an object (whose keys are\n  // arbitrary namespaced keys and whose values are arrays of\n  // information of this kind)\n  const fieldDataGeneratorsByFieldNameByType = new Map();\n  const fieldArgDataGeneratorsByFieldNameByType = new Map();\n\n  return {\n    options: builder.options,\n    graphileBuildVersion: version,\n    versions: {\n      graphql: require(\"graphql/package.json\").version,\n      \"graphile-build\": version,\n    },\n    hasVersion(\n      packageName: string,\n      range: string,\n      options?: { includePrerelease?: boolean } = { includePrerelease: true }\n    ): boolean {\n      const packageVersion = this.versions[packageName];\n      if (!packageVersion) return false;\n      return semver.satisfies(packageVersion, range, options);\n    },\n    graphql,\n    parseResolveInfo,\n    simplifyParsedResolveInfoFragmentWithType,\n    getSafeAliasFromAlias,\n    getAliasFromResolveInfo: getSafeAliasFromResolveInfo, // DEPRECATED: do not use this!\n    getSafeAliasFromResolveInfo,\n    resolveAlias(data, _args, _context, resolveInfo) {\n      const alias = getSafeAliasFromResolveInfo(resolveInfo);\n      return data[alias];\n    },\n    addType(type: GraphQLNamedType, origin?: ?string): void {\n      if (!type.name) {\n        throw new Error(\n          `addType must only be called with named types, try using require('graphql').getNamedType`\n        );\n      }\n      const newTypeSource =\n        origin ||\n        // 'this' is typically only available after the build is finalized\n        (this\n          ? `'addType' call during hook '${this.status.currentHookName}'`\n          : null);\n      if (allTypes[type.name]) {\n        if (allTypes[type.name] !== type) {\n          const oldTypeSource = allTypesSources[type.name];\n          const firstEntityDetails = !oldTypeSource\n            ? \"The first type was registered from an unknown origin.\"\n            : `The first entity was:\\n\\n${indent(\n                chalk.magenta(oldTypeSource)\n              )}`;\n          const secondEntityDetails = !newTypeSource\n            ? \"The second type was registered from an unknown origin.\"\n            : `The second entity was:\\n\\n${indent(\n                chalk.yellow(newTypeSource)\n              )}`;\n          throw new Error(\n            `A type naming conflict has occurred - two entities have tried to define the same type '${chalk.bold(\n              type.name\n            )}'.\\n\\n${indent(firstEntityDetails)}\\n\\n${indent(\n              secondEntityDetails\n            )}`\n          );\n        }\n      } else {\n        allTypes[type.name] = type;\n        allTypesSources[type.name] = newTypeSource;\n      }\n    },\n    getTypeByName(typeName) {\n      return allTypes[typeName];\n    },\n    extend,\n    newWithHooks<T: GraphQLNamedType | GraphQLSchema, ConfigType: *>(\n      Type: Class<T>,\n      spec: ConfigType,\n      inScope: Scope,\n      performNonEmptyFieldsCheck = false\n    ): ?T {\n      const scope = inScope || {};\n      if (!inScope) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `No scope was provided to new ${Type.name}[name=${spec.name}], it's highly recommended that you add a scope so other hooks can easily reference your object - please check usage of 'newWithHooks'. To mute this message, just pass an empty object.`\n        );\n      }\n      if (!Type) {\n        throw new Error(\"No type specified!\");\n      }\n      if (!this.newWithHooks) {\n        throw new Error(\n          \"Please do not generate the schema during the build building phase, use 'init' instead\"\n        );\n      }\n      const fieldDataGeneratorsByFieldName = {};\n      const fieldArgDataGeneratorsByFieldName = {};\n      let newSpec = spec;\n      if (\n        knownTypes.indexOf(Type) === -1 &&\n        knownTypeNames.indexOf(Type.name) >= 0\n      ) {\n        throw new Error(\n          `GraphQL conflict for '${Type.name}' detected! Multiple versions of graphql exist in your node_modules?`\n        );\n      }\n      if (Type === GraphQLSchema) {\n        newSpec = builder.applyHooks(this, \"GraphQLSchema\", newSpec, {\n          type: \"GraphQLSchema\",\n          scope,\n        });\n      } else if (Type === GraphQLObjectType) {\n        const addDataGeneratorForField = (\n          fieldName,\n          fn: DataGeneratorFunction\n        ) => {\n          // $FlowFixMe: displayName\n          fn.displayName =\n            // $FlowFixMe: displayName\n            fn.displayName ||\n            `${getNameFromType(Self)}:${fieldName}[${fn.name || \"anonymous\"}]`;\n          fieldDataGeneratorsByFieldName[fieldName] =\n            fieldDataGeneratorsByFieldName[fieldName] || [];\n          fieldDataGeneratorsByFieldName[fieldName].push(fn);\n        };\n        const recurseDataGeneratorsForField = (\n          fieldName,\n          iKnowWhatIAmDoing\n        ) => {\n          /*\n           * Recursing data generators is not safe in general; however there\n           * are certain exceptions - for example when you know there are no\n           * \"dynamic\" data generator fields - e.g. where the GraphQL alias is\n           * not used at all. In PostGraphile the only case of this is the\n           * PageInfo object as none of the fields accept arguments, and they\n           * do not rely on the GraphQL query alias to store the result.\n           */\n          if (!iKnowWhatIAmDoing && !recurseDataGeneratorsForFieldWarned) {\n            recurseDataGeneratorsForFieldWarned = true;\n            // eslint-disable-next-line no-console\n            console.error(\n              \"Use of `recurseDataGeneratorsForField` is NOT SAFE. e.g. `{n1: node { a: field1 }, n2: node { a: field2 } }` cannot resolve correctly.\"\n            );\n          }\n          const fn = (parsedResolveInfoFragment, ReturnType, ...rest) => {\n            const { args } = parsedResolveInfoFragment;\n            const { fields } = this.simplifyParsedResolveInfoFragmentWithType(\n              parsedResolveInfoFragment,\n              ReturnType\n            );\n            const results = [];\n            const StrippedType: GraphQLNamedType = getNamedType(ReturnType);\n            const fieldDataGeneratorsByFieldName =\n              fieldDataGeneratorsByFieldNameByType.get(StrippedType);\n            const argDataGeneratorsForSelfByFieldName =\n              fieldArgDataGeneratorsByFieldNameByType.get(Self);\n            if (argDataGeneratorsForSelfByFieldName) {\n              const argDataGenerators =\n                argDataGeneratorsForSelfByFieldName[fieldName];\n              for (\n                let genIndex = 0, genCount = argDataGenerators.length;\n                genIndex < genCount;\n                genIndex++\n              ) {\n                const gen = argDataGenerators[genIndex];\n                const local = ensureArray(gen(args, ReturnType, ...rest));\n                if (local) {\n                  results.push(...local);\n                }\n              }\n            }\n            if (\n              fieldDataGeneratorsByFieldName &&\n              isCompositeType(StrippedType) &&\n              !isAbstractType(StrippedType)\n            ) {\n              const typeFields = StrippedType.getFields();\n              const keys = Object.keys(fields);\n              for (\n                let keyIndex = 0, keyCount = keys.length;\n                keyIndex < keyCount;\n                keyIndex++\n              ) {\n                const alias = keys[keyIndex];\n                const field = fields[alias];\n                // Run generators with `field` as the `parsedResolveInfoFragment`, pushing results to `results`\n                const gens = fieldDataGeneratorsByFieldName[field.name];\n                if (gens) {\n                  for (\n                    let genIndex = 0, genCount = gens.length;\n                    genIndex < genCount;\n                    genIndex++\n                  ) {\n                    const gen = gens[genIndex];\n                    const local = ensureArray(\n                      gen(field, typeFields[field.name].type, ...rest)\n                    );\n                    if (local) {\n                      results.push(...local);\n                    }\n                  }\n                }\n              }\n            }\n            return results;\n          };\n          fn.displayName = `recurseDataGeneratorsForField(${getNameFromType(\n            Self\n          )}:${fieldName})`;\n          addDataGeneratorForField(fieldName, fn);\n          // get type from field, get\n        };\n\n        const commonContext = {\n          type: \"GraphQLObjectType\",\n          scope,\n        };\n        newSpec = builder.applyHooks(\n          this,\n          \"GraphQLObjectType\",\n          newSpec,\n          {\n            ...commonContext,\n            addDataGeneratorForField,\n            recurseDataGeneratorsForField,\n          },\n          `|${newSpec.name}`\n        );\n\n        const rawSpec = newSpec;\n        newSpec = {\n          ...newSpec,\n          interfaces: () => {\n            const interfacesContext = {\n              ...commonContext,\n              Self,\n              GraphQLObjectType: rawSpec,\n            };\n            let rawInterfaces = rawSpec.interfaces || [];\n            if (typeof rawInterfaces === \"function\") {\n              rawInterfaces = rawInterfaces(interfacesContext);\n            }\n            return builder.applyHooks(\n              this,\n              \"GraphQLObjectType:interfaces\",\n              rawInterfaces,\n              interfacesContext,\n              `|${getNameFromType(Self)}`\n            );\n          },\n          fields: () => {\n            const processedFields = [];\n            const fieldsContext = {\n              ...commonContext,\n              addDataGeneratorForField,\n              recurseDataGeneratorsForField,\n              Self,\n              GraphQLObjectType: rawSpec,\n              fieldWithHooks: ((fieldName, spec, fieldScope) => {\n                if (!isString(fieldName)) {\n                  throw new Error(\n                    \"It looks like you forgot to pass the fieldName to `fieldWithHooks`, we're sorry this is currently necessary.\"\n                  );\n                }\n                if (!fieldScope) {\n                  throw new Error(\n                    \"All calls to `fieldWithHooks` must specify a `fieldScope` \" +\n                      \"argument that gives additional context about the field so \" +\n                      \"that further plugins may more easily understand the field. \" +\n                      \"Keys within this object should contain the phrase 'field' \" +\n                      \"since they will be merged into the parent objects scope and \" +\n                      \"are not allowed to clash. If you really have no additional \" +\n                      \"information to give, please just pass `{}`.\"\n                  );\n                }\n\n                const argDataGenerators = [];\n                fieldArgDataGeneratorsByFieldName[fieldName] =\n                  argDataGenerators;\n\n                let newSpec = spec;\n                const context = {\n                  ...commonContext,\n                  Self,\n                  addDataGenerator(fn) {\n                    return addDataGeneratorForField(fieldName, fn);\n                  },\n                  addArgDataGenerator(fn) {\n                    ensureName(fn);\n                    argDataGenerators.push(fn);\n                  },\n                  getDataFromParsedResolveInfoFragment: (\n                    parsedResolveInfoFragment,\n                    ReturnType\n                  ): DataForType => {\n                    const Type: GraphQLNamedType = getNamedType(ReturnType);\n                    const data = {};\n\n                    const { fields, args } =\n                      this.simplifyParsedResolveInfoFragmentWithType(\n                        parsedResolveInfoFragment,\n                        ReturnType\n                      );\n\n                    // Args -> argDataGenerators\n                    for (\n                      let dgIndex = 0, dgCount = argDataGenerators.length;\n                      dgIndex < dgCount;\n                      dgIndex++\n                    ) {\n                      const gen = argDataGenerators[dgIndex];\n                      try {\n                        mergeData(data, gen, ReturnType, args);\n                      } catch (e) {\n                        debug(\n                          \"Failed to execute argDataGenerator '%s' on %s of %s\",\n                          gen.displayName || gen.name || \"anonymous\",\n                          fieldName,\n                          getNameFromType(Self)\n                        );\n                        throw e;\n                      }\n                    }\n\n                    // finalSpec.type -> fieldData\n                    if (!finalSpec) {\n                      throw new Error(\n                        \"It's too early to call this! Call from within resolve\"\n                      );\n                    }\n                    const fieldDataGeneratorsByFieldName =\n                      fieldDataGeneratorsByFieldNameByType.get(Type);\n                    if (\n                      fieldDataGeneratorsByFieldName &&\n                      isCompositeType(Type) &&\n                      !isAbstractType(Type)\n                    ) {\n                      const typeFields = Type.getFields();\n                      const keys = Object.keys(fields);\n                      for (\n                        let keyIndex = 0, keyCount = keys.length;\n                        keyIndex < keyCount;\n                        keyIndex++\n                      ) {\n                        const alias = keys[keyIndex];\n                        const field = fields[alias];\n                        const gens = fieldDataGeneratorsByFieldName[field.name];\n                        if (gens) {\n                          const FieldReturnType = typeFields[field.name].type;\n                          for (let i = 0, l = gens.length; i < l; i++) {\n                            mergeData(data, gens[i], FieldReturnType, field);\n                          }\n                        }\n                      }\n                    }\n                    return data;\n                  },\n                  scope: extend(\n                    extend(\n                      { ...scope },\n                      {\n                        fieldName,\n                      },\n                      `Within context for GraphQLObjectType '${rawSpec.name}'`\n                    ),\n                    fieldScope,\n                    `Extending scope for field '${fieldName}' within context for GraphQLObjectType '${rawSpec.name}'`\n                  ),\n                };\n                if (typeof newSpec === \"function\") {\n                  newSpec = newSpec(context);\n                }\n                newSpec = builder.applyHooks(\n                  this,\n                  \"GraphQLObjectType:fields:field\",\n                  newSpec,\n                  context,\n                  `|${getNameFromType(Self)}.fields.${fieldName}`\n                );\n                newSpec.args = newSpec.args || {};\n                newSpec = {\n                  ...newSpec,\n                  args: builder.applyHooks(\n                    this,\n                    \"GraphQLObjectType:fields:field:args\",\n                    newSpec.args,\n                    {\n                      ...context,\n                      field: newSpec,\n                      returnType: newSpec.type,\n                    },\n                    `|${getNameFromType(Self)}.fields.${fieldName}`\n                  ),\n                };\n                const finalSpec = newSpec;\n                processedFields.push(finalSpec);\n                return finalSpec;\n              }: FieldWithHooksFunction),\n            };\n            let rawFields = rawSpec.fields || {};\n            if (typeof rawFields === \"function\") {\n              rawFields = rawFields(fieldsContext);\n            }\n            const fieldsSpec = builder.applyHooks(\n              this,\n              \"GraphQLObjectType:fields\",\n              this.extend(\n                {},\n                rawFields,\n                `Default field included in newWithHooks call for '${\n                  rawSpec.name\n                }'. ${inScope.__origin || \"\"}`\n              ),\n              fieldsContext,\n              `|${rawSpec.name}`\n            );\n            // Finally, check through all the fields that they've all been processed; any that have not we should do so now.\n            for (const fieldName in fieldsSpec) {\n              const fieldSpec = fieldsSpec[fieldName];\n              if (processedFields.indexOf(fieldSpec) < 0) {\n                // We've not processed this yet; process it now!\n                fieldsSpec[fieldName] = fieldsContext.fieldWithHooks(\n                  fieldName,\n                  fieldSpec,\n                  {\n                    autoField: true, // We don't have any additional information\n                  }\n                );\n              }\n            }\n            return fieldsSpec;\n          },\n        };\n      } else if (Type === GraphQLInputObjectType) {\n        const commonContext = {\n          type: \"GraphQLInputObjectType\",\n          scope,\n        };\n        newSpec = builder.applyHooks(\n          this,\n          \"GraphQLInputObjectType\",\n          newSpec,\n          commonContext,\n          `|${newSpec.name}`\n        );\n        newSpec.fields = newSpec.fields || {};\n\n        const rawSpec = newSpec;\n        newSpec = {\n          ...newSpec,\n          fields: () => {\n            const processedFields = [];\n            const fieldsContext = {\n              ...commonContext,\n              Self,\n              GraphQLInputObjectType: rawSpec,\n              fieldWithHooks: ((fieldName, spec, fieldScope = {}) => {\n                if (!isString(fieldName)) {\n                  throw new Error(\n                    \"It looks like you forgot to pass the fieldName to `fieldWithHooks`, we're sorry this is currently necessary.\"\n                  );\n                }\n                const context = {\n                  ...commonContext,\n                  Self,\n                  scope: extend(\n                    extend(\n                      { ...scope },\n                      {\n                        fieldName,\n                      },\n                      `Within context for GraphQLInputObjectType '${rawSpec.name}'`\n                    ),\n                    fieldScope,\n                    `Extending scope for field '${fieldName}' within context for GraphQLInputObjectType '${rawSpec.name}'`\n                  ),\n                };\n                let newSpec = spec;\n                if (typeof newSpec === \"function\") {\n                  newSpec = newSpec(context);\n                }\n                newSpec = builder.applyHooks(\n                  this,\n                  \"GraphQLInputObjectType:fields:field\",\n                  newSpec,\n                  context,\n                  `|${getNameFromType(Self)}.fields.${fieldName}`\n                );\n                const finalSpec = newSpec;\n                processedFields.push(finalSpec);\n                return finalSpec;\n              }: InputFieldWithHooksFunction),\n            };\n            let rawFields = rawSpec.fields;\n            if (typeof rawFields === \"function\") {\n              rawFields = rawFields(fieldsContext);\n            }\n            const fieldsSpec = builder.applyHooks(\n              this,\n              \"GraphQLInputObjectType:fields\",\n              this.extend(\n                {},\n                rawFields,\n                `Default field included in newWithHooks call for '${\n                  rawSpec.name\n                }'. ${inScope.__origin || \"\"}`\n              ),\n              fieldsContext,\n              `|${getNameFromType(Self)}`\n            );\n            // Finally, check through all the fields that they've all been processed; any that have not we should do so now.\n            for (const fieldName in fieldsSpec) {\n              const fieldSpec = fieldsSpec[fieldName];\n              if (processedFields.indexOf(fieldSpec) < 0) {\n                // We've not processed this yet; process it now!\n                fieldsSpec[fieldName] = fieldsContext.fieldWithHooks(\n                  fieldName,\n                  fieldSpec,\n                  {\n                    autoField: true, // We don't have any additional information\n                  }\n                );\n              }\n            }\n            return fieldsSpec;\n          },\n        };\n      } else if (Type === GraphQLEnumType) {\n        const commonContext = {\n          type: \"GraphQLEnumType\",\n          scope,\n        };\n        newSpec = builder.applyHooks(\n          this,\n          \"GraphQLEnumType\",\n          newSpec,\n          commonContext,\n          `|${newSpec.name}`\n        );\n\n        newSpec.values = builder.applyHooks(\n          this,\n          \"GraphQLEnumType:values\",\n          newSpec.values,\n          commonContext,\n          `|${newSpec.name}`\n        );\n        const values = newSpec.values;\n        newSpec.values = Object.keys(values).reduce((memo, valueKey) => {\n          const value = values[valueKey];\n          const newValue = builder.applyHooks(\n            this,\n            \"GraphQLEnumType:values:value\",\n            value,\n            commonContext,\n            `|${newSpec.name}|${valueKey}`\n          );\n          memo[valueKey] = newValue;\n          return memo;\n        }, {});\n      } else if (Type === GraphQLUnionType) {\n        const commonContext = {\n          type: \"GraphQLUnionType\",\n          scope,\n        };\n        newSpec = builder.applyHooks(\n          this,\n          \"GraphQLUnionType\",\n          newSpec,\n          { ...commonContext },\n          `|${newSpec.name}`\n        );\n\n        const rawSpec = newSpec;\n        newSpec = {\n          ...newSpec,\n          types: () => {\n            const typesContext = {\n              ...commonContext,\n              Self,\n              GraphQLUnionType: rawSpec,\n            };\n            let rawTypes = rawSpec.types || [];\n            if (typeof rawTypes === \"function\") {\n              rawTypes = rawTypes(typesContext);\n            }\n            return builder.applyHooks(\n              this,\n              \"GraphQLUnionType:types\",\n              rawTypes,\n              typesContext,\n              `|${getNameFromType(Self)}`\n            );\n          },\n        };\n      } else if (Type === GraphQLInterfaceType) {\n        const commonContext = {\n          type: \"GraphQLInterfaceType\",\n          scope,\n        };\n        newSpec = builder.applyHooks(\n          this,\n          \"GraphQLInterfaceType\",\n          newSpec,\n          commonContext,\n          `|${newSpec.name}`\n        );\n\n        const rawSpec = newSpec;\n        newSpec = {\n          ...newSpec,\n          fields: () => {\n            const processedFields = [];\n            const fieldsContext = {\n              ...commonContext,\n              Self,\n              GraphQLInterfaceType: rawSpec,\n              fieldWithHooks: ((fieldName, spec, fieldScope) => {\n                if (!isString(fieldName)) {\n                  throw new Error(\n                    \"It looks like you forgot to pass the fieldName to `fieldWithHooks`, we're sorry this is currently necessary.\"\n                  );\n                }\n                if (!fieldScope) {\n                  throw new Error(\n                    \"All calls to `fieldWithHooks` must specify a `fieldScope` \" +\n                      \"argument that gives additional context about the field so \" +\n                      \"that further plugins may more easily understand the field. \" +\n                      \"Keys within this object should contain the phrase 'field' \" +\n                      \"since they will be merged into the parent objects scope and \" +\n                      \"are not allowed to clash. If you really have no additional \" +\n                      \"information to give, please just pass `{}`.\"\n                  );\n                }\n\n                let newSpec = spec;\n                const context = {\n                  ...commonContext,\n                  Self,\n                  scope: extend(\n                    extend(\n                      { ...scope },\n                      {\n                        fieldName,\n                      },\n                      `Within context for GraphQLInterfaceType '${rawSpec.name}'`\n                    ),\n                    fieldScope,\n                    `Extending scope for field '${fieldName}' within context for GraphQLInterfaceType '${rawSpec.name}'`\n                  ),\n                };\n                if (typeof newSpec === \"function\") {\n                  newSpec = newSpec(context);\n                }\n                newSpec = builder.applyHooks(\n                  this,\n                  \"GraphQLInterfaceType:fields:field\",\n                  newSpec,\n                  context,\n                  `|${getNameFromType(Self)}.fields.${fieldName}`\n                );\n                newSpec.args = newSpec.args || {};\n                newSpec = {\n                  ...newSpec,\n                  args: builder.applyHooks(\n                    this,\n                    \"GraphQLInterfaceType:fields:field:args\",\n                    newSpec.args,\n                    {\n                      ...context,\n                      field: newSpec,\n                      returnType: newSpec.type,\n                    },\n                    `|${getNameFromType(Self)}.fields.${fieldName}`\n                  ),\n                };\n                const finalSpec = newSpec;\n                processedFields.push(finalSpec);\n                return finalSpec;\n              }: FieldWithHooksFunction),\n            };\n            let rawFields = rawSpec.fields || {};\n            if (typeof rawFields === \"function\") {\n              rawFields = rawFields(fieldsContext);\n            }\n            const fieldsSpec = builder.applyHooks(\n              this,\n              \"GraphQLInterfaceType:fields\",\n              this.extend(\n                {},\n                rawFields,\n                `Default field included in newWithHooks call for '${\n                  rawSpec.name\n                }'. ${inScope.__origin || \"\"}`\n              ),\n              fieldsContext,\n              `|${rawSpec.name}`\n            );\n            // Finally, check through all the fields that they've all been processed; any that have not we should do so now.\n            for (const fieldName in fieldsSpec) {\n              const fieldSpec = fieldsSpec[fieldName];\n              if (processedFields.indexOf(fieldSpec) < 0) {\n                // We've not processed this yet; process it now!\n                fieldsSpec[fieldName] = fieldsContext.fieldWithHooks(\n                  fieldName,\n                  fieldSpec,\n                  {\n                    autoField: true, // We don't have any additional information\n                  }\n                );\n              }\n            }\n            return fieldsSpec;\n          },\n        };\n      }\n\n      const finalSpec: ConfigType = newSpec;\n\n      const Self: T = new Type(finalSpec);\n      if (!(Self instanceof GraphQLSchema) && performNonEmptyFieldsCheck) {\n        try {\n          if (\n            Self instanceof GraphQLInterfaceType ||\n            Self instanceof GraphQLObjectType ||\n            Self instanceof GraphQLInputObjectType\n          ) {\n            const _Self:\n              | GraphQLInterfaceType\n              | GraphQLInputObjectType\n              | GraphQLObjectType = Self;\n            if (typeof _Self.getFields === \"function\") {\n              const fields = _Self.getFields();\n              if (Object.keys(fields).length === 0) {\n                // We require there's at least one field on GraphQLObjectType and GraphQLInputObjectType records\n                return null;\n              }\n            }\n          }\n        } catch (e) {\n          // This is the error we're expecting to handle:\n          // https://github.com/graphql/graphql-js/blob/831598ba76f015078ecb6c5c1fbaf133302f3f8e/src/type/definition.js#L526-L531\n          if (inScope && inScope.isRootQuery) {\n            throw e;\n          }\n          const isProbablyAnEmptyObjectError = !!e.message.match(\n            /function which returns such an object/\n          );\n          if (!isProbablyAnEmptyObjectError) {\n            this.swallowError(e);\n          }\n          return null;\n        }\n      }\n\n      this.scopeByType.set(Self, scope);\n      if (finalSpec.name) {\n        this.addType(\n          Self,\n          scope.__origin ||\n            (this\n              ? `'newWithHooks' call during hook '${this.status.currentHookName}'`\n              : null)\n        );\n      }\n      fieldDataGeneratorsByFieldNameByType.set(\n        Self,\n        fieldDataGeneratorsByFieldName\n      );\n      fieldArgDataGeneratorsByFieldNameByType.set(\n        Self,\n        fieldArgDataGeneratorsByFieldName\n      );\n      return Self;\n    },\n    fieldDataGeneratorsByType: fieldDataGeneratorsByFieldNameByType, // @deprecated\n    fieldDataGeneratorsByFieldNameByType,\n    fieldArgDataGeneratorsByFieldNameByType,\n    inflection: {\n      pluralize,\n      singularize: pluralize.singular,\n      upperCamelCase,\n      camelCase,\n      constantCase,\n\n      // Built-in names (allows you to override these in the output schema)\n      builtin: name => {\n        /*\n         * e.g.:\n         *\n         * graphile-build:\n         *\n         * - Query\n         * - Mutation\n         * - Subscription\n         * - Node\n         * - PageInfo\n         *\n         * graphile-build-pg:\n         *\n         * - Interval\n         * - BigInt\n         * - BigFloat\n         * - BitString\n         * - Point\n         * - Date\n         * - Datetime\n         * - Time\n         * - JSON\n         * - UUID\n         * - InternetAddress\n         *\n         * Other plugins may add their own builtins too; try and avoid conflicts!\n         */\n        return name;\n      },\n\n      // When converting a query field to a subscription (live query) field, this allows you to rename it\n      live: name => name,\n\n      // Try and make something a valid GraphQL 'Name'\n      coerceToGraphQLName: (name: string) => {\n        let resultingName = name;\n\n        /*\n         * Name is defined in GraphQL to match this regexp:\n         *\n         * /^[_A-Za-z][_0-9A-Za-z]*$/\n         *\n         * See: https://graphql.github.io/graphql-spec/June2018/#sec-Appendix-Grammar-Summary.Lexical-Tokens\n         *\n         * So if our 'name' starts with a digit, we must prefix it with\n         * something. We'll just use an underscore.\n         */\n        if (resultingName.match(/^[0-9]/)) {\n          resultingName = \"_\" + resultingName;\n        }\n\n        /*\n         * Fields beginning with two underscores are reserved by the GraphQL\n         * introspection systems, trim to just one.\n         */\n        resultingName = resultingName.replace(/^__+/g, \"_\");\n\n        return resultingName;\n      },\n    },\n    wrapDescription,\n    swallowError,\n    // resolveNode: EXPERIMENTAL, API might change!\n    resolveNode,\n    status: {\n      currentHookName: null,\n      currentHookEvent: null,\n    },\n    liveCoordinator: new LiveCoordinator(),\n    scopeByType: new Map(),\n  };\n}\n"],"mappings":"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"}