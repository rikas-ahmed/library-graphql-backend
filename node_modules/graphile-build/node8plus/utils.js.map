{"version":3,"file":"utils.js","names":["_upperFirst","_interopRequireDefault","require","_camelCase","_pluralize","obj","__esModule","default","bindAll","keys","forEach","key","bind","exports","constantCaseAll","str","replace","toUpperCase","formatInsideUnderscores","fn","matches","match","Error","start","middle","end","upperFirst","upperFirstAll","camelCase","camelCaseAll","constantCase","upperCamelCase","pluralize","plz","singularize","singular","breakLine","line","maxLen","parts","split","RegExp","length","sublines","i","push","slice","wrapDescription","description","position","indentationLength","map","join"],"sources":["../src/utils.js"],"sourcesContent":["// @flow\nimport upperFirstAll from \"lodash/upperFirst\";\nimport camelCaseAll from \"lodash/camelCase\";\nimport plz from \"pluralize\";\n\nconst bindAll = (obj: {}, keys: Array<string>): string => {\n  keys.forEach(key => {\n    obj[key] = obj[key].bind(obj);\n  });\n  return obj;\n};\n\nexport { bindAll };\n\nexport const constantCaseAll = (str: string): string =>\n  str\n    .replace(/[^a-zA-Z0-9_]+/g, \"_\")\n    .replace(/[A-Z]+/g, \"_$&\")\n    .replace(/__+/g, \"_\")\n    .replace(/^[^a-zA-Z0-9]+/, \"\")\n    .replace(/^[0-9]/, \"_$&\") // GraphQL enums must not start with a number\n    .toUpperCase();\n\nexport const formatInsideUnderscores =\n  (fn: (input: string) => string) =>\n  (str: string): string => {\n    const matches = str.match(/^(_*)([\\s\\S]*?)(_*)$/);\n    if (!matches) {\n      throw new Error(\"Impossible?\"); // Satiate Flow\n    }\n    const [, start, middle, end] = matches;\n    return `${start}${fn(middle)}${end}`;\n  };\n\nexport const upperFirst = formatInsideUnderscores(upperFirstAll);\nexport const camelCase = formatInsideUnderscores(camelCaseAll);\nexport const constantCase = formatInsideUnderscores(constantCaseAll);\nexport const upperCamelCase = (str: string): string =>\n  upperFirst(camelCase(str));\n\nexport const pluralize = (str: string): string => plz(str);\nexport const singularize = (str: string): string => plz.singular(str);\n\n// Copied from GraphQL v14, MIT license (c) GraphQL Contributors.\nfunction breakLine(line: string, maxLen: number): Array<string> {\n  const parts = line.split(new RegExp(`((?: |^).{15,${maxLen - 40}}(?= |$))`));\n  if (parts.length < 4) {\n    return [line];\n  }\n  const sublines = [parts[0] + parts[1] + parts[2]];\n  for (let i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1]);\n  }\n  return sublines;\n}\n\n/**\n * Only use this on descriptions that are plain text, or that we create\n * manually in code; since descriptions are markdown, it's not safe to use on\n * descriptions that contain code blocks or long inline code strings.\n */\nexport const wrapDescription = (\n  description: string,\n  position: \"root\" | \"type\" | \"field\" | \"arg\"\n): string => {\n  const indentationLength =\n    position === \"root\"\n      ? 0\n      : position === \"type\"\n      ? 0\n      : position === \"field\"\n      ? 2\n      : position === \"arg\"\n      ? 4\n      : 0;\n  // This follows the implementation from GraphQL v14 to make our GraphQL v15\n  // schema more similar. Ref:\n  // https://github.com/graphql/graphql-js/pull/2223/files\n  const maxLen = 120 - indentationLength;\n  return description\n    .split(\"\\n\")\n    .map(line => {\n      if (line.length < maxLen + 5) {\n        return line;\n      }\n      // For > 120 character long lines, cut at space boundaries into sublines\n      // of ~80 chars.\n      return breakLine(line, maxLen).join(\"\\n\");\n    })\n    .join(\"\\n\");\n};\n"],"mappings":"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"}